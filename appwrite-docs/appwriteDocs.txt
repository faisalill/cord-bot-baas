[[{"pageContent":"<p>You can use Appwrite to build both client and server integrations. Client integrations are for frontend and mobile applications, which use Appwrite's Client APIs and <a href=\"/docs/sdks#client\">Client SDKs</a>. Server integrations, including the Appwrite CLI, are for backend and CLI applications which use Appwrite's Server APIs and <a href=\"/docs/sdks#server\">Server SDKs.</a></p>\n\n<p>When building client integrations with the Client SDKs, you authenticate with an account and operate in the scope of the account. This means Client SDKs can only access resources that your account has been granted permission to access.</p>\n\n<ul>\n    <li class=\"margin-bottom\"><a href=\"/docs/permissions\" rel=\"noopener\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> Learn more about permissions</a></li>\n</ul>\n\n<p>When building server integrations with the Server SDKs, you operate in the scope of an API key instead of an account. API keys are created with scopes that specify the type of resources they can access and the type of operations they can perform on those resources. API keys bypass permissions and can access all resources belonging to any account.</p>\n\n<ul>\n    <li class=\"margin-bottom\"><a href=\"/docs/keys\" rel=\"noopener\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> Learn more about API keys</a></li>\n</ul>\n","metadata":{"source":"./appwrite-docs/admin.phtml"}}],[{"pageContent":"<?php\n\nuse Appwrite\\Utopia\\View;\n\n?>\n\n<p>Appwrite is built on top of a microservices architecture. This architecture allows us to provide a scalable & distributed system for max flexibility, observability, and performance. Most of the Appwrite stack is stateless and can be easily replicated. For persistency, Appwrite uses standard battle-proven tools like MariaDB, Redis, and InfluxDB.</p>\n\n<?php\n$image = new View(__DIR__.'/../general/image.phtml');\n    echo $image\n        ->setParam('srcLight', 'https://raw.githubusercontent.com/appwrite/appwrite/7a06b4e4bfa39c0dfaff45cd7bf978201b856e99/docs/specs/overview.drawio.svg')\n        ->setParam('srcDark', '')\n        ->setParam('alt', 'Appwrite\\'s microservices architecture.')\n        ->setParam('description', 'Appwrite\\'s microservices architecture')\n        ->render();\n?>\n\n<h2>Observability</h2>\n\n<p>The Appwrite architecture allows to monitor and detect how the different microservices perform efficiently. Each microservice has its own usage metrics and logs to allow you to debug or scale it quickly. Using Docker, you can also limit the resource usage (CPU, Memory, Swap) by specific services.</p>\n\n<h2>Responsibilities</h2>\n<p>Each service in the stack has a specific type of workload it has to handle, like sending emails, executing cloud functions or logging user activity. All the heavy lifting workloads are delegated from the API service to the background workers consuming messages in an event-driven way from the Appwrite pub/sub mechanism (implemented using Redis). Using this design, we make sure the Appwrite API is fast, responsive and has to handle only critical sync operations as appropriate for a request->response based service that should respond as fast as possible for minimum latency.</p>\n\n<h2>Traefik</h2>\n\n<p>Traefik is a modern reverse proxy and load balancer written in Go that makes deploying microservices easy. Traefik integrates with your existing infrastructure components and configures itself automatically and dynamically. We use Traefik as the main entrypoint for the different Appwrite APIs. Traefik is also responsible for serving Appwrite auto-generated SSL certificates. This microservice is completely stateless.</p>\n\n<h2>Appwrite</h2>\n\n<p>The main Appwrite container implements the Appwrite API protocols, handles authentication, authorization, and rate-limiting. This microservice is completely stateless.</p>\n\n<h2>Redis</h2>\n\n<h2>MariaDB</h2>\n\n<h2>InfluxDB</h2>\n\n<h2>StatsD</h2>\n\n<h2>ClamAV</h2>\n \n<p>ClamAV is a TCP Anti-virus server responsible for scanning all user uploads to the Appwrite storage. The ClamAV micro service is optional and can be disabled using Appwrite environment variables.</p>\n\n<h2>Maintenance</h2>\n\n<p>The Maintenance microservice is responsible to delegate maintenance jobs for different workers at specific time intervals that can be customized using Appwrite environment variables. The different tasks include deletion of old logs, and cleaning of irrelevant abuse records.</p>\n\n<h2>Schedule</h2>\n\n<p>The Schedule microservice is responsible for delegating future tasks to the workers and set recurring tasks and cloud function executions.</p>\n\n<h2>Workers</h2>\n\n<p><b>Functions</b></p>\n\n<p>The Functions worker is responsible for executing your Appwrite cloud functions in an isolated runtime environment. The service leverages Docker for creating running environment in multiple supported coding languages.</p>\n\n<p><b>Audits</b></p>\n\n<p><b>Usage</b></p>\n\n<p><b>Deletes</b></p>\n\n<p><b>Certificates</b></p>\n\n<p><b>Mails</b></p>","metadata":{"source":"./appwrite-docs/architecture.phtml"}}],[{"pageContent":"<p>\n    Appwrite provides many security features to keep both your Appwrite project and your user's information secure.\n</p>\n\n<h2><a href=\"/docs/authentication-security#persistence\" id=\"persistence\">Persistence</a></h2>\n\n<p>\n    Appwrite handles the persistence of the session in a consistent way across SDKs. After authenticating with an SDK, the SDK will persist the session so that the user will not need to log in again the next time they open the app. The mechanism for persistence depends on the SDK.\n</p>\n\n<div class=\"notice\">\n  <h2>Best Practice</h2>\n  <p>Only keep user sessions active as long as needed and only maintain <b>one</b> instance of the Client SDK in your app to avoid conflicting session data.</p>\n</div>\n\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large text-size-small vertical\">\n    <thead>\n        <tr>\n            <th style=\"width: 80px\"></th>\n            <th style=\"width: 120px\">SDK</th>\n            <th>Persistence Method</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>\n                <img src=\"/images-ee/platforms/web.svg\" alt=\"Logo\" height=\"30\" class=\"force-light sdk-logo margin-start margin-end\" />\n                <img src=\"/images-ee/platforms/dark/web.svg\" alt=\"Logo\" height=\"30\" class=\"force-dark sdk-logo margin-start margin-end\" />\n            </td>\n            <td>\n                Web\n            </td>\n            <td>\n                Uses a secure session cookie and falls back to local storage when a session cookie is not available.\n            </td>\n        </tr>        \n        <tr>\n            <td>\n                <img src=\"/images-ee/platforms/flutter.svg\" alt=\"Logo\" height=\"30\" class=\"force-light sdk-logo margin-start margin-end\" />\n                <img src=\"/images-ee/platforms/dark/flutter.svg\" alt=\"Logo\" height=\"30\" class=\"force-dark sdk-logo margin-start margin-end\" />\n            </td>\n            <td>\n                Flutter\n            </td>\n            <td>\n                Uses a session cookie stored in Application Documents through the <b>path_provider</b> package.\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <img src=\"/images-ee/platforms/apple.svg\" alt=\"Logo\" height=\"30\" class=\"force-light sdk-logo margin-start margin-end\" />\n                <img src=\"/images-ee/platforms/dark/apple.svg\" alt=\"Logo\" height=\"30\" class=\"force-dark sdk-logo margin-start margin-end\" />\n            </td>\n            <td>\n                Apple\n            </td>\n            <td>\n                Uses a session cookie stored in <b>UserDefaults</b>.\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <img src=\"/images-ee/platforms/android.svg\" alt=\"Logo\" height=\"30\" class=\"force-light sdk-logo margin-start margin-end\" />\n                <img src=\"/images-ee/platforms/dark/android.svg\" alt=\"Logo\" height=\"30\" class=\"force-dark sdk-logo margin-start margin-end\" />\n            </td>\n            <td>\n                Android\n            </td>\n            <td>\n                Uses a session cookie stored in <b>SharedPreferences</b>.\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n<h2><a href=\"/docs/authentication-security#limits\" id=\"limits\">Session Limits</a></h2>\n<p>In Appwrite versions 1.2 and above, you can limit the number of active sessions created per user to prevent the accumulation of unused but active sessions. New sessions created by the same user past the session limit deletes the oldest session.</p>\n\n<p>You can change the session limit in the <b>Security</b> tab of the Auth Service in your Appwrite Console. The default session limit is 10 with a maximum configurable limit of 100.</p> \n\n<h2><a href=\"/docs/authentication-security#security\" id=\"security\">Security</a></h2>\n\n<p>\n    Security is very important to protect users' data and privacy. Appwrite uses a <a href=\"/docs/permissions\">permissions model</a> coupled with user sessions to ensure users need correct permissions to access resources. With all Appwrite services, including databases and storage, access is granted at the collection, bucket, document, or file level. These permissions are enforced for client SDKs and server SDKs when using JWT, but are ignored when using a server SDK with an API key.\n</p>\n\n<h2><a href=\"/docs/authentication-security#password-history\" id=\"password-history\">Password History</a></h2>\n<p>Password history prevents users from reusing recent passwords. This protects user accounts from security risks by enforcing a new password everytime it's changed.</p>\n\n<p>Password history can be enabled in the Auth service's <b>Security</b> tab on the Appwrite console. You can choose how many previous passwords to remember up to a maximum of 20 and block users from reusing them.</p>\n\n<h2><a href=\"/docs/authentication-security#password-dictionary\" id=\"password-dictionary\">Password Dictionary</a></h2>\n<p>Password dictionary protects users from using bad passwords. It compares the user's password to the <a href=\"https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/10k-most-common.txt\">10,000</a> most common passwords and throws an error if there's a match. Together with <a href=\"/docs/rate-limits\">rate limits</a>, password dictionary will significantly reduce the chance of a malicious actor from guessing user passwords.</p>\n\n\n<p>Password dictionary can be enabled in the Auth service's <b>Security</b> tab on the Appwrite console.</p>","metadata":{"source":"./appwrite-docs/authentication-security.phtml"}}],[{"pageContent":"<p>\n    You can extend Appwrite's APIs by building backend apps using <a href=\"/docs/getting-started-for-server\">Server SDKs</a>. To secure your backend app's APIs, client apps must prove their identity against your backend app before accessing sensitive information. You can secure these APIs and enforce access permissions in your backend app by using JWT authentication.\n</p>\n\n<p>\n    If you are already authenticated on your client-side app and need your backend app to <b>act on behalf of the user</b>, this guide will walk you through the process.\n</p>\n\n<h2><a href=\"/docs/authentication-server#proof-of-identity\" id=\"proof-of-identity\">Proof of Identity</a></h2>\n<p>Before making requests to your backend APIs, your client application needs to first create a session <b>directly with Appwrite</b> using the account service. This session will act like an ID card for the user and can be used to access resources in Appwrite. The client will <b>only receive information accessible to the user</b> based on the resources's <a href=\"/docs/permissions\">permissions</a>.</p>\n\n<p>When you build backend APIs to extend Appwrite's functionality, these APIs should still <b>respect access permissions</b> to keep user data secure. Appwrite's backend SDKs allows you to securely act on behalf of a user with the same permissions by using JWT authentication.</p>\n\n<h2><a href=\"/docs/authentication-server#jwt\" id=\"jwt\">JWT Authentication</a></h2>\n<p><a href=\"https://jwt.io/introduction\" target=\"_blank\" rel=\"noopener\">JSON Web Tokens</a> (JWTs) are a secure means to transfer information or claims between two parties. JWT act like temporary copies of the user's ID card that allow Appwrite's Server SDKs to access information oh behalf of a user.</p>\n\n<p>You need to create a session using the Client SDKs <b>before</b> generating a JWT. The JWT will be a stateless proof of claim for the identity of the authenticated user and expire after 15 minutes or when the session is deleted.</p>\n\n<p>You can generate a JWT like this:</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nconst account = new Account(client);\n\nconst promise = account.createJWT();\n\npromise.then(function (response) {\n    console.log(response);\n}, function (error) {\n    console.log(error);\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nfinal account = Account(client);\n\nfinal jwt = await account.createJWT();\n\n </code></pre>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nval account = Account(client)\n\nval jwt = account.createJWT()</code></pre>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nlet account = Account(client)\n\nlet jwt = try await account.createJWT()</code></pre>\n    </li>\n    <li>\n        <h3>GraphQL</h3>\n        <div class=\"ide\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n            <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>mutation {\n    accountCreateJWT {\n        jwt\n    }\n}</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>Your server application can use the JWT to act on behalf of the user by creating a <code>Client</code> instance with the JWT for <b>each request it receives</b>. To keep your API secure, <b>discard the client object</b> after each request.</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Node.js</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"nodejs\" data-lang-label=\"Node.js SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>const { Client } = require('node-appwrite');\n\nconst client = new Client();\n\nclient\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]')                // Your project ID\n    .setJWT('eyJJ9.eyJ...886ca');               // Your secret JSON Web Token</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>PHP</h3>\n\n        <div class=\"ide margin-top-small\" data-lang=\"php\" data-lang-label=\"PHP SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-php\" data-prism>use Appwrite\\Client;\n\n$client = new Client();\n\n$client\n    ->setEndpoint('https://cloud.appwrite.io/v1')            // Your API Endpoint\n    ->setProject('[PROJECT_ID]')                           // Your project ID\n    ->setJWT('eyJJ9.eyJ...886ca');                          // Your secret JSON Web Token</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Python</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"python\" data-lang-label=\"Python SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-python\" data-prism>from appwrite.client import Client\n\nclient = Client()\n\n(client\n  .set_endpoint('https://cloud.appwrite.io/v1')              # Your API Endpoint\n  .set_project('[PROJECT_ID]')                             # Your project ID\n  .set_jwt('eyJJ9.eyJ...886ca')                             # Your secret JSON Web Token\n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Ruby</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"ruby\" data-lang-label=\"Ruby SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-ruby\" data-prism>require 'appwrite'\n\ninclude Appwrite\n\nclient = Client.new\n\nclient\n    .set_endpoint('https://cloud.appwrite.io/v1')            # Your API Endpoint\n    .set_project('[PROJECT_ID]')                           # Your project ID\n    .set_jwt('eyJJ9.eyJ...886ca')                           # Your secret JSON Web Token</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Deno</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"typescript\" data-lang-label=\"Deno SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-typescript\" data-prism>import { Client } from \"https://deno.land/x/appwrite/mod.ts\";\n\nlet client = new Client();\n\nclient\n    .setEndpoint('https://cloud.appwrite.io/v1')             // Your API Endpoint\n    .setProject('[PROJECT_ID]')                            // Your project ID\n    .setJWT('eyJJ9.eyJ...886ca');                           // Your secret JSON Web Token</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Dart</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"dart\" data-lang-label=\"Dart SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:dart_appwrite/dart_appwrite.dart';\n\nfinal client = Client();\n\nclient\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]')                // Your project ID\n    .setJWT('eyJJ9.eyJ...886ca');               // Your secret JSON Web Token</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Kotlin</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"kotlin\" data-lang-label=\"Kotlin SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\n\nval client = Client()\n\nclient\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n    .setJWT(\"eyJJ9.eyJ...886ca\")                // Your secret JSON Web Token</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Swift</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"swift\" data-lang-label=\"Swift SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n\nclient\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n    .setJWT(\"eyJJ9.eyJ...886ca\")                // Your secret JSON Web Token</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>.NET</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"csharp\" data-lang-label=\".NET SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-csharp\" data-prism>using Appwrite;\n\nvar client = new Client();\n\nclient\n    .SetEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .SetProject(\"[PROJECT_ID]\")                // Your project ID\n    .SetJWT(\"eyJJ9.eyJ...886ca\");               // Your secret JSON Web Token</code></pre>\n        </div>\n    </li>\n</ul>\n\n<h2><a href=\"/docs/authentication-server#when-to-use\" id=\"when-to-use\">When Should I Use JWT Auth?</a></h2>\n<p>JWT auth is useful when you need your backend app's Server SDK to be restricted by the same set of permissions.</p>\n\n<p>If your backend app's Server SDK is using an <a href=\"/docs/keys\">API key</a>, it will fetch <b>all resources</b> regardless of permissions. This means the Server SDK might fetch files and documents your user should not be able to see, which is not helpful when you need to act on behalf of a user.</p>\n\n<p>If your backend app's Server SDK is using a <b>JWT</b>, it will only fetch resources your user has permissions to access.</p>\n\n<h2><a href=\"/docs/authentication-server#when-to-use-example\" id=\"when-to-use-example\">Example</a></h2>\n\n<p>Here's an example collection of birthdays with the following documents. Notice how they all have <b>different permissions</b>.</p>\n\n<table class=\"full text-size-small\">\n    <thead>\n    <tr>\n        <td>$id</td>\n        <td>name</td>\n        <td>birthday</td>\n        <td>$permissions</td>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>ac5fc866ad1e</td>\n        <td>Kevin</td>\n        <td>2012-02-03</td>\n        <td>\"read(\\\"user:user-a\\\")\"</td>\n    </tr>\n    <tr>\n        <td>bc7fc866ad1e</td>\n        <td>Laura</td>\n        <td>1999-09-22</td>\n        <td>\"read(\\\"user:user-b\\\")\"</td>\n    </tr>\n    <tr>\n        <td>cc2fc886ad1e</td>\n        <td>Bob</td>\n        <td>1982-05-11</td>\n        <td>\"read(\\\"user:user-c\\\")\"</td>\n    </tr>\n    </tbody>\n</table>\n\n<p>If you're authenticated on the client-side as <code>user-a</code> and created a JWT <code>'eyJJ9.eyJ...886ca'</code>, you can pass this JWT to a Server SDK on the backend server to fetch only the birthdays <code>user-a</code> can read.</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Node.js</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"nodejs\" data-lang-label=\"Node.js SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>const { Client } = require('node-appwrite');\n\nconst client = new Client();\n\nclient\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]')                // Your project ID\n    .setJWT('eyJJ9.eyJ...886ca');               // Your secret JSON Web Token\n\nconst databases = new sdk.Databases(client);\n\nconst birthday = await databases.listDocuments('642f358bf4084c662590', '642f3592aa5fc856ad1e');\n// ... More code to manipulate the results</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>PHP</h3>\n\n        <div class=\"ide margin-top-small\" data-lang=\"php\" data-lang-label=\"PHP SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-php\" data-prism>use Appwrite\\Client;\n\n$client = new Client();\n\n$client\n    ->setEndpoint('https://cloud.appwrite.io/v1')            // Your API Endpoint\n    ->setProject('[PROJECT_ID]')                           // Your project ID\n    ->setJWT('eyJJ9.eyJ...886ca');                          // Your secret JSON Web Tokens\n\n$databases = new Databases($client);\n\n$result = $databases->listDocuments('642f358bf4084c662590', '642f3592aa5fc856ad1e');\n// ... More code to manipulate the results</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Python</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"python\" data-lang-label=\"Python SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-python\" data-prism>from appwrite.client import Client\n\nclient = Client()\n\n(client\n  .set_endpoint('https://cloud.appwrite.io/v1')              # Your API Endpoint\n  .set_project('[PROJECT_ID]')                             # Your project ID\n  .set_jwt('eyJJ9.eyJ...886ca')                             # Your secret JSON Web Token\n)\n\ndatabases = Databases(client)\n\nresult = databases.list_documents('642f358bf4084c662590', '642f3592aa5fc856ad1e')\n# ... More code to manipulate the results</code></pre>\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Ruby</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"ruby\" data-lang-label=\"Ruby SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-ruby\" data-prism>require 'appwrite'\n\ninclude Appwrite\n\nclient = Client\n\nclient.new\n    .set_endpoint('https://cloud.appwrite.io/v1')            # Your API Endpoint\n    .set_project('[PROJECT_ID]')                           # Your project ID\n    .set_jwt('eyJJ9.eyJ...886ca')                           # Your secret JSON Web Token\n\ndatabases = Databases.new(client)\n\nresponse = databases.list_documents(database_id: '642f358bf4084c662590', '642f3592aa5fc856ad1e')\n# ... More code to manipulate the results</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Deno</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"typescript\" data-lang-label=\"Deno SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-typescript\" data-prism>import { Client } from \"https://deno.land/x/appwrite/mod.ts\";\n\nlet client = new Client();\n\nclient\n    .setEndpoint('https://cloud.appwrite.io/v1')             // Your API Endpoint\n    .setProject('[PROJECT_ID]')                            // Your project ID\n    .setJWT('eyJJ9.eyJ...886ca');                           // Your secret JSON Web Token\n\nlet databases = new sdk.Databases(client);\n\nlet promise = databases.listDocuments('642f358bf4084c662590', '642f3592aa5fc856ad1e');\n// ... More code to manipulate the results</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Dart</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"dart\" data-lang-label=\"Dart SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:dart_appwrite/dart_appwrite.dart';\n\nfinal client = Client();\n\nclient\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]')                // Your project ID\n    .setJWT('eyJJ9.eyJ...886ca');               // Your secret JSON Web Token\n\nDatabases databases = Databases(client);\n\nFuture result = databases.listDocuments(\n    databaseId: '642f358bf4084c662590',\n    collectionId: '642f3592aa5fc856ad1e',\n);\n// ... More code to manipulate the results</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Kotlin</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"kotlin\" data-lang-label=\"Kotlin SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\n\nval client = Client()\n\nclient\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n    .setJWT(\"eyJJ9.eyJ...886ca\")                // Your secret JSON Web Token\n\nval databases = Databases(client)\n\nval response = databases.listDocuments(\n    databaseId = \"642f358bf4084c662590\",\n    collectionId = \"642f3592aa5fc856ad1e\",\n)\n// ... More code to manipulate the results</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Swift</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"swift\" data-lang-label=\"Swift SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n\nclient\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n    .setJWT(\"eyJJ9.eyJ...886ca\")                // Your secret JSON Web Token\n    \nlet databases = Databases(client)\n\nlet documentList = try await databases.listDocuments(\n    databaseId: \"642f358bf4084c662590\",\n    collectionId: \"642f3592aa5fc856ad1e\"\n)\n/ ... More code to manipulate the results</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>.NET</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"csharp\" data-lang-label=\".NET SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-csharp\" data-prism>using Appwrite;\nusing Appwrite.Services;\nusing Appwrite.Models;\n\nvar client = new Client();\n\nclient\n    .SetEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .SetProject(\"[PROJECT_ID]\")                // Your project ID\n    .SetJWT(\"eyJJ9.eyJ...886ca\");               // Your secret JSON Web Token\n\nvar databases = new Databases(client);\n\nvar documentList = await databases.ListDocuments(\n    databaseId: \"642f358bf4084c662590\",\n    collectionId: \"642f3592aa5fc856ad1e\");\n\n// ... More code to manipulate the results</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>Only the birthday of Kevin is returned and documents where <code>user-A</code> has no permissions to access are not returned.</p>\n<div class=\"ide\">\n    <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>{\n  \"total\": 1,\n  \"documents\": [\n    {\n      \"name\": \"Kevin\",\n      \"birthday\": \"2012-02-03T00:00:00.000+00:00\",\n      \"$id\": \"ac5fc866ad1e\",\n      \"$permissions\": [\n        \"read(\\\"user:user-a\\\")\"\n      ],\n      \"$collectionId\": \"642f3592aa5fc856ad1e\",\n      \"$databaseId\": \"642f358bf4084c662590\",\n      ...\n    }\n  ]\n}</code></pre>\n</div>\n\n<p>If the same request is made where the Server SDK's <code>client</code> is authenticate with an API key instead of a JWT, the results returned will be different.</p>\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Node.js</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"nodejs\" data-lang-label=\"Node.js SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>const { Client } = require('node-appwrite');\n\nconst client = new Client();\n\nclient\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]')                // Your project ID\n    .setKey('919c2d18fb5d4...a2ae413da83346ad2')// Your secret API key\n\nconst databases = new sdk.Databases(client);\n\nconst birthday = await databases.listDocuments('642f358bf4084c662590', '642f3592aa5fc856ad1e');\n// ... More code to manipulate the results</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>PHP</h3>\n\n        <div class=\"ide margin-top-small\" data-lang=\"php\" data-lang-label=\"PHP SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-php\" data-prism>use Appwrite\\Client;\n\n$client = new Client();\n\n$client\n    ->setEndpoint('https://cloud.appwrite.io/v1')            // Your API Endpoint\n    ->setProject('[PROJECT_ID]')                           // Your project ID\n    ->setKey('919c2d18fb5d4...a2ae413da83346ad2')           // Your secret API key\n\n$databases = new Databases($client);\n\n$result = $databases->listDocuments('642f358bf4084c662590', '642f3592aa5fc856ad1e');\n// ... More code to manipulate the results</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Python</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"python\" data-lang-label=\"Python SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-python\" data-prism>from appwrite.client import Client\n\nclient = Client()\n\n(client\n  .set_endpoint('https://cloud.appwrite.io/v1')              # Your API Endpoint\n  .set_project('[PROJECT_ID]')                             # Your project ID\n  .setKey('919c2d18fb5d4...a2ae413da83346ad2')              # Your secret API key</code></pre>\n)\n\ndatabases = Databases(client)\n\nresult = databases.list_documents('642f358bf4084c662590', '642f3592aa5fc856ad1e')\n# ... More code to manipulate the results</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Ruby</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"ruby\" data-lang-label=\"Ruby SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-ruby\" data-prism>require 'appwrite'\n\ninclude Appwrite\n\nclient = Client\n\nclient.new\n    .set_endpoint('https://cloud.appwrite.io/v1')            # Your API Endpoint\n    .set_project('[PROJECT_ID]')                           # Your project ID\n    .setKey('919c2d18fb5d4...a2ae413da83346ad2')            # Your secret API key\n\ndatabases = Databases.new(client)\n\nresponse = databases.list_documents(database_id: '642f358bf4084c662590', '642f3592aa5fc856ad1e')\n# ... More code to manipulate the results</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Deno</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"typescript\" data-lang-label=\"Deno SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-typescript\" data-prism>import { Client } from \"https://deno.land/x/appwrite/mod.ts\";\n\nlet client = new Client();\n\nclient\n    .setEndpoint('https://cloud.appwrite.io/v1')             // Your API Endpoint\n    .setProject('[PROJECT_ID]')                            // Your project ID\n    .setKey('919c2d18fb5d4...a2ae413da83346ad2')            // Your secret API key\n\nlet databases = new sdk.Databases(client);\n\nlet promise = databases.listDocuments('642f358bf4084c662590', '642f3592aa5fc856ad1e');\n// ... More code to manipulate the results</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Dart</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"dart\" data-lang-label=\"Dart SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:dart_appwrite/dart_appwrite.dart';\n\nfinal client = Client();\n\nclient\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]')                // Your project ID\n    .setKey('919c2d18fb5d4...a2ae413da83346ad2')// Your secret API key\n\nDatabases databases = Databases(client);\n\nFuture result = databases.listDocuments(\n    databaseId: '642f358bf4084c662590',\n    collectionId: '642f3592aa5fc856ad1e',\n);\n// ... More code to manipulate the results</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Kotlin</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"kotlin\" data-lang-label=\"Kotlin SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\n\nval client = Client()\n\nclient\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n    .setKey(\"919c2d18fb5d4...a2ae413da83346ad2\")// Your secret API key\n\nval databases = Databases(client)\n\nval response = databases.listDocuments(\n    databaseId = \"642f358bf4084c662590\",\n    collectionId = \"642f3592aa5fc856ad1e\",\n)\n// ... More code to manipulate the results</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Swift</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"swift\" data-lang-label=\"Swift SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n\nclient\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n    .setKey(\"919c2d18fb5d4...a2ae413da83346ad2\")// Your secret API key\n    \n    let databases = Databases(client)\n    \n    let documentList = try await databases.listDocuments(\n        databaseId: \"642f358bf4084c662590\",\n        collectionId: \"642f3592aa5fc856ad1e\"\n    )\n    // ... More code to manipulate the results</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>.NET</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"csharp\" data-lang-label=\".NET SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-csharp\" data-prism>using Appwrite;\nusing Appwrite.Services;\nusing Appwrite.Models;\n\nvar client = new Client();\n\nclient\n    .SetEndpoint(\"https://cloud.appwrite.io/v1\")   // Your API Endpoint\n    .SetProject(\"[PROJECT_ID]\")                  // Your project ID\n    .SetKey(\"919c2d18fb5d4...a2ae413da83346ad2\");  // Your secret API key\n\nvar databases = new Databases(client);\n\nvar documentList = await databases.ListDocuments(\n    databaseId: \"642f358bf4084c662590\",\n    collectionId: \"642f3592aa5fc856ad1e\");\n\n// ... More code to manipulate the results</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>This will return every document regardless of permissions, which could lead to privacy and security problems.</p>\n\n<div class=\"ide\">\n    <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>{\n  \"total\": 3,\n  \"documents\": [\n    {\n      \"name\": \"Kevin\",\n      \"birthday\": \"2012-02-03T00:00:00.000+00:00\",\n      \"$id\": \"ac5fc866ad1e\",\n      \"$permissions\": [\n        \"read(\\\"user:user-a\\\")\"\n      ],\n      \"$collectionId\": \"642f3592aa5fc856ad1e\",\n      \"$databaseId\": \"642f358bf4084c662590\",\n      ...\n    },\n    {\n      \"name\": \"Laura\",\n      \"birthday\": \"1999-09-22T11:21:23.334+00:00\",\n      \"$id\": \"bc7fc866ad1e\",\n      \"$permissions\": [\n        \"read(\\\"user:user-b\\\")\"\n      ],\n      \"$collectionId\": \"642f3592aa5fc856ad1e\",\n      \"$databaseId\": \"642f358bf4084c662590\",\n      ...\n    },\n    {\n      \"name\": \"Bob\",\n      \"birthday\": \"1982-05-11T12:31:39.381+00:00\",\n      \"$id\": \"cc2fc886ad1e\",\n      \"$permissions\": [\n        \"read(\\\"user:user-c\\\")\"\n      ],\n      \"$collectionId\": \"642f3592aa5fc856ad1e\",\n      \"$databaseId\": \"642f358bf4084c662590\",\n      ...\n    }\n  ]\n}</code></pre>\n</div>\n\n<p>If you're integrating existing backend services with Appwrite or adding backend endpoints to perform more complex logic, JWT authentication helps them behave similarly to actual Appwrite endpoints.</p>\n","metadata":{"source":"./appwrite-docs/authentication-server.phtml"}}],[{"pageContent":"<p>Appwrite uses Let's Encrypt to auto-generate TLS certificates for your Appwrite instance to ensure your API traffic is appropriately encrypted. For Appwrite to properly generate certificates, a few conditions need to be met.</p>\n\n<ol class=\"margin-top margin-bottom-large text-size-normal\">\n\t<li>You need to use a public-facing domain with a known TLD pointing to your Appwrite instance.</li>\n\t<li>Your _APP_ENV <a href=\"https://appwrite.io/docs/environment-variables\">environment variable</a> should be set for production mode. The default Appwrite setup comes with this predefined setting, so you should be OK unless you change it.</li>\n\t<li>You need to ensure you have a valid email address set on _APP_SYSTEM_SECURITY_EMAIL_ADDRESS. The default setup comes with certs@appwrite.io as the default value. While this address will work, it&#39;s recommended to change it to your own email.</li>\n\t<li>Currently, Appwrite is using the <a href=\"https://letsencrypt.org/docs/client-options/\" target=\"_blank\">ACME</a> HTTP challenge to issue an TLS certificate. This forces us to generate certificates for port 443 when the challenge itself is performed on port 80. At this point, other ports will not work. To overcome this limit, you can set Appwrite on a separate sub-domain or use your own certificate or proxy server in front of Appwrite.</li>\n</ol>\n\n<h2>Debugging</h2>\n\n<p>If you're still struggling with your certificates, check the Appwrite certificates worker log. You can do that with the following command:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker compose logs appwrite-worker-certificates</code></pre>\n</div>\n\n<h2><a href=\"/docs/certificates#generationCycle\" id=\"generationCycle\">Generation Cycle</a></h2>\n\n<p>Appwrite auto-generates a certificate for your main domain when you first visit it. If your browser shows an insecure connection warning, you must proceed to trigger certificate generation. The domain in environment variable _APP_DOMAIN is considered your main domain. If you didn't set this variable, the first domain you visit would be marked as the main domain for your Appwrite instance. Appwrite follows this concept of the main domain to prevent generating certificates for domains you don't own. Keep in mind that you can always add additional domains as <b>Custom Domains</b> in your project settings to enable certificate generation for any domain.</p>\n\n<p>Certificate renewal is done as a part of the Appwrite maintenance task. Unless modified with environment variable _APP_MAINTENANCE_INTERVAL, this task runs every 24 hours. During this task, Appwrite looks for certificates due for renewal and renews them. One maintenance cycle only attempts to renew up to 200 certificates to respect the Let's Encrypt API limit. Every Let's Encrypt certificate is valid for 90 days, but Appwrite starts to renew them 30 days before the expiration.</p>\n\n<p>There are many reasons why certificate generation could fail, such as incorrect DNS settings, hitting Let's Encrypt API limit, or a failed HTTP ACME challenge. Every certificate generation failure is attempted again in the next renewal cycle, but only up to 5 attempts. If you need to run certificate generation for a domain beyond the attempts limit, you can use the manual generation method. </p>\n\n<h2><a href=\"/docs/certificates#manualGeneration\" id=\"manualGeneration\">Manual Generation</a></h2>\n\n<p>Since Appwrite generates and renews certificates automatically, a manual generation is seldom required. A manual generation can be useful when you hit the API limit and don't want to wait for the next maintenance cycle to renew the certificate. Use the following command to generate a certificate for your main domain:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker compose exec appwrite ssl</code></pre>\n</div>\n\n<p>If you want to generate a certificate for a specific domain, pass it as a parameter into the command:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker compose exec appwrite ssl domain=\"api.myapp.com\"</code></pre>\n</div>\n\n<h2>Dev Environment and Localhosts</h2>\n\n<p>You can&#39;t issue a&nbsp;<a href=\"https://letsencrypt.org/docs/certificates-for-localhost/\" target=\"_blank\">signed certificate for localhost</a>. This is because nobody uniquely owns that hostname and not an Appwrite specific limitation, just the way the internet works. By default, Appwrite will issue a self-signed certificate that is good enough for development.</p>\n\n<p>When using a self-signed certificate, you should enable `client.setSelfSigned()` method in your SDK of choice. This will allow your application to trust and connect with your local Appwrite server.</p>\n","metadata":{"source":"./appwrite-docs/certificates.phtml"}}],[{"pageContent":"<p>\nThe Appwrite CLI can be used in a non-interactive and headless manner, without saving configuration or sessions. This is especially useful when you want to automate tasks on a CI server.\n</p>\n<h2><a href=\"/docs/commandline-ci#CIMode\" id=\"CIMode\">CI Mode</a></h2>\n\n<p>You can enable CI mode for the Appwrite CLI by setting the <b>project ID, endpoint, and API Key</b>:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite client \\\n    --endpoint https://cloud.appwrite.io/v1 \\\n    --projectId [YOUR_PROJECT_ID] \\\n    --key YOUR_API_KEY</code></pre>\n</div>\n\n<p>When you set the global configuration parameters using the <code>appwrite client</code> command, they take precedence over the local configuration parameters in your <code>appwrite.json</code> thereby switching the CLI to non-interactive mode. </p> \n\n<p>In this mode, the CLI can only interact with one project at a time.</p>\n\n<h2><a href=\"/docs/commandline-ci#keys\" id=\"keys\">API Keys</a></h2>\n<p>In CI mode, the CLI uses an <b>API key</b> to authenticate. Your API key must have sufficient permissions to execute the commands you plan to use. <a href=\"/docs/keys\">Learn more about API Keys</a>.</p>\n\n<h2><a href=\"/docs/commandline-ci#non-interactive\" id=\"non-interactive\">Non-interactive Deployment</a></h2>\n<p>Appwrite's deploy commands can also be executed in a non-interactive mode. This applies to both function and collection deployment.</p>\n\n<p>You can deploy a function non-interactively by using the <code>--yes</code> option to skip all warnings and specifying which functions you want to deploy.</p>\n\n<p>Deploy a single function by ID:</p>\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite deploy function --functionId [FUNCTION ID] --yes</code></pre>\n</div>\n\n<p>Deploy all functions:</p>\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite deploy function --all --yes</code></pre>\n</div>\n\n<p>You can deploy databases, collections, teams, and buckets non-interactively in a similar way by using the <code>--all</code> and <code>--yes</code> option.</p>\n<p>Deploy all databases and collections:</p>\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite deploy collection --all --yes</code></pre>\n</div>\n\n<p>Deploy all teams:</p>\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite deploy team --all --yes</code></pre>\n</div>\n\n<p>Deploy all buckets:</p>\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite deploy buckets --all --yes</code></pre>\n</div>\n\n","metadata":{"source":"./appwrite-docs/command-line-ci.phtml"}}],[{"pageContent":"<p>\n    Appwrite provides authentication for many different use cases to fit the needs of developers. \n    Appwrite manages authentication with a combination of accounts and sessions. \n    Accounts can be created in many different ways, such as through an anonymous session, email and password, OAuth authentication, magic URLs, and more.\n</p>\n\n<h2><a href=\"/docs/authentication#account-vs-user-api\" id=\"account-vs-user-api\">Account vs Users API</a></h2>\n\n<p>\n    The Account API operates in the scope of the currently logged-in account and is usually used in a frontend or mobile app. The Users API is used in backend integrations and uses an API key with access to all your project users.\n</p>\n\n<p> \n    Some of the Account API methods are available from Server SDKs when you authenticate with a JWT. This allows your Server SDK to perform actions on behalf of a user.\n</p>\n\n<h2><a href=\"/docs/authentication#create-an-account\" id=\"create-an-account\">Create An Account</a></h2>\n\n<p>\n    A user account in Appwrite is the primary way to access information for a given project. Accounts can be created in many different ways, including <a href=\"/docs/client/account#accountCreateEmailSession\">email & password</a>, <a href=\"/docs/client/account#accountCreateAnonymousSession\">anonymous sessions</a>, <a href=\"/docs/client/account#accountCreateOAuth2Session\">OAuth2</a>, <a href=\"/docs/client/account#accountCreatePhoneSession\">phone authentication</a>, and more. Applications can create and manage sessions through the REST API or Client SDKs.\n</p>\n\n<h3><a href=\"/docs/authentication#email\" id=\"email\">Email</a></h3>\n\n<p>\n    Creating an account via email and password is one of the most common ways to sign up for an application. Appwrite provides email and password authentication out of the box. Using one of Appwrite's Client SDKs, or the REST APIs directly, you can create an account using an email address and password in your application.\n</p>\n\n<p>\n    Passwords are hashed with <a href=\"https://en.wikipedia.org/wiki/Argon2\" target=\"_blank\" rel=\"noopener\">Argon2</a>, a resilient and secure password hashing algorithm.\n</p>\n\n<p>\n    The example below shows you how to create an account:\n</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Account, ID } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nconst account = new Account(client);\n\nconst promise = account.create(\n    ID.unique(),\n    'team@appwrite.io',\n    'password'\n);\n\npromise.then(function (response) {\n    console.log(response);\n}, function (error) {\n    console.log(error);\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nfinal account = Account(client);\n\nfinal user = await account.create(\n    userId: ID.unique(),\n    email: 'team@appwrite.io',\n    password: 'password',\n);</code></pre>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Account\nimport io.appwrite.ID\n\nval client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nval account = Account(client)\n\nval user = account.create(\n    userId = ID.unique(),\n    email = \"team@appwrite.io\",\n    password = \"password\"\n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nlet account = Account(client)\n\nlet user = try await account.create(\n    userId: ID.unique(),\n    email: \"team@appwrite.io\",\n    password: \"password\"\n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>GraphQL</h3>\n        <div class=\"ide\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n            <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>\nmutation {\n    accountCreate(userId: \"unique()\", email: \"team@appwrite.io\", password: \"password\") {\n        _id\n        email\n        name\n    }\n}</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>\n    After an account is created, it can be verified through the <a href=\"/docs/account#accountCreateVerification\">account verification route</a> provided by the Appwrite Accounts API. The user doesn't need to be verified to log in, but you can restrict resource access to verified users only using permissions.\n</p>\n\n<h3><a href=\"/docs/authentication#anonymous-user\" id=\"anonymous-user\">Anonymous User</a></h3>\n\n<p>\nAnonymous authentication allows users of your application to create a temporary valid session without creating an account. The session has an expiration time of one year. If an account is created while an anonymous session is active, it will be attached to the existing anonymous session.\n</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nconst account = new Account(client);\n\nconst promise = account.createAnonymousSession();\n\npromise.then(function (response) {\n    console.log(response);\n}, function (error) {\n    console.log(error);\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nfinal account = Account(client);\n\nfinal user = await account.createAnonymousSession();</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nval account = Account(client)\n\nval user = account.createAnonymousSession()</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nlet account = Account(client)\n\nlet user = try await account.createAnonymousSession()</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>GraphQL</h3>\n        <div class=\"ide\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n            <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>\nmutation {\n    accountCreateAnonymousSession {\n        _id\n        userId\n        provider\n        expire\n    }\n}</code></pre>\n        </div>\n    </li>\n</ul>\n\n<h3><a href=\"/docs/authentication#oauth\" id=\"oauth\">OAuth</a></h3>\n\n<p>\n    OAuth is another way to authenticate a user using a multistep process. When using OAuth to authenticate, the authentication request is initiated from the client application. The user is then redirected to an OAuth2 provider to complete the authentication step, and finally, the user is redirected back to the client application. This provides integration with many third-party services that provide their own OAuth integration as a more secure approach than providing a username/password directly.\n</p>\n\n<p>\n    In applications with first-party redirects, using OAuth2 for authentication is preferred. \n</p>\n\n<p>\n    The example below shows you how to authenticate with OAuth2 using Amazon's OAuth system.\n</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n        <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nconst account = new Account(client);\n\n// Go to OAuth provider login page\naccount.createOAuth2Session('amazon');</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nfinal account = Account(client);\n\n// Go to OAuth provider login page\nawait account.createOAuth2Session(provider: 'amazon');</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nval account = Account(client)\n\n// Go to OAuth provider login page\naccount.createOAuth2Session(provider = \"amazon\")</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nlet account = Account(client)\n\n// Go to OAuth provider login page\ntry await account.createOAuth2Session(provider: \"amazon\")</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>GraphQL</h3>\n        <div class=\"notice\">\n            <p>OAuth is not available through the GraphQL API. You can use the REST API or any Client SDK instead.</p>\n        </div>\n    </li>\n</ul>\n\n<p>  \n    If there is already an active anonymous session, the new session will be attached to it. If there are no active sessions, the server will attempt to look for an account with the same email address as the email received from the OAuth2 provider and attach the new session to the existing account. If no matching account is found - the server will create a new account.\n</p>\n\n<h3><a href=\"/docs/authentication#phone\" id=\"phone\">Phone</a></h3>\n\n<p>\n    Phone authentication is done using a two-step authentication process. When using phone authentication, the authentication request is initiated from the client application and an SMS is sent to the user with a secret key for creating a session. \n</p>\n\n<p>\n    The example below shows you how to initiate a phone authentication request.\n</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n        <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Account, ID } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nconst account = new Account(client);\n\nconst promise = account.createPhoneSession(\n    ID.unique(),\n    '+16171234567'\n);\n\npromise.then(function (response) {\n    console.log(response);\n}, function (error) {\n    console.log(error);\n});\n\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nfinal account = Account(client);\n\nfinal session = await account.createPhoneSession(\n    userId: ID.unique(),\n    phone: '+16171234567'\n);</code></pre>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Account\nimport io.appwrite.ID\n\nval client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nval account = Account(client)\n\nval session = account.createPhoneSession(\n    userId = ID.unique(),\n    phone = \"+16171234567\"\n)</code></pre>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nlet account = Account(client)\n\nlet session = try await account.createPhoneSession(\n    userId: ID.unique(),\n    phone: \"+16171234567\"\n)</code></pre>\n    </li>\n    <li>\n        <h3>GraphQL</h3>\n        <div class=\"ide\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n            <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>mutation {\n    accountCreatePhoneSession(userId: \"unique()\", phone: \"+16171234567\") {\n        _id\n        userId\n        secret\n        expire\n    }\n}</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>\n    After initiation, the returned user ID and secret are used to confirm the user. The secret will be a 6-digit number in the SMS message sent to the user.\n</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n        <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Account, ID } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nconst account = new Account(client);\n\nconst promise = account.updatePhoneSession(\n    '[USER_ID]',\n    '[SECRET]'\n);\n\npromise.then(function (response) {\n    console.log(response);\n}, function (error) {\n    console.log(error);\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nfinal account = Account(client);\n\nfinal session = await account.updatePhoneSession(\n    userId: '[USER_ID]',\n    secret: '[SECRET]'\n);</code></pre>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Account\nimport io.appwrite.ID\n\nval client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nval account = Account(client)\n\nval session = account.updatePhoneSession(\n    userId = \"[USER_ID]\",\n    secret = \"[SECRET]\"\n)</code></pre>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nlet account = Account(client)\n\nlet session = try await account.updatePhoneSession(\n    userId: \"[USER_ID]\",\n    secret: \"[SECRET]\"\n)</code></pre>\n    </li>\n    <li>\n        <h3>GraphQL</h3>\n        <div class=\"ide\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n            <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>\nmutation {\n    accountUpdatePhoneSession(userId: \"[USER_ID]\", secret: \"[SECRET]\") {\n        _id\n        userId\n        provider\n        expire\n    }\n}</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>\n    After the secret is verified, a session will be created.\n</p>\n\n\n<h3><a href=\"/docs/authentication#magic-url\" id=\"magic-url\">Magic URL</a></h3>\n<p>\n    Magic URL authentication allows a user to sign in without a password. Magic URL authentication sends the user an email with a secret key for creating a new session. If the provided email does not belong to an existing user, the provided user ID is used to create a new user. If the account already exists, the provided user ID is ignored \n</p>\n\n<p>\n    Only redirect URLs to domains added as a <a href=\"/docs/getting-started-for-web#addPlatform\">platform</a> on your Appwrite console will be accepted. URLs not added as a platform are rejected to protect against <a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md\" target=\"_blank\" rel=\"noopener\">redirect attacks</a>.\n</p>\n\n\n<p>\n    Magic URL authentication can be initiated like this: \n</p>\n\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Account, ID } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nconst account = new Account(client);\n\nconst promise = account.createMagicURLSession(ID.unique(), 'email@example.com');\n\npromise.then(function (response) {\n    console.log(response);\n}, function (error) {\n    console.log(error);\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nfinal account = Account(client);\n\nfinal user = await account.createMagicURLSession(\n    userId: ID.unique(),\n    email: 'email@example.com',\n);</code></pre>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nval account = Account(client)\n\nval user = account.createMagicURLSession(\n    userId = ID.unique(),\n    email = \"email@example.com\"\n)</code></pre>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nlet account = Account(client)\n\nlet user = try await account.createMagicURLSession(\n    userId: ID.unique(),\n    email: \"email@example.com\"\n)</code></pre>\n    </li>\n    <li>\n        <h3>GraphQL</h3>\n        <div class=\"ide\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n            <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>mutation {\n    accountCreateMagicURLSession(\n        userId: \"unique()\",\n        email: \"email@example.com\"\n    ) {\n        _id\n        _createdAt\n        userId\n        secret\n        expire\n    }\n}</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>\n    After receiving your secret from an email, you can create a new Magic URL session like this:\n</p>\n\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nconst account = new Account(client);\n\nconst promise = account.updateMagicURLSession('[USER_ID]', '[SECRET]');\n\npromise.then(function (response) {\n    console.log(response);\n}, function (error) {\n    console.log(error);\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nfinal account = Account(client);\n\nfinal user = await account.updateMagicURLSession(\n    userId: '[USER_ID]',\n    secret: '[SECRET]',\n);</code></pre>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nval account = Account(client)\n\nval user = account.updateMagicURLSession(\n    userId = '[USER_ID]',\n    secret = '[SECRET]'\n)</code></pre>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nlet account = Account(client)\n\nlet user = try await account.updateMagicURLSession(\n    userId: '[USER_ID]',\n    secret: \"[SECRET]\"\n)</code></pre>\n    </li>\n    <li>\n        <h3>GraphQL</h3>\n        <div class=\"ide\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n            <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>mutation {\n    accountUpdateMagicURLSession(\n        userId: \"[USER_ID]\",\n        secret: \"[SECRET]\"\n    ) {\n        _id\n        _createdAt\n        userId\n        expire\n        provider\n    }\n}</code></pre>\n        </div>\n    </li>\n</ul>\n\n<h2><a href=\"/docs/authentication#login\" id=\"login\">Login</a></h2>\n\n<p>\n    Logging in with an email and password is one of the most common ways to login into an application. \n</p>\n\n<p>\n    The example below shows you how to create a session:\n</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nconst account = new Account(client);\n\nconst promise = account.createEmailSession(\n    'team@appwrite.io',\n    'password'\n);\n\npromise.then(function (response) {\n    console.log(response);\n}, function (error) {\n    console.log(error);\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nfinal account = Account(client);\n\nfinal session = await account.createEmailSession(\n    email: 'team@appwrite.io',\n    password: 'password'\n);</code></pre>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nval account = Account(client)\n\nval session = account.createEmailSession(\n    email = \"team@appwrite.io\",\n    password = \"password\"\n)</code></pre>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nlet account = Account(client)\n\nlet session = try await account.createEmailSession(\n    email: \"team@appwrite.io\",\n    password: \"password\"\n)</code></pre>\n    </li>\n    <li>\n        <h3>GraphQL</h3>\n        <div class=\"ide\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n            <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>mutation {\n    accountCreateEmailSession(email: \"team@appwrite.io\", password: \"password\") {\n        _id\n        userId\n        provider\n        expire\n    }\n}</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>\n    When a user tries to access restricted resources, you can check if they have a valid, active session. The Account Service provides a <a href=\"/docs/client/account#accountGet\">get()</a> method that checks whether the current user session is active and returns the account information if successful.\n</p>\n\n<p>\n    The example below shows you how to check whether there is an active session:\n</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nconst account = new Account(client);\n\nconst promise = account.get();\n\npromise.then(function (response) {\n    console.log(response);\n}, function (error) {\n    console.log(error);\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nfinal account = Account(client);\n\nfinal session = await account.get();</code></pre>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nval account = Account(client)\n\nval session = account.get()</code></pre>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nlet account = Account(client)\n\nlet session = try await account.get()</code></pre>\n    </li>\n    <li>\n        <h3>GraphQL</h3>\n        <div class=\"ide\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n            <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>query {\n    accountGet {\n        _id\n        email\n        name\n        status\n    }\n}</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>\n    An authenticated session in Appwrite lasts for 1 year and is then automatically expired.\n</p>\n\n\n<h3><a href=\"/docs/authentication#recovery\" id=\"recovery\">Password Recovery</a></h3>\n<p>\n    If a user forgets their password, they can initiate a password recovery flow to recover their password. The <a href=\"/docs/client/account#accountCreateRecovery\">Create Password Recovery</a> endpoint sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link, they are redirected back to the password reset URL with the secret key and email address values attached to the URL as query strings. \n</p>\n\n<p>\n    Only redirect URLs to domains added as a <a href=\"/docs/getting-started-for-web#addPlatform\">platform</a> on your Appwrite console will be accepted. URLs not added as a platform are rejected to protect against <a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md\" target=\"_blank\" rel=\"noopener\">redirect attacks</a>.\n</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n<li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nconst account = new Account(client);\n\nconst promise = account.createPasswordRecovery('email@example.com', 'https://example.com');\n\npromise.then(function (response) {\n    console.log(response);\n}, function (error) {\n    console.log(error);\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nfinal account = Account(client);\n\nfinal user = account.createRecovery(\n    email: 'email@example.com',\n    url: 'https://example.com',\n);</code></pre>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nval account = Account(client)\n\nval response = account.createRecovery(\n    email = \"email@example.com\",\n    url = \"https://example.com\"\n)</code></pre>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nlet account = Account(client)\n\nlet token = try await account.createRecovery(\n    email: \"email@example.com\",\n    url: \"https://example.com\"\n)</code></pre>\n    </li>\n    <li>\n        <h3>GraphQL</h3>\n        <div class=\"ide\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n            <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>mutation {\n    accountCreateRecovery(\n        email: \"email@example.com\",\n        url: \"https://example.com\"\n    ) {\n        _id\n        _createdAt\n        userId\n        secret\n        expire\n    }\n}</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>\nAfter receiving a email with the secret attached to the redirect link, submit a request to the <a href=\"/docs/client/account#accountUpdateRecovery\">Create Password Recovery (confirmation)</a> endpoint to complete the recovery flow. The verification link sent to the user's email address is valid for 1 hour.\n</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n<li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nconst account = new Account(client);\n\nconst promise = account.updateRecovery('[USER_ID]', '[SECRET]', 'password', 'password');\n\npromise.then(function (response) {\n    console.log(response);\n}, function (error) {\n    console.log(error);\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nfinal account = Account(client);\n\nfinal user = await account.updateRecovery(\n    userId: '[USER_ID]',\n    secret: '[SECRET]',\n    password: 'password'\n    passwordAgain: 'password'\n);</code></pre>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nval account = Account(client)\n\nval token = account.updateRecovery(\n    userId = \"[USER_ID]\",\n    secret = \"[SECRET]\",\n    password = \"password\",\n    passwordAgain = \"password\"\n)</code></pre>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nlet account = Account(client)\n\nlet token = try await account.updateRecovery(\n    userId: \"[USER_ID]\",\n    secret: \"[SECRET]\",\n    password: \"password\",\n    passwordAgain: \"password\"\n)</code></pre>\n    </li>\n    <li>\n        <h3>GraphQL</h3>\n        <div class=\"ide\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n            <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>mutation {\n    accountUpdateRecovery(\n        userId: \"[USER_ID]\",\n        secret: \"[SECRET]\",\n        password: \"password\",\n        passwordAgain: \"password\"\n    ) {\n        _id\n        _createdAt\n        userId\n        secret\n        expire\n    }\n}</code></pre>\n        </div>\n    </li>\n</ul>\n\n\n<h2><a href=\"/docs/authentication#preferences\" id=\"preferences\">User Preferences</a></h2>\n<p>You can store user preferences on a user's account using Appwrite's <a href=\"/docs/client/account#accountUpdatePrefs\">Update Preferences</a> endpoint. You can store user preferences such as theme, notification settings, or preferred language so they can be synced across multiple devices.</p>\n<p>Preferences are stored as a key-value JSON object. The maximum allowed prefs size is 64kB and throws an error if exceeded.</p> \n<ul class=\"phases clear\" data-ui-phases>\n<li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nconst account = new Account(client);\n\nconst promise = account.updatePrefs({darkTheme: true, language: 'en'});\n\npromise.then(function (response) {\n    console.log(response);\n}, function (error) {\n    console.log(error);\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nfinal account = Account(client);\n\nfinal user = await account.updatePrefs(\n    prefs: {\n        \"darkTheme\": true,\n        \"language\": \"en\",\n    }\n);</code></pre>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Account\n\nval client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nval account = Account(client)\n\nval user = account.updatePrefs(\n    prefs = mapOf(\"darkTheme\" to true, \"language\" to \"en\")\n)</code></pre>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nlet account = Account(client)\n\nlet user = try await account.updatePrefs(\n    prefs: [\"darkTheme\": true, \"language\": \"en\"]\n)</code></pre>\n    </li>\n    <li>\n        <h3>GraphQL</h3>\n        <div class=\"ide\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n            <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>mutation {\n    accountUpdatePrefs(\n        prefs: \"{\\\"darkTheme\\\": true, \\\"language\\\": \\\"en\\\"}\"\n    ) {\n        _id\n        _createdAt\n        _updatedAt\n        name\n        registration\n        status\n        passwordUpdate\n        email\n        phone\n        emailVerification\n        phoneVerification\n        prefs {\n            data\n        }\n    }\n}</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>After a user's preferences are updated, they can be retrieved using the <a href=\"/docs/client/account#accountGetPrefs\">Get Preferences</a> endpoint.</p> \n\n<ul class=\"phases clear\" data-ui-phases>\n<li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Account } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nconst account = new Account(client);\n\nconst promise = account.getPrefs();\n\npromise.then(function (prefs) {\n    console.log(prefs);\n}, function (error) {\n    console.log(error);\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nfinal account = Account(client);\n\nfinal prefs = await account.getPrefs();</code></pre>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nval account = Account(client)\n\nval prefs = account.getPrefs()</code></pre>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nlet account = Account(client)\n\nlet prefs = try await account.getPrefs()</code></pre>\n    </li>\n    <li>\n        <h3>GraphQL</h3>\n        <div class=\"ide\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n            <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>query {\n    accountGetPrefs {\n        data\n    }\n}</code></pre>\n        </div>\n    </li>\n</ul>\n","metadata":{"source":"./appwrite-docs/authentication.phtml"}}],[{"pageContent":"<p>\nThe Apprite CLI allows you to create and deploy databases, collections, buckets, teams and functions to your Appwrite project from a configuration file. This is especially helpful if you're trying to track project setup using version control.\n</p>\n\n<h2><a href=\"/docs/command-line-deployment#initializeProject\" id=\"initializeProject\">Initializing Your Project</a></h2>\n\n<p>After you're logged in, the CLI needs to be initialized with your Appwrite project. You can initialize the CLI using:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite init project</code></pre>\n</div>\n\n<p>The following prompts will guide you through the setup process. The init command also creates an <a href=\"/docs/command-line-deployment#appwriteJSON\">appwrite.json</a> file representing your Appwrite project.\n\n<p>You can fetch all the existing databases and collections in your current project using:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite init collection</code></pre>\n</div>\n\n<p>You can fetch all the existing teams in your current project using:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite init team</code></pre>\n</div>\n\n\n<h2><a href=\"/docs/command-line-deployment#deployFunctions\" id=\"deployFunctions\">Deploying Appwrite Functions</a></h2>\n\n<p>The CLI also handles the creation and deployment of Appwrite Functions. You can initialize a new function using:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite init function\n? What would you like to name your function? My Awesome Function\n? What runtime would you like to use? Node.js (node-15.5)\n✓ Success</code></pre>\n</div>\n\n<p>This command creates a new function <b>My Awesome Function</b> in your current Appwrite project and also creates a template function for you to get started. You can now deploy this function using: </p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite deploy function\n? Which functions would you like to deploy? Awesome Function (621229798628cf5bf712)\nℹ Info Deploying function Awesome Function ( 621229798628cf5bf712 )\n✓ Success Deployed Awesome Function ( 621229798628cf5bf712 )</code></pre>\n</div>\n\n<h2><a href=\"/docs/command-line-deployment#deployCollections\" id=\"deployCollections\">Deploying Databases and Collections</a></h2>\n\n<p>The Appwrite CLI also helps you migrate your project's databases and collections from a development server to a production server. You can deploy all the databases and collections in your <a href=\"/docs/command-line-deployment#appwriteJSON\">appwrite.json</a> file using:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite deploy collection</code></pre>\n</div>\n\n<h2><a href=\"/docs/command-line-deployment#teams\" id=\"teams\">Deploying Teams</a></h2>\n\n<p>The Appwrite CLI can create teams to organize users. Teams can be used to grant access permissions to a group of users. <a href=\"/docs/permissions#permission-roles\">Learn more about permissions</a>.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite deploy team</code></pre>\n</div>\n\n\n<h2><a href=\"/docs/command-line-deployment#deployBucket\" id=\"deployBucket\">Deploying Storage Buckets</a></h2>\n\n<p>The Appwrite CLI allows you to configure and deploy buckets across projects. All the bucket's settings are available through the <a href=\"/docs/command-line-deployment#appwriteJSON\">appwrite.json</a> file.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite deploy bucket</code></pre>\n</div>\n\n<h2><a href=\"/docs/command-line-deployment#avoidingConflicts\" id=\"avoidingConflicts\">Avoiding Conflicts</a></h2>\n<p>When using <code>appwrite.json</code>, changes made in the Appwrite Console can cause conflicts with the local config. To avoid conflicts, prefer updating configuration locally and deploying instead of using the console.</p>\n\n<h2><a href=\"/docs/command-line-deployment#appwriteJSON\" id=\"appwriteJSON\">The appwrite.json File</a></h2>\n\n<p>An <code>appwrite.json</code> file is created by the CLI when you initialize your project. It stores all the configuration for the CLI to be able to interact with your Appwrite project in JSON format. When using the <code>appwrite deploy</code> command, the CLI uses information from <code>appwrite.json</code> to deploy your functions and collections.</p>\n\n<h3><a href=\"/docs/command-line-deployment#configurable-options\" id=\"configurable-options\">Configurable Options</a></h3>\n<p>Here's a complete list of all configurable options in <code>appwrite.json</code>:</p>\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large\">\n    <thead>\n        <tr>\n            <th style=\"width: 150px\">Option</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><code>projectId</code></td>\n            <td>string</td>\n            <td>ID of your Appwrite Project.</td>\n        </tr>\n        <tr>\n            <td><code>projectName</code></td>\n            <td>string</td>\n            <td>Name of your Appwrite Project.</td>\n        </tr>\n        <tr>\n            <td><code>functions</code></td>\n            <td>array of <a href=\"/docs/command-line-deployment#function-options\">functions</a></td>\n            <td>Configuration of functions in your project.</td>\n        </tr>\n        <tr>\n            <td><code>databases</code></td>\n            <td>array of <a href=\"/docs/command-line-deployment#databases-options\">databases</a></td>\n            <td>Configuration of databases in your project.</td>\n        </tr>\n        <tr>\n            <td><code>collections</code></td>\n            <td>array of <a href=\"/docs/command-line-deployment#collection-options\">collections</a></td>\n            <td>Configuration of collections in your project.</td>\n        </tr>\n        <tr>\n            <td><code>teams</code></td>\n            <td>array of <a href=\"/docs/command-line-deployment#teams-options\">teams</a></td>\n            <td>Configuration of teams in your project.</td>\n        </tr>\n        <tr>\n            <td><code>buckets</code></td>\n            <td>array of <a href=\"/docs/command-line-deployment#buckets-options\">buckets</a></td>\n            <td>Configuration of teams in your project.</td>\n        </tr>\n    </tbody>\n</table>\n\n<h3><a href=\"/docs/command-line-deployment#function-options\" id=\"function-options\">Function Options</a></h3>\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large\">\n    <thead>\n        <tr>\n            <th style=\"width: 150px\">Option</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><code>$id</td>\n            <td>string</td>\n            <td>Function ID.</td>\n        </tr>\n        <tr>\n            <td><code>name</td>\n            <td>string</td>\n            <td>Function Name.</td>\n        </tr>\n        <tr>\n            <td><code>runtime</td>\n            <td>string</td>\n            <td>Function runtime, must be enabled. <a href=\"/docs/functions#supportedRuntimes\">Learn more about runtimes</a>.</td>\n        </tr>\n        <tr>\n            <td><code>path</code></td>\n            <td>string</td>\n            <td>Path to folder containing the function's source code.</td>\n        </tr>\n        <tr>\n            <td><code>entrypoint</code></td>\n            <td>string</td>\n            <td>Entry point of the function relative to the folder specified in path.</td>\n        </tr>\n        <tr>\n            <td><code>ignore</code></td>\n            <td>array of strings</td>\n            <td>Files to ignore inside the function. <a href=\"/docs/functions#ignoreFiles\">Learn more about ignoring files</a>.</td>\n        </tr>\n        <tr>\n            <td><code>execute</code></td>\n            <td>array of strings</td>\n            <td>Grants execute permissions to users. <a href=\"/docs/rest#permissions\">Learn more about role strings</a>.</td>\n        </tr>\n        <tr>\n            <td><code>events</code></td>\n            <td>array of strings</td>\n            <td>Events that trigger the function to execute. <a href=\"/docs/events\">Learn more about events</a>.</td>\n        </tr>\n        <tr>\n            <td><code>schedule</code></td>\n            <td>string</td>\n            <td>Execute schedule for the function. <a href=\"/docs/functions#scheduled-execution\">Learn more about scheduled executions</a>.</td>\n        </tr>\n        <tr>\n            <td><code>timeout</code></td>\n            <td>int</td>\n            <td>Execution timeout of the function in seconds, with a maximum configurable limit of 900 seconds.</td>\n        </tr>\n        <tr>\n            <td><code>variables</code></td>\n            <td>JSON object</td>\n            <td>Variables provided to the function on execution stored as a key-value JSON object.</td>\n        </tr>\n    </tbody>\n</table>\n\n<h3><a href=\"/docs/command-line-deployment#databases-options\" id=\"databases-options\">Databases Options</a></h3>\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large\">\n    <thead>\n        <tr>\n            <th style=\"width: 150px\">Option</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><code>$id</code></td>\n            <td>string</td>\n            <td>Database ID.</td>\n        </tr>\n        <tr>\n            <td><code>name</code></td>\n            <td>string</td>\n            <td>Database Name.</td>\n        </tr>\n    </tbody>\n</table>\n\n<h3><a href=\"/docs/command-line-deployment#collection-options\" id=\"collection-options\">Collection Options</a></h3>\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large\">\n    <thead>\n        <tr>\n            <th style=\"width: 150px\">Option</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><code>$id</code></td>\n            <td>string</td>\n            <td>Collection ID.</td>\n        </tr>\n        <tr>\n            <td><code>name</code></td>\n            <td>string</td>\n            <td>Collection Name.</td>\n        </tr>\n        <tr>\n            <td><code>databaseId</code></td>\n            <td>string</td>\n            <td>ID of the database to which this collection belongs.</td>\n        </tr>\n        <tr>\n            <td><code>enabled</code></td>\n            <td>bool</td>\n            <td>If the collection is enabled.</td>\n        </tr>\n        <tr>\n            <td><code>documentSecurity</code></td>\n            <td>bool</td>\n            <td>If access permissions can be defined at the document level.</td>\n        </tr>\n        <tr>\n            <td><code>$permissions</code></td>\n            <td>array of strings</td>\n            <td>Grants access permissions to users at the collection level. <a href=\"/docs/rest#permissions\">Learn more about permissions</a>.</td>\n        </tr>\n        <tr>\n            <td><code>attributes</code></td>\n            <td>array of objects</td>\n            <td>Defines a list of attributes in the collection. <a href=\"/docs/models/attributeList\">Learn more about the Attributes List Object</a>.</td>\n        </tr>\n        <tr>\n            <td><code>indexes</code></td>\n            <td>array of objects</td>\n            <td>Defines a list of indexes in the collection. <a href=\"/docs/models/indexList\">Learn more about the Indexes List Object</a>.</td>\n        </tr>\n    </tbody>\n</table>\n\n<h3><a href=\"/docs/command-line-deployment#buckets-options\" id=\"buckets-options\">Buckets Options</a></h3>\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large\">\n    <thead>\n        <tr>\n            <th style=\"width: 150px\">Option</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><code>$id</code></td>\n            <td>string</td>\n            <td>Bucket ID.</td>\n        </tr>\n        <tr>\n            <td><code>name</code></td>\n            <td>string</td>\n            <td>Bucket Name.</td>\n        </tr>\n        <tr>\n            <td><code>$permissions</code></td>\n            <td>array of strings</td>\n            <td>Grants access permissions to users at the bucket level. <a href=\"/docs/rest#permissions\">Learn more about permissions</a>.</td>\n        </tr>\n        <tr>\n            <td><code>fileSecurity</code></td>\n            <td>boolean</td>\n            <td>Whether file-level security is enabled. <a href=\"/docs/rest#permissions\">Learn more about permissions</a>.</td>\n        </tr>\n        <tr>\n            <td><code>enabled</code></td>\n            <td>boolean</td>\n            <td>Whether the bucket is enabled or disabled.</td>\n        </tr>\n        <tr>\n            <td><code>maximumFileSize</code></td>\n            <td>integer</td>\n            <td>Maximum file size supported.</td>\n        </tr>\n        <tr>\n            <td><code>allowedFileExtensions</code></td>\n            <td>string[]</td>\n            <td>List of allowed file extensions.</td>\n        </tr>\n        <tr>\n            <td><code>compression</code></td>\n            <td>string</td>\n            <td>Preferred algorithm for compression. Will be one of <code>none</code>, <code>gzip</code>, or <code>zstd</code>.</td>\n        </tr>\n        <tr>\n            <td><code>encryption</code></td>\n            <td>boolean</td>\n            <td>Whether the bucket's content is encrypted.</td>\n        </tr>\n        <tr>\n            <td><code>antivirus</code></td>\n            <td>boolean</td>\n            <td>Whether virus scanning is enabled for the bucket's content.</td>\n        </tr>\n    </tbody>\n</table>\n\n<h3><a href=\"/docs/command-line-deployment#teams-options\" id=\"teams-options\">Teams Options</a></h3>\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large\">\n    <thead>\n        <tr>\n            <th style=\"width: 150px\">Option</th>\n            <th>Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><code>$id</code></td>\n            <td>string</td>\n            <td>Team ID.</td>\n        </tr>\n        <tr>\n            <td><code>name</code></td>\n            <td>string</td>\n            <td>Team Name.</td>\n        </tr>\n    </tbody>\n</table>\n","metadata":{"source":"./appwrite-docs/command-line-deployment.phtml"}}],[{"pageContent":"<p>Other than commands to create and deploy databases, collections, functions, teams, and buckets, the Appwrite CLI can be used as a Server SDK as well. The Appwrite CLI has a command for every Server API endpoint.</p>\n\n<p>Commands follows the following general syntax:</p>\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite [COMMAND] --[OPTIONS]</code></pre>\n</div>\n\n\n<h2><a href=\"/docs/command-line-commands#commands\" id=\"commands\">List of Commands</a></h2>\n\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full text-size-small\">\n    <thead>\n    <tr>\n        <th style=\"width: 200px\">Command</th>\n        <th>Description</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td><code>login</code></td>\n        <td>The login command allows you to authenticate into the CLI. This command expects the <b>console account</b> that you use to log into the Appwrite Console.</td>\n    </tr>\n    <tr>\n        <td><code>init</code></td>\n        <td>The init command helps you initialize your Appwrite project, databases, collections, functions, teams, and buckets.</td>\n    </tr>\n    <tr>\n        <td><code>deploy</code></td>\n        <td>The deploy command provides a convenient wrapper for deploying your databases, collections, functions, teams, and buckets.</td>\n    </tr>\n    <tr>\n        <td><code>logout</code></td>\n        <td>The logout command allows you to logout from the CLI.</td>\n    </tr>\n    <tr>\n        <td><code>projects</code></td>\n        <td>The projects command allows you to view, create, and manage your Appwrite projects.</td>\n    </tr>\n    <tr>\n        <td><code>storage</code></td>\n        <td>The storage command allows you to manage your project files.</td>\n    </tr>\n    <tr>\n        <td><code>teams</code></td>\n        <td>The teams command allows you to group users of your project and to enable them to share access permissions to your project's resources.</td>\n    </tr>\n    <tr>\n        <td><code>users</code></td>\n        <td>The users command allows you to manage your project users.</td>\n    </tr>\n    <tr>\n        <td><code>client</code></td>\n        <td>The client command allows you to configure your CLI.</td>\n    </tr>\n    <tr>\n        <td><code>account</code></td>\n        <td>The account command allows you to authenticate as and manage a user account.</td>\n    </tr>\n    <tr>\n        <td><code>avatars</code></td>\n        <td>The avatars command provides utilities to manage images, icons, and avatars.</td>\n    </tr>\n    <tr>\n        <td><code>functions</code></td>\n        <td>The functions command allows you view, create and manage your Appwrite Functions.</td>\n    </tr>\n    <tr>\n        <td><code>databases</code></td>\n        <td>The databases command allows you to create structured collections of documents, query and filter lists of documents.</td>\n    </tr>\n    <tr>\n        <td><code>health</code></td>\n        <td>The health command allows you to both validate and monitor your Appwrite project's health.</td>\n    </tr>\n    <tr>\n        <td><code>locale</code></td>\n        <td>The locale command allows you to customize your app based on your users' location.</td>\n    </tr>\n    </tbody>\n</table>\n\n\n<h2><a href=\"/docs/command-line-commands#examples\" id=\"examples\">Examples</a></h2>\n<p><b>Create User</b></p>\n\n<p>To create a new user in your project, you can use the <code>create</code> command.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite users create --userId \"unique()\" \\\n    --email hello@appwrite.io \\\n    --password very_strong_password</code></pre>\n</div>\n\n<p><b>List Users</b></p>\n\n<p>To get a list of all your project users, you can use the <code>list</code> command.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite users list</code></pre>\n</div>\n\n<p>In case of errors with any command, you can get more information about what went wrong using the <code>--verbose</code> flag</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite users list --verbose</code></pre>\n</div>\n\n<p><b>List Collections</b></p> \n\n<p>To get a list of all your collections, you can use the <code>listCollections</code> command.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite databases listCollections --databaseId [DATABASE_ID]</code></pre>\n</div>\n\n<p>If you wish to parse the output from the CLI, you can request the CLI output in JSON format using the <code>--json</code> flag</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite databases listCollections --databaseId [DATABASE_ID]--json</code></pre>\n</div>\n\n<p><b>Get a Collection</b></p>\n\n<p>To get more information on a particular collection, you can make use of the <code>getCollection</code> command and pass in the <code>collectionId</code>.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite databases getCollection --databaseId [DATABASE_ID] --collectionId [COLLECTION_ID]</code></pre>\n</div>\n\n<p><b>Create Document</b></p>\n\n<p>To create a new document in an existing collection, use the <code>createDocument</code> command.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n<pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite databases createDocument \\\n    --databaseId [DATABASE_ID] --collectionId [COLLECTION_ID] \\\n    --documentId 'unique()' --data '{ \"Name\": \"Iron Man\" }' \\\n    --permissions 'read(\"any\")' 'write(\"team:abc\")' </code></pre>\n</div>","metadata":{"source":"./appwrite-docs/command-line-commands.phtml"}}],[{"pageContent":"<p>The <a href=\"https://github.com/appwrite/sdk-for-cli\" target=\"_blank\" rel=\"noopener\">Appwrite CLI</a> is a command-line application that allows you to interact with the <a href=\"/docs/getting-started-for-server\">Appwrite server</a> and perform server-side tasks using your terminal. This includes creating and managing projects, managing resources (documents, files, users), creating and deploying Appwrite Functions, and other operations available through Appwrite's API.</p>\n\n<h2><a href=\"/docs/command-line#installation\" id=\"installation\">Installation</a></h2>\n\n<p>The CLI is packaged both as an <a href=\"https://www.npmjs.com/package/appwrite-cli\">npm module</a> as well as a <a href=\"https://github.com/appwrite/sdk-for-cli/releases/latest\">standalone binary</a> for your operating system, making it completely dependency free, platform independent and language agnostic.</p>\n\n<p>If you plan to use the CLI to initialize new Appwrite Functions, ensure that <a href=\"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\" target=\"_blank\" rel=\"noopener\">Git is installed</a> on your machine.</p>\n\n<h3><a href=\"/docs/command-line#installWithNpm\" id=\"installWithNpm\">Install with NPM</a></h3>\n\n<p>If you have npm set up, run the command below to install the CLI</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>npm install -g appwrite-cli</code></pre>\n</div>\n\n\n<h3><a href=\"/docs/command-line#installWithScript\" id=\"installWithScript\">Install with Script</a></h3>\n\n<p>For a completely dependency-free installation, the CLI also ships with a convenient installation script for your operating system</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h4>MacOS</h4>\n        <p>Using <a href=\"https://brew.sh\" target=\"_blank\">Homebrew</a></p>\n        <div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>brew tap appwrite/sdk-for-cli https://github.com/appwrite/sdk-for-cli\nbrew update\nbrew install --HEAD appwrite</code></pre>\n        </div>\n\n        <p>or terminal</p>\n        <div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>curl -sL <?php echo $this->getParam('home'); ?>/cli/install.sh | bash</code></pre>\n        </div>\n    </li>\n    \n    <li>\n        <h4>Windows</h4>\n        <div class=\"ide margin-bottom\" data-lang=\"powershell\" data-lang-label=\"PowerShell\">\n            <pre class=\"line-numbers\"><code class=\"prism language-powershell\" data-prism>iwr -useb <?php echo $this->getParam('home'); ?>/cli/install.ps1 | iex</code></pre>\n        </div>\n    </li>\n    \n    <li>\n        <h4>Linux</h4>\n        <div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>curl -sL <?php echo $this->getParam('home'); ?>/cli/install.sh | bash</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>After the installation is complete, verify the install using</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite -v</code></pre>\n</div>\n\n<h2><a href=\"/docs/command-line#gettingStarted\" id=\"gettingStarted\">Getting Started</a></h2>\n\n<p>Before you can use the CLI, you need to login to your Appwrite account using</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite login</code></pre>\n</div>\n\n<div class=\"notice margin-bottom\"> \n    <h3>Self-Signed Certificates</h3> \n    <p>By default, requests to domains with self-signed SSL certificates (or no certificates) are disabled. If you trust the domain, you can bypass the certificate validation using</p>\n    <div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n        <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite client --selfSigned true</code></pre>\n    </div>\n</div>\n\n<p>You can run your first CLI command after logging in. Try fetching information about your Appwrite project.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite projects get --projectId [PROJECT_ID]</code></pre>\n</div>\n\n<h2><a href=\"/docs/command-line#next-steps\" id=\"next-steps\">Next Steps</a></h2>\n<p>You can use the CLI to create and deploy functions and collections. Deploy commands allow you to configure your Appwrite project programmatically and replicate functions and collection schemas across Appwrite projects.</p>\n<p>\n<a href=\"/docs/command-line-deployment\"><i class=\"icon-angle-circled-right\"></i>Learn more about deployment</a>\n</p>\n<p>Besides utility commands, the CLI can be used to execute commands like a Server SDK.</p>\n<p>\n<a href=\"/docs/command-line-commands\"><i class=\"icon-angle-circled-right\"></i>Find a full list of commands</a>\n</p>\n<p>You can choose to use the CLI in a headless and non-interactive mode without the need for config files or sessions. This is useful for CI or scripting use cases.</p>\n<p>\n<a href=\"/docs/command-line-ci\"><i class=\"icon-angle-circled-right\"></i>Learn more about CI mode</a>\n</p>\n\n<h2><a href=\"/docs/command-line#help\" id=\"help\">Help</a></h2>\n\n<p>If you get stuck anywhere, you can always use the <code>help</code> command to get the usage examples.</p>\n\n<h2><a href=\"/docs/command-line#configuration\" id=\"configuration\">Configuration</a></h2>\n\n<p>At any point, if you would like to change your server's endpoint, project ID, or self-signed certificate acceptance, use the <code>client</code> command.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CLI\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite client --endpoint https://cloud.appwrite.io/v1\nappwrite client --key 23f24gwrhSDgefaY\nappwrite client --selfSigned true\nappwrite client --reset // Resets your CLI configuration\nappwrite client --debug // Prints your current configuration</code></pre>\n</div>\n\n<h2><a href=\"/docs/command-line#uninstall\" id=\"uninstall\">Uninstall</a></h2>\n\n<p>If you installed Appwrite CLI using NPM, you can use the following command to uninstall it.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>npm uninstall -g appwrite-cli</code></pre>\n</div>\n\n<p>If you installed the Appwrite CLI with brew or the installation script for your operating system, use the following command to uninstall it.</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h4>MacOS</h4>\n        <p>Using <a href=\"https://brew.sh\" target=\"_blank\">Homebrew</a></p>\n        <div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>brew uninstall appwrite</code></pre>\n        </div>\n\n        <p>or terminal</p>\n        <div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>rm -f /usr/local/bin/appwrite | bash</code></pre>\n        </div>\n    </li>\n    \n    <li>\n        <h4>Windows</h4>\n        <div class=\"ide margin-bottom\" data-lang=\"powershell\" data-lang-label=\"PowerShell\">\n            <pre class=\"line-numbers\"><code class=\"prism language-powershell\" data-prism>$APPWRITE_INSTALL_DIR = Join-Path -Path $env:LOCALAPPDATA -ChildPath \"Appwrite\"; Remove-Item -Force -Path $APPWRITE_INSTALL_DIR</code></pre>\n        </div>\n    </li>\n    \n    <li>\n        <h4>Linux</h4>\n        <div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>rm -f /usr/local/bin/appwrite | bash</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>You can also remove the configuration, cookies, and API Keys the Appwrite CLI stored. To remove those, run the following command.</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h4>MacOS</h4>\n        <div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>rm -rf ~/.appwrite | bash</code></pre>\n        </div>\n    </li>\n    \n    <li>\n        <h4>Windows</h4>\n        <div class=\"ide margin-bottom\" data-lang=\"powershell\" data-lang-label=\"PowerShell\">\n            <pre class=\"line-numbers\"><code class=\"prism language-powershell\" data-prism>$APPWRITE_CONFIG_DIR = Join-Path -Path $env:UserProfile -ChildPath \".appwrite\"; Remove-Item -Recurse -Force -Path $APPWRITE_CONFIG_DIR</code></pre>\n        </div>\n    </li>\n    \n    <li>\n        <h4>Linux</h4>\n        <div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>rm -rf ~/.appwrite | bash</code></pre>\n        </div>\n    </li>\n</ul>","metadata":{"source":"./appwrite-docs/command-line.phtml"}}],[{"pageContent":"<p>\n    Self-hosting allows you to customize Appwrite to meet your needs and preferences. Here's a list of things you will need to set up before developing with Appwrite. Before you start, back up your <code>.env</code> and <code>docker-compose.yml</code> files.\n</p>\n\n<h2><a href=\"#local-development\" id=\"local-development\">Local Development</a></h2>\n<p>Self-hosting Appwrite for development lets you quickly prototype on your local machine. Since localhost is only a loopback address that points back at your development machine, there are some caveats you should be aware of when working with localhost.</p>\n<p>Appwrite generates a self-signed certificate for development on localhost, as connecting to unsecured HTTP is not allowed by default. If you're developing client apps on localhost, set <code>setSelfSigned(true)</code> while initializing your Appwrite client.</p>\n<p>If you're using an Android emulator to test your Flutter or Android apps, you can access localhost of your machine using the special alias IP <code>10.0.2.2</code>.</p>\n<p>If you're testing your Flutter, Android, or iOS app on a mobile device, you will not be able to access the localhost of your PC or Mac. When testing with a physical device, you may use a service like <a href=\"https://ngrok.com/\" target=\"_blank\" rel=\"noopener\">ngrok</a> to proxy the Appwrite instance.</p>\n\n<h2><a href=\"#delivery\" id=\"delivery\">Setup Email and SMS Delivery</a></h2>\n<p>\n    Appwrite requires an SMTP service to deliver emails. Email delivery is required for features like password recovery, account verification, MagicURL authentication, and team invites. You can use a third-party SMTP service or host your own SMTP server.\n</p>\n<p><a href=\"/docs/email-delivery\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> Set up email delivery</a></p>\n\n<p>\n    Appwrite supports multiple third-party SMS delivery providers. SMS delivery is required for phone authentication.\n</p>\n<p><a href=\"/docs/sms-delivery\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> Set up SMS delivery</a></p>\n\n<h2><a href=\"#functions\" id=\"functions\">Configure Function Runtimes</a></h2>\n<p>\n    Not all function runtimes are enabled by default. Enable the runtimes that you need and disable unused runtimes to save disk space on your server.\n    To enable a runtime, add it to the <code>_APP_FUNCTIONS_RUNTIMES</code> environment variable as a comma separated list. \n</p>\n\n<p>\n    The example below would enable Dart 2.15, .NET 6.0, and Java 18 runtimes.\n</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>_APP_FUNCTIONS_RUNTIMES=dart-2.15, dotnet-6.0, java-18.0</code></pre>\n</div>\n\n<p>You can find a full list of supported runtimes on the <a href=\"/docs/environment-variables#functions\">environment variables</a> page.</p>\n\n<p>You can also configure the maximum timeout that can be set on individual Appwrite functions. The maximum configurable timeout can be increased by changing the <code>_APP_FUNCTIONS_TIMEOUT</code> environment variable. This environment variable changes the configurable maximum but does not alter existing individual configurations.</p>\n\n<h2><a href=\"#storage\" id=\"storage\">Storage Adaptors</a></h2>\n<p>Appwrite's Storage Service can be configured to store files locally, or with self-hosted and cloud storage services. By default, Appwrite's Storage Service <b>stores files on your server's local storage</b>. If you expect large volumes of data or the need to have scalable data storage, you may choose to use a separate storage service.</p>\n\n<p>Appwrite supports AWS S3, Digital Ocean Spaces, Backblaze, Akamai Object Storage, and Wasabi as storage adaptors. Some of these services can be self-hosted, just like Appwrite.</p>\n\n<p>You can select which storage adaptor to use by setting the <code>_APP_STORAGE_DEVICE</code> environment variable. Valid values are <code>local</code>, <code>s3</code>, <code>dospaces</code>, <code>backblaze</code>, <code>linode</code> and <code>wasabi</code>. Each storage adaptor requires its own set of additional environment variables to configure.</p>\n\n<p>The maximum size for individual file uploads is controlled by the <code>_APP_STORAGE_LIMIT</code> environment variable, which defaults to 30 MB. See <a href=\"/docs/environment-variables#storage\">Environment Variables</a> for more information.</p>\n\n<p><a href=\"/docs/environment-variables#storage\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> Configure storage adaptors</a></p>\n\n<h2><a href=\"#apply-changes\" id=\"apply-changes\">Applying Changes</a></h2>\n<p>After editing your <code>docker-compose.yml</code> or <code>.env</code> files, you will need to recreate your Appwrite stack by running the following compose command in your terminal.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker compose up -d</code></pre>\n</div>\n\n<p>You can verify if the changes have been successfully applied by running this command:</p>\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker compose exec appwrite vars</code></pre>\n</div>\n\n<h2><a href=\"#more-configs\" id=\"more-configs\">More Configurable Options</a></h2>\n<p>If you don't see something you'd like to configure on this page, try searching the complete list of environment variables.</p>\n<p><a href=\"/docs/environment-variables\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> Learn more about environment variables</a></p>\n","metadata":{"source":"./appwrite-docs/configuration.phtml"}}],[{"pageContent":"<?php\n\n$dns = [\n    [\n        'name' => 'IONOS',\n        'url' => 'https://www.ionos.com',\n        'docs' => [\n            'a' => null,\n            'cname' => null,\n            'settings' => 'https://www.ionos.com/help/domains/dns-settings/',\n        ]\n    ],\n    [\n        'name' => '101domain',\n        'url' => 'https://101domain.com',\n        'docs' => [\n            'a' => null,\n            'cname' => null,\n            'settings' => 'https://help.101domain.com/domain-management/name-servers-dns/modifying-name-servers-and-records/managing-name-server-records',\n        ]\n    ],\n    [\n        'name' => '123 Reg',\n        'url' => 'https://www.123-reg.co.uk',\n        'docs' => [\n            'a' => 'https://www.123-reg.co.uk/support/domains/how-do-i-point-my-domain-name-to-an-ip-address/',\n            'cname' => 'https://www.123-reg.co.uk/support/domains/how-do-i-set-up-a-cname-record-on-my-domain-name/',\n            'settings' => null,\n        ]\n    ],\n    [\n        'name' => 'AWS Route 53',\n        'url' => 'https://aws.amazon.com',\n        'docs' => [\n            'a' => null,\n            'cname' => null,\n            'settings' => 'https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-creating.html',\n        ]\n    ],\n    [\n        'name' => 'Alfahosting',\n        'url' => 'https://alfahosting.de',\n        'docs' => [\n            'a' => null,\n            'cname' => null,\n            'settings' => 'https://alfahosting.de/antworten-auf-ihre-fragen/?cid=78#faqContent',\n        ]\n    ],\n    [\n        'name' => 'Binero',\n        'url' => 'https://www.binero.se',\n        'docs' => [\n            'a' => 'https://www.binero.se/guider/guider-dom-nnamn/dns/skapa-a-record',\n            'cname' => 'https://www.binero.se/guider/guider-dom-nnamn/dns/skapa-ett-cname',\n            'settings' => 'https://www.binero.se/guider/guider-dom-nnamn/dns/ndra-eller-radera-dns-information',\n        ]\n    ],\n    [\n        'name' => 'Bluehost',\n        'url' => 'https://bluehost.com',\n        'docs' => [\n            'a' => 'https://my.bluehost.com/hosting/help/whats-an-a-record',\n            'cname' => 'https://my.bluehost.com/hosting/help/cname',\n            'settings' => 'https://my.bluehost.com/hosting/help/559',\n        ]\n    ],\n    [\n        'name' => 'ClouDNS',\n        'url' => 'https://www.cloudns.net',\n        'docs' => [\n            'a' => 'https://www.cloudns.net/wiki/article/10/',\n            'cname' => 'https://www.cloudns.net/wiki/article/13/',\n            'settings' => null,\n        ]\n    ],\n    [\n        'name' => 'Cloudflare',\n        'url' => 'https://cloudflare.com',\n        'docs' => [\n            'a' => null,\n            'cname' => null,\n            'settings' => 'https://support.cloudflare.com/hc/en-us/articles/360019093151',\n        ]\n    ],\n    [\n        'name' => 'Crazydomains',\n        'url' => 'https://www.crazydomains.com',\n        'docs' => [\n            'a' => 'https://www.crazydomains.com/help/how-do-i-create-update-an-a-record/',\n            'cname' => 'https://www.crazydomains.com/help/how-do-i-change-update-my-cname-records/',\n            'settings' => null,\n        ]\n    ],\n    [\n        'name' => 'DNS Made Easy',\n        'url' => 'http://dnsmadeeasy.com',\n        'docs' => [\n            'a' => 'http://help.dnsmadeeasy.com/managed-dns/records/record/',\n            'cname' => 'http://help.dnsmadeeasy.com/managed-dns/records/cname-record/',\n            'settings' => null,\n        ]\n    ],\n    [\n        'name' => 'DNSimple',\n        'url' => 'https://dnsimple.com',\n        'docs' => [\n            'a' => 'https://support.dnsimple.com/articles/manage-a-record/',\n            'cname' => 'https://support.dnsimple.com/articles/manage-cname-record/',\n            'settings' => null,\n        ]\n    ],\n    [\n        'name' => 'DigitalOcean',\n        'url' => 'https://www.digitalocean.com',\n        'docs' => [\n            'a' => 'https://www.digitalocean.com/community/tutorials/an-introduction-to-digitalocean-dns#a-records',\n            'cname' => 'https://www.digitalocean.com/community/tutorials/an-introduction-to-digitalocean-dns#cname-records',\n            'settings' => 'https://www.digitalocean.com/community/tutorials/an-introduction-to-digitalocean-dns',\n        ]\n    ],\n    [\n        'name' => 'DreamHost',\n        'url' => 'https://dreamhost.com',\n        'docs' => [\n            'a' => 'https://help.dreamhost.com/hc/en-us/articles/215414867-How-do-I-add-custom-DNS-records-#A_record',\n            'cname' => 'https://help.dreamhost.com/hc/en-us/articles/215414867-How-do-I-add-custom-DNS-records-#CNAME_record',\n            'settings' => null,\n        ]\n    ],\n    [\n        'name' => 'Freeparking',\n        'url' => 'https://freeparking.co.nz',\n        'docs' => [\n            'a' => null,\n            'cname' => null,\n            'settings' => 'https://helpdesk.freeparking.co.nz/index.php?/Knowledgebase/Article/View/314/0/managing-basic-dns-records',\n        ]\n    ],\n    [\n        'name' => 'Gandi',\n        'url' => 'https://gandi.net',\n        'docs' => [\n            'a' => 'https://wiki.gandi.net/en/dns/zone/a-record',\n            'cname' => 'https://wiki.gandi.net/en/dns/zone/cname-record',\n            'settings' => null,\n        ]\n    ],\n    [\n        'name' => 'Godaddy',\n        'url' => 'https://www.godaddy.com',\n        'docs' => [\n            'a' => 'https://www.godaddy.com/help/add-an-a-record-19238',\n            'cname' => 'https://www.godaddy.com/help/add-a-cname-record-19236',\n            'settings' => null,\n        ]\n    ],\n    [\n        'name' => 'Google Domains',\n        'url' => 'https://domains.google',\n        'docs' => [\n            'a' => 'https://support.google.com/a/answer/2579934?hl=en&ref_topic=2721296',\n            'cname' => 'https://support.google.com/a/answer/47283?hl=en',\n            'settings' => null,\n        ]\n    ],\n    [\n        'name' => 'Host Europe',\n        'url' => 'https://www.hosteurope.de',\n        'docs' => [\n            'a' => null,\n            'cname' => null,\n            'settings' => 'https://www.hosteurope.de/faq/domains/verwaltung/nameserver-eintraege/',\n        ]\n    ],\n    [\n        'name' => 'Hover',\n        'url' => 'https://hover.com',\n        'docs' => [\n            'a' => null,\n            'cname' => null,\n            'settings' => 'https://help.hover.com/hc/en-us/articles/217282457-How-to-Edit-DNS-records-A-AAAA-CNAME-MX-TXT-SRV-',\n        ]\n    ],\n    [\n        'name' => 'Media Temple',\n        'url' => 'https://mediatemple.net',\n        'docs' => [\n            'a' => null,\n            'cname' => null,\n            'settings' => 'https://mediatemple.net/community/products/dv/204403794/how-can-i-change-the-dns-records-for-my-domain#4',\n        ]\n    ],\n    [\n        'name' => 'NS1',\n        'url' => 'https://ns1.com',\n        'docs' => [\n            'a' => null,\n            'cname' => null,\n            'settings' => 'https://ns1.com/articles/adding-records-to-a-zone',\n        ]\n    ],\n    [\n        'name' => 'Name.com',\n        'url' => 'https://www.name.com',\n        'docs' => [\n            'a' => 'https://www.name.com/support/articles/115004893508-Adding-an-A-record',\n            'cname' => 'https://www.name.com/support/articles/115004895548-Adding-a-CNAME-Record',\n            'settings' => null,\n        ]\n    ],\n    [\n        'name' => 'NameSilo',\n        'url' => 'https://www.namesilo.com',\n        'docs' => [\n            'a' => null,\n            'cname' => null,\n            'settings' => 'https://www.namesilo.com/Support/DNS-Manager',\n        ]\n    ],\n    [\n        'name' => 'Namecheap',\n        'url' => 'https://www.namecheap.com',\n        'docs' => [\n            'a' => 'https://www.namecheap.com/support/knowledgebase/article.aspx/319/2237/how-can-i-set-up-an-a-address-record-for-my-domain',\n            'cname' => 'https://www.namecheap.com/support/knowledgebase/article.aspx/9646/2237/how-can-i-set-up-a-cname-record-for-my-domain',\n            'settings' => null,\n        ]\n    ],\n    [\n        'name' => 'Network Solutions',\n        'url' => 'http://www.networksolutions.com',\n        'docs' => [\n            'a' => 'http://www.networksolutions.com/support/a-records-ip-addresses/',\n            'cname' => 'http://www.networksolutions.com/support/cname-records-host-aliases/',\n            'settings' => null,\n        ]\n    ],\n    [\n        'name' => 'OVH',\n        'url' => 'https://ovh.com',\n        'docs' => [\n            'a' => null,\n            'cname' => null,\n            'settings' => 'https://docs.ovh.com/gb/en/domains/web_hosting_how_to_edit_my_dns_zone/#cname',\n        ]\n    ],\n    [\n        'name' => 'One.com',\n        'url' => 'https://one.com',\n        'docs' => [\n            'a' => 'https://help.one.com/hc/en-us/articles/115005595925-Manage-your-DNS-settings-#ipaddress',\n            'cname' => 'https://help.one.com/hc/en-us/articles/115005595925-Manage-your-DNS-settings-#cname',\n            'settings' => null,\n        ]\n    ],\n    [\n        'name' => 'Wix',\n        'url' => 'https://wix.com',\n        'docs' => [\n            'a' => 'https://support.wix.com/en/article/adding-or-updating-a-records-in-your-wix-account',\n            'cname' => 'https://support.wix.com/en/article/adding-or-updating-cname-records-in-your-wix-account',\n            'settings' => null,\n        ]\n    ],\n    [\n        'name' => 'Yahoo',\n        'url' => 'https://smallbusiness.yahoo.net',\n        'docs' => [\n            'a' => 'https://help.smallbusiness.yahoo.net/s/article/SLN17916',\n            'cname' => 'https://help.smallbusiness.yahoo.net/s/article/SLN17912',\n            'settings' => null,\n        ]\n    ],\n    [\n        'name' => 'enom',\n        'url' => 'https://enom.com',\n        'docs' => [\n            'a' => null,\n            'cname' => null,\n            'settings' => 'https://help.enom.com/hc/en-us/articles/115000474012-How-to-Change-DNS-Host-Records',\n        ]\n    ],\n    [\n        'name' => 'iPage',\n        'url' => 'https://www.ipage.com',\n        'docs' => [\n            'a' => 'https://www.ipage.com/help/article/dns-management-how-to-update-a-records',\n            'cname' => 'https://www.ipage.com/help/article/dns-management-how-to-update-cname-aliases',\n            'settings' => null,\n        ]\n    ],\n    [\n        'name' => 'inmotion',\n        'url' => 'https://www.inmotionhosting.com',\n        'docs' => [\n            'a' => 'https://www.inmotionhosting.com/support/domain-names/dns-nameserver-changes/a-record-change',\n            'cname' => 'https://www.inmotionhosting.com/support/domain-names/dns-nameserver-changes/create-cname-record',\n            'settings' => null,\n        ]\n    ],\n    [\n        'name' => 'iwantmyname',\n        'url' => 'https://iwantmyname.com',\n        'docs' => [\n            'a' => 'https://help.iwantmyname.com/hc/en-gb/articles/360014961697-How-do-I-add-an-A-record-',\n            'cname' => 'https://help.iwantmyname.com/hc/en-gb/articles/360014960137-How-do-I-add-a-CNAME-record-',\n            'settings' => 'https://iwantmyname.com/services/website-builder/webflow',\n        ]\n    ],\n];\n\n?>\n\n<p><b>Appwrite custom domains feature allows you to use your self-owned domain name as your Appwrite API endpoint. A recent change made in modern browsers will not allow your web app to use 3rd party cookies. This change is done to protect your users' privacy from malicious web tracking services.</b></p>\n\n<p>When accessing Appwrite from a 3rd party domain, like appwrite.io or example.com, some browsers will treat our secure cookies as 3rd party cookies and block them, as a fallback Appwrite will store your users' sessions on the browser localStorage.</p>\n\n<p>Using localStorage is very convenient to help you get started quickly with Appwrite, but it is not the best practice for your users' security. The browser localStorage can't protect your users' sessions from being hijacked by a 3rd party script or an XSS vulnerability in your web app.</p>\n\n<p>To overcome these issues and make sure your web application works securely on all browsers, Appwrite allows you to access the Appwrite API using your own private custom domain. When accessing Appwrite from the same domain as the one your app uses, Appwrite cookies will no longer be treated as 3rd party cookies by any browser and will store your users' sessions securely.</p>\n\n<p>For example, if your app runs on <span class=\"link\">my-app.com</span>, you can set the subdomain <span class=\"link\">appwrite.my-app.com</span> to access the Appwrite API. This will allow browsers to respect the Appwrite sessions cookies as they are set on the same domain as your app.</p>\n\n<h2><a href=\"/docs/custom-domains#addYourDomain\" id=\"addYourDomain\">Add Your Domain</a></h2>\n\n<p>You can set your domain name by adding it to your Appwrite project settings page under the 'Custom Domains' tab. After you added your new domain to your project settings from the dashboard, you will need to create a new CNAME DNS record at your DNS provider dashboard.</p>\n\n<h2><a href=\"/docs/custom-domains#addCNAME\" id=\"addCNAME\">Add a CNAME Record</a></h2>\n\n<p>A <a href=\"https://en.wikipedia.org/wiki/CNAME_record\" target=\"_blank\" rel=\"noopener\">CNAME record</a> (or a Canonical Name record) is a type of resource record in the Domain Name System (DNS), which maps one domain name (an alias) to another.</p>\n\n<p>Every DNS host has its own way of updating DNS settings, and, unfortunately, their dashboard interfaces usually aren't the most intuitive. We recommend that you read the help documentation of your DNS host, also do not hesitate to contact their support for help with their interface and settings.</p>\n\n<p>Below, you'll find a list of registrars and links to their DNS setting documentation. If your domain provider isn't listed above, please <a href=\"/contact\" target=\"_blank\">contact us</a>, and we'll include their settings as well.</p>\n\n<table class=\"vertical\">\n    <thead>\n        <tr>\n            <th width=\"300\">Provider</th>\n            <th>Settings</th>\n        </tr>\n    </thead>\n    <tbody>\n        <?php foreach($dns as $provider): ?>\n        <tr>\n            <td data-title=\"\"><?php echo $provider['name']; ?> &nbsp; (<a rel=\"noopener\" target=\"_blank\" href=\"<?php echo $provider['url']; ?>\"><?php echo str_replace('www.', '', parse_url($provider['url'], PHP_URL_HOST)); ?></a>)</td>\n            <td data-title=\"\">\n                <?php if(!empty($provider['docs']['a'])): ?><a rel=\"noopener\" target=\"_blank\" href=\"<?php echo $provider['docs']['a']; ?>\">A Record</a>&nbsp;&nbsp;&nbsp;&nbsp;<?php endif; ?>\n                <?php if(!empty($provider['docs']['cname'])): ?><a rel=\"noopener\" target=\"_blank\" href=\"<?php echo $provider['docs']['cname']; ?>\">CNAME Record</a>&nbsp;&nbsp;&nbsp;&nbsp;<?php endif; ?>\n                <?php if(!empty($provider['docs']['settings'])): ?><a rel=\"noopener\" target=\"_blank\" href=\"<?php echo $provider['docs']['settings']; ?>\">Settings</S></a>&nbsp;&nbsp;&nbsp;&nbsp;<?php endif; ?>\n            </td>\n        </tr>\n        <?php endforeach; ?>\n    </tbody>\n</table>\n\n<h2><a href=\"/docs/custom-domains#verifyDomain\" id=\"verifyDomain\">Confirm and Verify Your Domain</a></h2>\n\n<p>Once you added your new CNAME record to your DNS settings, you will need to verify your new domain name from your Appwrite console. Enter your custom domains tab from your project settings, click the DNS Settings link and click on the 'Confirm and Verify\" button. If everything went well, Appwrite will approve your domain and generate a new SSL certificate for it in the background.</p>\n\n<h2><a href=\"/docs/custom-domains#enjoySSLCert\" id=\"enjoySSLCert\">Enjoy your Free SSL Certificate</a></h2>\n\n<p>Appwrite uses <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">Let's Encrypt</a> service to generate free and automated SSL certificates for your custom domains. Once your domain is verified, it will take the Appwrite server a few seconds to create a new SSL certificate for it. Once done, you will see your domain TLS setting marked as 'Enabled' in your Appwrite dashboard, and you will be able to connect the Appwrite API using your new domain.</p>\n\n<h2><a href=\"/docs/custom-domains#connectCustomDomain\" id=\"connectCustomDomain\">Connect using Your Custom Domain</a></h2>\n\n<p>To connect with your Appwrite server using your new domain, you will have to use the 'setEndpoint' (or 'set_endpoint') method in your SDK of choice and pass your new domain value, for example:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"javascript\" data-lang-label=\"JavaScript\">\n    <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>// Init your Web SDK\nvar appwrite = new Appwrite();\n\nappwrite\n    .setEndpoint('https://appwrite.example.com/v1')\n    .setProject('[PROJECT_ID]')\n;\n</code></pre>\n</div>\n","metadata":{"source":"./appwrite-docs/custom-domains.phtml"}}],[{"pageContent":"<p>Relationships describe how documents in different collections are associated, so that related documents can be read, updated, or deleted together. Entities in real-life often associate with each other in an organic and logical way, like a person and their dog, an album and its songs, or friends in a social network. These types of association between entities can be modeled in Appwrite using relationships.</p>\n\n<div class=\"notice\">\n    <h2>Beta Feature</h2>\n    <p>Appwrite Relationships is a beta feature. The API and behavior are subject to change in future versions.</p>\n</div>\n\n<h2><a href=\"#when-to-use-relationships\" id=\"when-to-use-relationships\">When to Use a Relationship</a></h2>\n<p>Relationships help reduce redundant information. For example, a user can create many posts in your app. You can model this without relationships by keeping a copy of the user's information in all the documents representing posts, but this creates a lot of duplicate information in your database about the user.</p>\n\n<h3>Benefits of Relationships</h3>\n<p>Duplicated records waste storage, but more importantly, makes the database much harder to maintain. If the user changes their user name, you will have to update dozens or hundreds of records, a problem commonly known as an update anomaly in databases. You can avoid duplicate information by storing users and posts in separate collections and relating a user and their posts through a relationship.</p>\n\n<h3>Tradeoff</h3>\n<p>Consider using relationships when the same information is found in multiple places to avoid duplicates. However, relationships come with the tradeoff of slowing down queries. For applications where the best read and write performance is important, it may be acceptable to tolerate duplicate data.</p>\n\n<h2><a href=\"#configurable-options\" id=\"configurable-options\">Configurable Options</a></h2>\n\n<h3><a href=\"#directionality\" id=\"directionality\">Directionality</a></h3>\n<p>Appwrite relationships can be one-way or two-way.</p>\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large\">\n    <thead>\n        <tr>\n            <th style=\"width: 250px\">Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>One-way</td>\n            <td>The relationship is only visible to one side of the relation. This is similar to a tree data structure, where a tree has a reference to all of its leaves, but each leaf does not have a reference to its tree root.</td>\n        </tr>\n        <tr>\n            <td>Two-way</td>\n            <td>The relationship is visible to both sides of the relationship. This is similar to a graph data structure, where each node has references to all its edges, and all its edges can reference the nodes it connects.</td>\n        </tr>\n    </tbody>\n</table>\n\n<h3><a href=\"#types\" id=\"types\">Types</a></h3>\n<p>Appwrite provides four different relationship types to enforce different associative rules between documents.</p>\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large\">\n    <thead>\n        <tr>\n            <th style=\"width: 250px\">Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>One-to-one</td>\n            <td>A document can only be related to one and <b>only</b> one document. If you try to relate multiple documents in a one-to-one relationship, Appwrite throws an error. For example, <b>one</b> user has <b>one</b> profile.</td>\n        </tr>\n        <tr>\n            <td>One-to-many</td>\n            <td>A document can be related to many other documents. For example, <b>one</b> user can create <b>many</b> posts.</td>\n        </tr>\n        <tr>\n            <td>Many-to-one</td>\n            <td>Many documents can be related to a single document. For example, <b>many</b> posts can share <b>one</b> author.</td>\n        </tr>\n        <tr>\n            <td>Many-to-many</td>\n            <td>A document can be related to many other documents. For example, a user can have <b>many</b> friends, and <b>many</b> users can share the same friend.</td>\n        </tr>\n    </tbody>\n</table>\n\n<h3><a href=\"#on-delete\" id=\"on-delete\">On-Delete Behavior</a></h3>\n<p>\n    Appwrite also allows you to define the behavior of a relationship when a document is deleted.\n</p>\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large\">\n    <thead>\n        <tr>\n            <th style=\"width: 250px\">Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Restrict</td>\n            <td>If a document has at least one related document, it cannot be deleted.</td>\n        </tr>\n        <tr>\n            <td>Cascade</td>\n            <td>If a document has related documents, when it is deleted, the related documents are <b>also</b> deleted.</td>\n        </tr>\n        <tr>\n            <td>Set null</td>\n            <td>If a document has related documents, when it is deleted, the related documents are kept with their <b>relationship attribute</b> set to <b>null</b>.</td>\n        </tr>\n    </tbody>\n</table>\n\n<h2><a href=\"#relationship-attributes\" id=\"relationship-attributes\">Relationship Attributes</a></h2>\n<p>Relationships are represented in a collection using <b>relationship attributes</b>. The relationship attribute contains the ID of related documents, which it references during read, update, and delete operations. This attribute is <b>null</b> if a document has no related documents.</p>\n\n<h2><a href=\"#create-in-console\" id=\"create-in-console\">Creating Relationships in the Appwrite Console</a></h2>\n<p>You can create relationships in the Appwrite Console by adding a relationship attribute to a collection.</p>\n<ol class=\"margin-top margin-bottom-large text-size-normal\">\n    <li>In your project, navigate to <b>Databases</b> > <b>Select your database</b> > <b>Select your collection</b> > <b>Attributes</b> > <b>Create attribute</b>.</li>\n    <li>Select <b>Relationship</b> as the attribute type.</li>\n    <li>In the <b>Relationship</b> modal, select the <a href=\"#types\">relationship type</a> and pick the related collection and attributes.</li>\n    <li>Pick relationship attribute key(s) to represent the related collection. Relationship attribute keys are used to reference the related collection in queries, so pick something that's intuitive and easy to remember.</li>\n    <li>Select desired <a href=\"#on-delete\">on delete</a> behavior.</li>\n    <li>Click the <b>Create</b> button to create the relationship.</li>\n</ol>\n\n<h2><a href=\"#create-in-code\" id=\"create-in-code\">Creating Relationships Programmatically</a></h2>\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Node.js</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"nodejs\" data-lang-label=\"Node.js SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>const { Client, Databases } = require('node-appwrite');\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nconst databases = new Databases(client);\n\ndatabases.createRelationshipAttribute(\n    'marvel',     // Database ID\n    'movies',     // Collection ID\n    'reviews',    // Related collection ID\n    'oneToMany',  // Relationship type\n    true,         // Is two-way\n    'reviews',    // Attribute key \n    'movie',      // Two-way attribute key\n    'cascade'     // On delete action\n);</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>PHP</h3>\n\n        <div class=\"ide margin-top-small\" data-lang=\"php\" data-lang-label=\"PHP SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-php\" data-prism>use \\Appwrite\\Client;\nuse \\Appwrite\\Services\\Databases;\n\n$client = (new Client())\n    ->setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    ->setProject('[PROJECT_ID]');               // Your project ID\n\n$databases = new Databases($client);\n\n$databases->createRelationshipAttribute(\n    databaseId: 'marvel',           // Database ID\n    collectionId: 'movies',         // Collection ID\n    relatedCollectionId: 'reviews', // Related collection ID\n    type: 'oneToMany',              // Relationship type\n    twoWay: true,                   // Is two-way\n    key: 'reviews',                 // Attribute key \n    twoWayKey: 'movie',             // Two-way attribute key\n    onDelete: 'cascade'             // On delete action\n);</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Python</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"python\" data-lang-label=\"Python SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-python\" data-prism>from appwrite.client import Client\nfrom appwrite.services.databases import Databases\n\nclient = (Client()\n    .set_endpoint('https://cloud.appwrite.io/v1')     # Your API Endpoint\n    .set_project('[PROJECT_ID]'))                   # Your project ID\n\ndatabases = Databases(client)\n\ndatabases.create_relationship_attribute(\n    database_id='marvel',             # Database ID               \n    collection_id='movies',           # Collection ID\n    related_collection_id='reviews',  # Related collection ID            \n    type='oneToMany',                 # Relationship type\n    two_way=True,                     # Is two-way\n    key='reviews',                    # Attribute key \n    two_way_key='movie',              # Two-way attribute key\n    on_delete='cascade'               # On delete action\n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Ruby</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"ruby\" data-lang-label=\"Ruby SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-ruby\" data-prism>require 'appwrite'\n\ninclude Appwrite\n\nclient = Client.new\n    .set_endpoint('https://cloud.appwrite.io/v1')# Your API Endpoint\n    .set_project('[PROJECT_ID]')               # Your project ID\n\ndatabases = Databases.new(client)\n\ndatabases.create_relationship_attribute(\n    database_id: 'marvel',             # Database ID               \n    collection_id: 'movies',           # Collection ID    \n    related_collection_id: 'reviews',  # Related collection ID \n    type: 'oneToMany',                 # Relationship type\n    two_way: true,                     # Is two-way\n    key: 'reviews',                    # Attribute key \n    two_way_key: 'movie',              # Two-way attribute key     \n    on_delete: 'cascade'               # On delete action\n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Deno</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"typescript\" data-lang-label=\"Deno SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-typescript\" data-prism>import { Client, Databases } from \"https://deno.land/x/appwrite/mod.ts\";\n\nconst client = new Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\");               // Your project ID\n\nconst databases = new Databases(client);\n\ndatabases.createRelationshipAttribute(\n    \"marvel\",    // Database ID         \n    \"movies\",    // Collection ID           \n    \"reviews\",   // Related collection ID       \n    \"oneToMany\", // Relationship type           \n    true,        // Is two-way          \n    \"reviews\",   // Attribute key           \n    \"movie\",     // Two-way attribute key           \n    \"cascade\"    // On delete action            \n);</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Dart</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"dart\" data-lang-label=\"Dart SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nfinal databases = Databases(client);\n\nawait databases.createRelationshipAttribute(\n    databaseId: 'marvel',           // Database ID                     \n    collectionId: 'movies',         // Collection ID                        \n    relatedCollectionId: 'reviews', // Related collection ID                    \n    type: 'oneToMany',              // Relationship type            \n    twoWay: true,                   // Is two-way               \n    key: 'reviews',                 // Attribute key                    \n    twoWayKey: 'movie',             // Two-way attribute key            \n    onDelete: 'cascade',            // On delete action                 \n);</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Kotlin</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"kotlin\" data-lang-label=\"Kotlin SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Databases\n\nval client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nval databases = Databases(client)\n\ndatabases.createRelationshipAttribute(\n    databaseId = \"marvel\",           // Database ID                 \n    collectionId = \"movies\",         // Collection ID                      \n    relatedCollectionId = \"reviews\", // Related collection ID               \n    type = \"oneToMany\",              // Relationship type           \n    twoWay = true,                   // Is two-way              \n    key = \"reviews\",                 // Attribute key           \n    twoWayKey = \"movie\",             // Two-way attribute key       \n    onDelete = \"cascade\"             // On delete action        \n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Swift</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"swift\" data-lang-label=\"Swift SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nlet databases = Databases(client)\n\ndatabases.createRelationshipAttribute(\n    databaseId: \"marvel\",           // Database ID              \n    collectionId: \"movies\",         // Collection ID            \n    relatedCollectionId: \"reviews\", // Related collection ID    \n    type: \"oneToMany\",              // Relationship type        \n    twoWay: true,                   // Is two-way               \n    key: \"reviews\",                 // Attribute key            \n    twoWayKey: \"movie\",             // Two-way attribute key        \n    onDelete: \"cascade\"             // On delete action         \n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>.NET</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"csharp\" data-lang-label=\".NET SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-csharp\" data-prism>using Appwrite;\nusing Appwrite.Services;\n\nvar client = new Client()\n    .SetEndpoint(\"https://cloud.appwrite.io/v1\")\n    .SetProject(\"[PROJECT_ID]\");\n\nvar databases = new Databases(client);\n\nawait databases.CreateRelationshipAttribute(\n    databaseId: \"marvel\",\n    collectionId: \"movies\",\n    relatedCollectionId: \"reviews\",\n    type: \"oneToMany\",\n    twoWay: true,\n    key: \"reviews\",\n    twoWayKey: \"movie\",\n    onDelete: \"cascade\");</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>The above example adds a relationship between the collections <b>movies</b> and <b>reviews</b>. A relationship attribute with the key <code>reviews</code> is added to the movies collection and another relationship attribute with the key <code>movie</code> is added to the reviews collection.</p>\n\n<h2><a href=\"#create-documents\" id=\"create-documents\">Creating Documents</a></h2>\n<p>If a collection has relationship attributes, you can create documents in two ways.</p>\n\n<h3><a href=\"#create-nested\" id=\"create-nested\">Creating Child Documents</a></h3>\n<p>You can create both the <b>parent</b> and <b>child</b> at once in a relationship by nesting data.</p>\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>const { Client, Databases, ID } = require('node-appwrite');\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nconst databases = new Databases(client);\n\nawait databases.createDocument(\n    'marvel',\n    'movies',\n    ID.unique(),\n    {\n        title: 'Spiderman',\n        year: 2002,\n        reviews: [\n            { author: 'Bob', text: 'Great movie!' },\n            { author: 'Alice', text: 'Loved it!' }\n        ]\n    }\n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')  // Your API Endpoint\n    .setProject('[PROJECT_ID]');                // Your project ID\n\nfinal databases = Databases(client);\n\nawait databases.createDocument(\n  databaseId: 'marvel',\n  collectionId: 'movies',\n  documentId: ID.unique(),\n  data: {\n    'title': 'Spiderman',\n    'year': 2002,\n    'reviews': [\n      { 'author': 'Bob', 'text': 'Great movie!' },\n      { 'author': 'Alice', 'text': 'Loved it!' }\n    ]\n  },\n);</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nlet databases = Database(client: client)\n\ndatabases.createDocument(\n    databaseId: \"marvel\",\n    collectionId: \"movies\",\n    documentId: ID.unique(),\n    data: [\n        \"title\": \"Spiderman\",\n        \"year\": 2002,\n        \"reviews\": [\n            [ \"author\": \"Bob\", \"text\": \"Great movie!\" ],\n            [ \"author\": \"Alice\", \"text\": \"Loved it!\" ]\n        ]\n    ]\n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Database\nimport io.appwrite.ID\n\nval client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nval databases = Database(client)\n\ndatabases.createDocument(\n    databaseId = \"marvel\",\n    collectionId = \"movies\",\n    documentId = ID.unique(),\n    data = mapOf(\n        \"title\" to \"Spiderman\",\n        \"year\" to 2002,\n        \"reviews\" to listOf(\n            mapOf(\"author\" to \"Bob\", \"text\" to \"Great movie!\"),\n            mapOf(\"author\" to \"Alice\", \"text\" to \"Loved it!\")\n        )\n    )\n)</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>If a nested child document is included and <b>no child document ID</b> is provided, the child document will be given a unique ID.</p>\n<p>If a nested child document is included and <b>no conflicting child document ID</b> exists, the child document will be <b>created</b>.</p>\n<p>If a nested child document is included and the <b>child document ID already exists</b>, the child document will be <b>updated</b>.</p>\n\n<h3><a href=\"#create-reference\" id=\"create-reference\">Reference Child Documents</a></h3>\n\n<p>If the child documents are already present in the related collection, you can create the parent and <b>reference the child documents</b> using their IDs.</p>\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>const { Client, Databases, ID } = require('node-appwrite');\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nconst databases = new Databases(client);\n\nawait databases.createDocument(\n    'marvel',\n    'movies',\n    ID.unique(),\n    {\n        title: 'Spiderman',\n        year: 2002,\n        reviews: [\n            'review1',\n            'review2'\n        ]\n    }\n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint    \n    .setProject('[PROJECT_ID]');               // Your project ID  \n\nfinal databases = Databases(client);\n\nawait databases.createDocument(\n  databaseId: 'marvel',\n  collectionId: 'movies',\n  documentId: ID.unique(),\n  data: {\n    'title': 'Spiderman',\n    'year': 2002,\n    'reviews': [\n        'review1',\n        'review2'\n    ]\n  },\n);</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint        \n    .setProject(\"[PROJECT_ID]\")                // Your project ID      \n\nlet databases = Database(client: client)\n\ndatabases.createDocument(\n    databaseId: \"marvel\",\n    collectionId: \"movies\",\n    documentId: ID.unique(),\n    data: [\n        \"title\": \"Spiderman\",\n        \"year\": 2002,\n        \"reviews\": [\n            \"review1\",\n            \"review2\"\n        ]\n    ]\n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Database\nimport io.appwrite.ID\n\nval client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint    \n    .setProject(\"[PROJECT_ID]\")                // Your project ID  \n\nval databases = Database(client)\n\ndatabases.createDocument(\n    databaseId = \"marvel\",\n    collectionId = \"movies\",\n    documentId = ID.unique(),\n    data = mapOf(\n        \"title\" to \"Spiderman\",\n        \"year\" to 2002,\n        \"reviews\" to listOf(\n            \"review1\",\n            \"review2\"\n        )\n    )\n)</code></pre>\n        </div>\n    </li>\n</ul>\n\n<h2><a href=\"#query\" id=\"query\">Querying</a></h2>\n\n<p>Querying is currently not available in the beta version of Appwrite Relationships but will be added in a later version.</p>\n\n<h2><a href=\"#update\" id=\"update\">Updating Relationships</a></h2>\n\n<p>Relationships can be updated by updating the relationship attribute.</p>\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>const { Client, Databases } = require('node-appwrite');\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nconst databases = new Databases(client);\n\nawait databases.updateDocument(\n    'marvel',\n    'movies',\n    'spiderman',\n    {\n        title: 'Spiderman',\n        year: 2002,\n        reviews: [\n            'review4',\n            'review5'\n        ]\n    }\n);</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')\n    .setProject('[PROJECT_ID]');\n\nfinal databases = Databases(client);\n\nawait databases.updateDocument(\n  databaseId: 'marvel',\n  collectionId: 'movies',\n  documentId: 'spiderman',\n  data: {\n    'title': 'Spiderman',\n    'year': 2002,\n    'reviews': [\n        'review4',\n        'review5'\n    ]\n  },\n);</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\")\n    .setProject(\"[PROJECT_ID]\")\n\nlet databases = Database(client: client)\n\ndatabases.updateDocument(\n    databaseId: \"marvel\",\n    collectionId: \"movies\",\n    documentId: \"spiderman\",\n    data: [\n        \"title\": \"Spiderman\",\n        \"year\": 2002,\n        \"reviews\": [\n            \"review4\",\n            \"review5\"\n        ]\n    ]\n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Database\n\nval client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\")\n    .setProject(\"[PROJECT_ID]\")\n\nval databases = Database(client)\n\ndatabases.updateDocument(\n    databaseId = \"marvel\",\n    collectionId = \"movies\",\n    documentId = \"spiderman\",\n    data = mapOf(\n        \"title\" to \"Spiderman\",\n        \"year\" to 2002,\n        \"reviews\" to listOf(\n            \"review4\",\n            \"review5\"\n        )\n    )\n)</code></pre>\n        </div>\n    </li>\n</ul>\n\n<h2><a href=\"#deleting\" id=\"deleting\">Deleting Relationships</a></h2>\n<h3><a href=\"#unlink\" id=\"unlink\">Unlink Relationships, Retain Documents</a></h3>\n<p>If you need to unlink documents in a relationship but retain the documents, you can do this by <b>updating the relationship attribute</b> and removing the ID of the related document.</p>\n<p>If a document can be related to <b>only one document</b>, you can delete the relationship by setting the relationship attribute to <code>null</code>.</p>\n<p>If a document can be related to <b>more than one document</b>, you can delete the relationship by setting the relationship attribute to an empty list.</p>\n\n<h3><a href=\"#unlink\" id=\"unlink\">Deleting Relationships and Documents</a></h3>\n<p>If you need to delete the documents as well as unlink the relationship, the approach depends on the <a href=\"#on-delete\">on-delete behavior</a> of a relationship.</p>\n\n<p>If the on-delete behavior is <b>restrict</b>, the link between the documents needs to be deleted first before the documents can be deleted <b>individually</b>.</p>\n\n<p>If the on-delete behavior is <b>set null</b>, deleting a document will leave related documents in place with their relationship attribute <b> set to null</b>. If you wish to also delete related documents, they must be deleted <b>individually</b>.</p>\n\n<p>If the on-delete behavior is <b>cascade</b>, deleting the parent documents also deletes <b>related child documents</b>, except for many-to-one relationships. In many-to-one relationships, there are multiple parent documents related to a single child document, and when the child document is deleted, the parents are deleted in cascade.</p>\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>const { Client, Databases } = require('node-appwrite');\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nconst databases = new Databases(client);\n\nawait databases.deleteDocument(\n    'marvel',\n    'movies',\n    'spiderman'\n);</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')\n    .setProject('[PROJECT_ID]');\n\nfinal databases = Databases(client);\n\nawait databases.deleteDocument(\n  databaseId: 'marvel',\n  collectionId: 'movies',\n  documentId: 'spiderman'\n);</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\")\n    .setProject(\"[PROJECT_ID]\")\n\nlet databases = Database(client: client)\n\ndatabases.deleteDocument(\n    databaseId: \"marvel\",\n    collectionId: \"movies\",\n    documentId: \"spiderman\"\n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Database\n\nval client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\")\n    .setProject(\"[PROJECT_ID]\")\n\nval databases = Database(client)\n\ndatabases.deleteDocument(\n    databaseId = \"marvel\",\n    collectionId = \"movies\",\n    documentId = \"spiderman\"\n)</code></pre>\n        </div>\n    </li>\n</ul>\n\n<h2><a href=\"#permissions\" id=\"permissions\">Permissions</a></h2>\n<p>To access documents in a relationship, you must have permission to access both the parent and child documents.</p>\n\n<p>When creating both the parent and child documents, the child document will <b>inherit permissions</b> from its parent.</p>\n\n<p>You can also provide explicit permissions to the child document if they should be <b>different from their parent</b>.</p>\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>const { Client, Databases, ID } = require('node-appwrite');\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nconst databases = new Databases(client);\n\nawait databases.createDocument(\n    'marvel',\n    'movies',\n    ID.unique(),\n    {\n        title: 'Spiderman',\n        year: 2002,\n        reviews: [\n            { \n                author: 'Bob', \n                text: 'Great movie!',\n                $permissions: [\n                    Permission.read(Role.any())\n                ]\n            },\n        ]\n    }\n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')\n    .setProject('[PROJECT_ID]');\n\nfinal databases = Databases(client);\n\nawait databases.createDocument(\n  databaseId: 'marvel',\n  collectionId: 'movies',\n  documentId: ID.unique(),\n  data: {\n    'title': 'Spiderman',\n    'year': 2002,\n    'reviews': [\n      { \n         'author': 'Bob', \n         'text:' 'Great movie!',\n         '\\$permissions': [\n           Permission.read(Role.any())\n         ]\n       },\n    ]\n  },\n);</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\")\n    .setProject(\"[PROJECT_ID]\")\n\nlet databases = Database(client: client)\n\ndatabases.createDocument(\n    databaseId: \"marvel\",\n    collectionId: \"movies\",\n    documentId: ID.unique(),\n    data: [\n        \"title\": \"Spiderman\",\n        \"year\": 2002,\n        \"reviews\": [\n            [ \n                \"author\": \"Bob\",\n                \"text\": \"Great movie!\",\n                \"$permissions\": [\n                    Permission.read(Role.any())\n                ]\n            ],\n        ]\n    ]\n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\")\n    .setProject(\"[PROJECT_ID]\")\n\nlet databases = Database(client: client)\n\ndatabases.createDocument(\n    databaseId: \"marvel\",\n    collectionId: \"movies\",\n    documentId: ID.unique(),\n    data: [\n        \"title\": \"Spiderman\",\n        \"year\": 2002,\n        \"reviews\": [\n            [ \n                \"author\": \"Bob\",\n                \"text\": \"Great movie!\",\n                \"$permissions\": [\n                    Permission.read(Role.any())\n                ]\n            ],\n        ]\n    ]\n)</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>When creating, updating, or deleting in a relationship, you must have permission to access all documents referenced. If the user does not have read permission to any document, an exception will be thrown.</p>\n\n<h2><a href=\"#limitations\" id=\"limitations\">Limitations</a></h2>\n<p>Relationships can be nested between collections, but are restricted to a <b>max depth of three levels</b>. Relationship attribute key, type, and directionality can't be updated. On-delete behavior is the only option that can be updated for relationship attributes.</p>\n ","metadata":{"source":"./appwrite-docs/databases-relationships.phtml"}}],[{"pageContent":"<p>\n    The Databases Service allows you to store your application and users' data and fetch it using different supported queries.\n    You can organize your data into a three-level hierarchy, which are databases, collections, and documents. \n    Each database is a group of collections, each collection is a group of documents that share the same schema, and each document contains a set of data.\n</p>\n\n<p>    \n    In addition, the Databases Service provides built-in validation to check the integrity of your incoming data, custom indexing for query performance, relationships to link data, and a flexible permissions mechanism to easily segment data between different users, teams, and roles.\n    You can also use the Appwrite <a href=\"/docs/realtime\">Realtime API</a> to subscribe to live changes in your database.\n</p>\n\n<h2><a href=\"/docs/databases#databases\" id=\"databases\">Create Your Databases</a></h2>\n<p>\n    Appwrite's Databases Service allows you to create multiple databases. Each database can contain many collections and can be backed by a different database adaptor in future versions.\n</p>\n\n<p>\n    You can create your database by adding it to your Appwrite project's dashboard. Access the Databases Service settings from your project's left-hand navigation panel.\n    To create a new database, click the <b>Create Database</b> button. Name your new database, and optionally provide a custom database ID.\n</p>\n\n<p>\n    You can also create databases with the <a href=\"/docs/command-line\">Appwrite CLI</a> or the <a href=\"/docs/getting-started-for-server\">Appwrite Server SDKs</a>.\n</p>\n\n<h2><a href=\"/docs/databases#collection\" id=\"collection\">Create Your Collections</a></h2>\n<p>\n    Appwrite uses collections as containers of documents. The terms collections and documents are used because the Appwrite JSON REST API resembles the API of a traditional NoSQL database. That said, internally, Appwrite will support both SQL and NoSQL database adapters like MariaDB, MySQL, or MongoDB. When working with an SQL adapter, Appwrite will treat your collections as tables and documents as rows on native SQL tables.\n</p>\n\n<p>\n    To add a collection to a database, first navigate to the desired database's dashboard. In the database's dashboard, click the <b>Add Collection</b> button and choose your collection's name. For convenience, you can also set a custom ID for your collection instead of an auto-generated ID.\n</p>\n\n<p>You can manage your collections programmatically using the <a href=\"/docs/command-line\">Appwrite CLI</a> or one of <a href=\"/docs/getting-started-for-server\">Appwrite Server SDKs</a>. You can manage documents with both the Server and Client SDKs.</p>\n\n<h3><a href=\"/docs/databases#permissions\" id=\"permissions\">Permissions</a></h3>\n<p>\n    Appwrite provides permissions to restrict access to documents at two levels, document and collection level. When a user has the appropriate type of <a href=\"/docs/permissions\">access permissions</a> granted at <b>either</b> the document or the collection level, they will be able to access or change the document. If the permission field is left empty, Client SDKs cannot access the document.\n</p>\n\n<h4>Document Level Permissions</h4>\n<p>Document level permissions grant access to individual documents. Document level permissions are only applied if Document Security is enabled in the settings of your collection.</p>\n\n<h4>Collection Level Permissions</h4>\n<p>Collection level permissions apply to every document in the collection.</p>\n\n<h2><a href=\"/docs/databases#attributes\" id=\"attributes\">Create Attributes</a></h2>\n<p>\n    Once you choose your permission model, navigate to your collection's <b>Attributes</b> tab. Attributes are used to define the structure of your documents and help the Appwrite API validate your users' input. Add your first attribute by clicking the <b>Add Attribute</b> button. You can choose between the following types:\n</p>\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large\">\n    <thead>\n        <tr>\n            <th style=\"width: 250px\">Attribute</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><code>string</code></td>\n            <td>String attribute.</td>\n        </tr>\n        <tr>\n            <td><code>integer</code></td>\n            <td>Integer attribute.</td>\n        </tr>\n        <tr>\n            <td><code>float</code></td>\n            <td>Float attribute.</td>\n        </tr>\n        <tr>\n            <td><code>boolean</code></td>\n            <td>Boolean attribute.</td>\n        </tr>\n        <tr>\n            <td><code>enum</code></td>\n            <td>Enum attribute.</td>\n        </tr>\n        <tr>\n            <td><code>ip</code></td>\n            <td>IP address attribute for IPv4 and IPv6.</td>\n        </tr>\n        <tr>\n            <td><code>email</code></td>\n            <td>Email address attribute.</td>\n        </tr>\n        <tr>\n            <td><code>url</code></td>\n            <td>URL attribute.</td>\n        </tr>\n        <tr>\n            <td><code>relationship</code></td>\n            <td>Relationship attribute relates one collection to another. <a href=\"/docs/databases-relationships\">Learn more about relationships.</a></td>\n        </tr>\n    </tbody>\n</table>\n\n<p>\n    If an attribute must be populated in all documents, set it as <code>required</code>. If not, you may optionally set a default value. Additionally, decide if the attribute should be a single value or an array of values.\n</p>\n<p>\n    When adding or removing attributes, your requests are processed in the background, indicated by the attribute's <span class=\"tag\">status</span>.\n    Depending on your collection's size and other factors, this could take anywhere from a few seconds to a few minutes to complete. You are able to create a document while your attributes are still being processed, however you are not able to use the attributes on the documents until they are <span class=\"tag\">available</span>.\n</p>\n\n<h3><a href=\"/docs/databases#create-documents\" id=\"create-documents\">Create Documents</a></h3>\n<p>\n    Navigate to the <b>Documents</b> tab of your collection and click the <b>Add Document</b> button, or add a document programmatically:\n</p>\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Databases, ID } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')\n    .setProject('[PROJECT_ID]');\n\nconst databases = new Databases(client);\n\nconst promise = databases.createDocument(\n    '[DATABASE_ID]',\n    '[COLLECTION_ID]',\n    ID.unique(),\n    {}\n);\n\npromise.then(function (response) {\n    console.log(response);\n}, function (error) {\n    console.log(error);\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nvoid main() async {\n    final client = Client()\n        .setEndpoint('https://cloud.appwrite.io/v1')\n        .setProject('[PROJECT_ID]');\n\n    final databases = Databases(client);\n\n    try {\n        final document = databases.createDocument(\n            databaseId: '[DATABASE_ID]',\n            collectionId: '[COLLECTION_ID]',\n            documentId: ID.unique(),\n            data: {}\n        );\n    } on AppwriteException catch(e) {\n        print(e);\n    }\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Databases\n\nsuspend fun main() {\n    val client = Client(applicationContext)\n        .setEndpoint(\"https://cloud.appwrite.io/v1\")\n        .setProject(\"[PROJECT_ID]\")\n\n    val databases = Databases(client)\n\n    try {\n        val document = databases.createDocument(\n            databaseId = \"[DATABASE_ID]\",\n            collectionId = \"[COLLECTION_ID]\",\n            documentId = ID.unique(),\n            data = mapOf(\"a\" to \"b\"),\n        )\n    } catch (e: Exception) {\n        Log.e(\"Appwrite\", \"Error: \" + e.message)\n    }\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\nimport AppwriteModels\n\nfunc main() async throws {\n    let client = Client()\n        .setEndpoint(\"https://cloud.appwrite.io/v1\")\n        .setProject(\"[PROJECT_ID]\")\n\n    let databases = Databases(client)\n\n    do {\n        let document = try await databases.createDocument(\n            databaseId: \"[DATABASE_ID]\",\n            collectionId: \"[COLLECTION_ID]\",\n            documentId: ID.unique(),\n            data: [:]\n        )\n    } catch {\n        print(error.localizedDescription)\n    }\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>GraphQL</h3>\n        <div class=\"ide\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n            <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>mutation {\n    databasesCreateDocument(\n        databaseId: \"[DATABASE_ID]\",\n        collectionId: \"[COLLECTION_ID]\",\n        documentId: \"[DOCUMENT_ID]\",\n        data: \"{}\"\n    ) {\n        _id\n        _collectionId\n        _databaseId\n        _createdAt\n        _updatedAt\n        _permissions\n        data\n    }\n}</code></pre>\n        </div>\n    </li>\n</ul>\n\n<h2><a href=\"/docs/databases#indexes\" id=\"indexes\">Indexes</a></h2>\n<p>\n    Databases use indexes to quickly locate data without having to search through every document for matches.\n    To ensure the best performance, Appwrite recommends an index for every attribute queried.\n    You can create an index by navigating to your collection's <b>Indexes</b> tab or by using your favorite Server SDK. If you plan to query multiple attributes in a single query, creating an index with <b>all</b> queried attributes will yield optimal performance.\n</p>\n\n<p>\n    The following indexes are currently supported:\n</p>\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large\">\n    <thead>\n        <tr>\n            <th style=\"width: 250px\">Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><code>key</code></td>\n            <td>Plain Index to allow queries.</td>\n        </tr>\n        <tr>\n            <td><code>unique</code></td>\n            <td>Unique Index to disallow duplicates.</td>\n        </tr>\n        <tr>\n            <td><code>fulltext</code></td>\n            <td>For searching within string attributes. Required for the <a href=\"/docs/queries#query-class\">search</a> query method.</td>\n        </tr>\n    </tbody>\n</table>\n\n<h2><a href=\"/docs/databases#retrieve\" id=\"retrieve\">Retrieving Documents</a></h2>\n<p>Documents can be retrieved using the <a href=\"/docs/client/databases#databasesListDocument\">List Document</a> endpoint. Results can be filtered, sorted, and paginated using Appwrite's shared set of query methods. You can find a full guide on querying in the <a href=\"/docs/queries\">Queries Guide</a>.</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Databases, Query } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\")\n    .setProject(\"[PROJECT_ID]\")\n\nconst databases = new Databases(client);\n\nlet promise = databases.listDocuments(\n    \"[DATABASE_ID]\"\n    \"[COLLECTION_ID]\",\n    [\n        Query.equal('title', 'Avatar')\n    ]\n);\n\npromise.then(function (response) {\n    console.log(response);\n}, function (error) {\n    console.log(error);\n});\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nvoid main() async {\n    final client = Client()\n        .setEndpoint(\"https://cloud.appwrite.io/v1\")\n        .setProject(\"[PROJECT_ID]\")\n\n    final databases = Databases(client);\n\n    try {\n        final documents = await databases.listDocuments(\n            databaseId: '[DATABASE_ID]',\n            collectionId: '[COLLECTION_ID]',\n            queries: [\n                Query.equal('title', 'Avatar')\n            ]\n        );\n    } on AppwriteException catch(e) {\n        print(e);\n    }\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>\nimport io.appwrite.Client\nimport io.appwrite.Query\nimport io.appwrite.services.Databases\n\nsuspend fun main() {\n    val client = Client(applicationContext)\n        .setEndpoint(\"https://cloud.appwrite.io/v1\")\n        .setProject(\"[PROJECT_ID]\")\n\n    val databases = Databases(client)\n\n    try {\n        val documents = databases.listDocuments(\n            databaseId = \"[DATABASE_ID]\",\n            collectionId = \"[COLLECTION_ID]\",\n            queries = listOf(\n                Query.equal(\"title\", \"Avatar\")\n            )\n        )\n    } catch (e: AppwriteException) {\n        Log.e(\"Appwrite\", \"Error: \" + e.message)\n    }\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\nimport AppwriteModels\n\nfunc main() async throws{\n    let client = Client()\n        .setEndpoint(\"https://cloud.appwrite.io/v1\")\n        .setProject(\"[PROJECT_ID]\")\n\n    let databases = Databases(client)\n\n    do {\n        let documents = try await databases.listDocuments(\n            databaseId: \"[DATABASE_ID]\",\n            collectionId: \"[COLLECTION_ID]\",\n            queries: [\n                Query.equal(\"title\", \"Avatar\")\n            ]\n        )\n    } catch {\n        print(error.localizedDescription)\n    }\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>GraphQL</h3>\n        <div class=\"ide\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n            <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>query {\n    databasesListDocuments(\n        databaseId: \"[DATABASE_ID]\",\n        collectionId: \"[COLLECTION_ID]\"\n        queries: [\"equal(\\\"title\\\", [\\\"Avatar\\\"])\"]\n    ) {\n        total\n        documents {\n            _id\n            data\n        }\n    }\n}</code></pre>\n        </div>\n    </li>\n</ul>","metadata":{"source":"./appwrite-docs/databases.phtml"}}],[{"pageContent":"<p>Appwrite v0.7 and above come with support for easy integrations with 3rd party SMTP providers. In order for emails to work, you will need to setup proper SMTP configuration as described below.</p>\n\n<p>Because email deliverability can be both tricky and hard, it is often easier to delegate this responsibility to a 3rd-party SMTP provider. These providers help you abstract the complexity of passing SPAM filters by doing a lot of the advanced configuration and validation for you.</p>\n\n<p>In this document, you will learn how to connect a 3rd party SMTP provider like MailGun or SendGrid with Appwrite to help you get better email deliverability.</p>\n\n<h2><a href=\"/docs/email-delivery#updateEnvFile\" id=\"updateEnvFile\">Update Your .env File</a></h2>\n\n<p>At this stage, we assume that you have already installed Appwrite. Else, you can follow our <a href=\"/docs/self-hosting\">Self Hosting Guide</a> for the installation. Appwrite offers multiple environment variables to customize your server setup to your needs. To configure Appwrite to use your own SMTP server, you need to set the following environment variables in the hidden .env file that comes with your Appwrite installation.</p>\n\n<p><b>_APP_SMTP_HOST</b> - SMTP server host name address. Use an empty string to disable all mail sending from the server. The default value for this variable is an empty string</p>\n\n<p><b>_APP_SMTP_PORT</b> - SMTP server TCP port. Empty by default.</p>\n\n<p><b>_APP_SMTP_SECURE</b> - SMTP secure connection protocol. Empty by default, change to 'tls' if running on a secure connection. Valid values are empty, 'tls', and 'ssl'.</p>\n\n<p><b>_APP_SMTP_USERNAME</b> - SMTP server user name. Empty by default.</p>\n\n<p><b>_APP_SMTP_PASSWORD</b> - SMTP server user password. Empty by default.</p>\n\n<p><b>_APP_SYSTEM_EMAIL_ADDRESS</b> - Configured sender email address, \"team@appwrite.io\" by default. This is the email address seen by recipients.</p>\n\n<p>Here's a sample configuration if you're using SendGrid as your SMTP provider. </p> \n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>_APP_SMTP_HOST=smtp.sendgrid.net\n_APP_SMTP_PORT=587\n_APP_SMTP_SECURE=tls\n_APP_SMTP_USERNAME=YOUR-SMTP-USERNAME\n_APP_SMTP_PASSWORD=YOUR-SMTP-PASSWORD\n_APP_SYSTEM_EMAIL_ADDRESS=YOUR-SENDER-EMAIL</code></pre>\n</div>\n\n<h2><a href=\"/docs/email-delivery#restartServer\" id=\"restartServer\">Restart Your Appwrite Server</a></h2>\n\n<p>Once you've updated your .env file, you need to restart your Appwrite instance. Navigate to the directory containing the <code>docker-compose.yml</code> file of your Appwrite instance and run the following command from your terminal:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker compose up -d</code></pre>\n</div>\n\n<h2><a href=\"/docs/email-delivery#debugging\" id=\"debugging\">Debugging</a></h2>\n\n<p>If you are unable to send emails, there is most likely an issue with your integration. The first place to look for possible errors is the <b>Appwrite Emails Worker</b>. You can access the logs of this container using: \n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker compose logs -f appwrite-worker-mails</code></pre>\n</div>\n</p>\n\n<p>\nThe next possible source of error is the configuration in your .env file. Make sure that the keys and values are correct and test the credentials by sending a test email using your SMTP providers' SDK or cURL requests.\n</p>\n\n<p> Moving on to the next source of error. Some SMTP providers have a concept of <a href=\"https://help.mailgun.com/hc/en-us/articles/217531258-Authorized-Recipients\">authorized recipients</a> in their sandbox (or dev) environments and you can only send emails to recipients in this list. Make sure that the recipient of the email that you're trying to send is a part of this list.</p>\n\n<p>Another source of error could be that the environment variables have not been set in the appwrite container. You can check this using </p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker compose exec appwrite-worker-mails vars</code></pre>\n</div>\n\n<p>If this is the case, you can try rebuilding your appwrite stack using:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker compose up -d --build --force-recreate</code></pre>\n</div>\n\n<p>Now you can head over to your Appwrite console, logout from your account and try to recover your password or send invites to other team members from your Appwrite console using your newly configured SMTP provider.</p>\n","metadata":{"source":"./appwrite-docs/email-delivery.phtml"}}],[{"pageContent":"\n<p>Appwrite comes with a few built-in tools and methods that easily debug and investigate issues on your Appwrite stack environment.</p>\n\n<h2><a href=\"/docs/debugging#doctorCLI\" id=\"doctorCLI\">Doctor CLI &nbsp;<span class=\"text-fade text-size-small\">available from >= v0.7</span></a></h2>\n\n<p>The doctor CLI helps you validate your server health and best practices. Using the Doctor CLI, you can verify your server configuration for best practices, validate your Appwrite stack connectivity and storage read and write access, and available storage space.</p>\n\n<p>To run the Doctor check, simply run the following command from your terminal. You might need to replace 'appwrite' with your  Appwrite Docker container ID. To find out what's your container ID, you can run `docker ps` command (more on that, in the next section).</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker exec appwrite doctor</code></pre>\n</div>\n\n<h2><a href=\"/docs/debugging#logs\" id=\"logs\">Logs</a></h2>\n\n<p>Checking your Appwrite containers can be a great way to pinpoint where and what exactly happens inside your Appwrite services. You can list your Appwrite containers using the following command in your terminal:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker ps</code></pre>\n</div>\n\n<p>The output of this command will show you a list of all your running Docker containers, their ID's, uptime, and open ports. You can use each container ID to get a list of all the container `stdout` and `stderr` logs by using the following command:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker logs [CONTAINER-ID]</code></pre>\n</div>\n\n<h2><a href=\"/docs/debugging#statusCodes\" id=\"statusCodes\">Status Codes</a></h2>\n\n<p>Appwrite uses conventional HTTP response codes to indicate the success or failure of an API request. In general: Codes in the 2xx range indicate success. Codes in the 4xx range indicate an error that failed given the information provided (e.g., a required parameter was omitted, invalid input, etc.). Codes in the 5xx range indicate an error with the Appwrite server, but these are rare.</p>\n\n<p><a href=\"/docs/response-codes\">Learn more about Appwrite status codes</a></p>\n\n\n<h2><a href=\"/docs/debugging#devMode\" id=\"devMode\">Dev Mode</a></h2>\n\n<p>When moving to dev mode, your server will produce much more verbose error messages. Instead of getting a general 500 error, you'll be able to view the exact error that happened on the server, debug the issue further or <a href=\"https://github.com/appwrite/appwrite/issues/new?body=500%20Error\" target=\"_blank\" rel=\"noopener\">report it to the Appwrite team</a>.</p>\n\n<p>To change your dev environment, edit your server _APP_ENV environment variable from 'production' to 'development' in your Appwrite docker-compose.yml file located in the `appwrite` directory in the location where you first installed Appwrite.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"yaml\" data-lang-label=\"yaml\">\n    <pre class=\"line-numbers\"><code class=\"prism language-yaml\" data-prism>...\n    - influxdb\n    - telegraf\nenvironment:\n    - _APP_ENV=development\n    - _APP_OPENSSL_KEY_V1=your-secret-key\n    - _APP_DOMAIN=localhost\n...\n</code></pre>\n</div>\n\n<p>After you completed the change in the docker-compose.yml file, save it and run the following command to restart Appwrite with your new settings:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker compose up -d</code></pre>\n</div>\n","metadata":{"source":"./appwrite-docs/debugging.phtml"}}],[{"pageContent":"<?php\n$variables = $this->getParam('variables', []);\n\n$markdown = new \\Parsedown();\n$markdown->setSafeMode(true);\n?>\n\n<p>Appwrite environment variables allow you to edit your server setup configuration and customize it. You can easily change the environment variables by changing them when running Appwrite using Docker CLI or Docker Compose.</p>\n\n<p>Updating your Appwrite environment variables requires you to edit your Appwrite <code>.env</code> file. Your Docker files should be located inside the \"appwrite\" folder at the location where you first run the Appwrite installation script. It's recommended to use the <code>.env</code> file as a central point for updating your Appwrite configuration rather than changing them directly in your <code>docker-compose.yml</code> file.</p>\n\n<p>After editing your <code>docker-compose.yml</code> or <code>.env</code> files, you will need to recreate your Appwrite stack by running the following compose command in your terminal:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker compose up -d</code></pre>\n</div>\n\n<p>You can verify if the changes have been successfully applied by running this command:</p>\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker compose exec appwrite vars</code></pre>\n</div>\n\n<p><b>All Options:</b></p>\n\n<ul>\n    <?php foreach($variables as $node):\n        $category = $node['category'] ?? '';\n        ?>\n\n        <li class=\"margin-bottom-small\"><a href=\"/docs/environment-variables#<?php echo $this->escape(strtolower(str_replace(' ', '_', $category))); ?>\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> <?php echo $this->escape($category); ?></a></li>\n    <?php endforeach; ?>\n</ul>\n\n<?php foreach($variables as $node):\n    $category = $node['category'] ?? '';\n    $description = $node['description'] ?? '';\n    ?>\n\n    <h2 id=\"<?php echo $this->escape(strtolower(str_replace(' ', '_', $category))); ?>\"><a href=\"/docs/environment-variables#<?php echo $this->escape(strtolower(str_replace(' ', '_', $category))); ?>\"><?php echo $this->escape($category); ?></a></h2>\n\n    <?php if($description): ?>\n        <p><?php echo $markdown->text($this->escape($description)); ?></p>\n    <?php endif; ?>\n\n    <table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large\">\n    <thead>\n        <tr>\n            <th style=\"width: 240px\">Name</th>\n            <th>Description</th>\n        </tr>\n        </thead>\n            <tbody>\n            <?php foreach($node['variables'] ?? [] as $var):\n                $name = $var['name'] ?? '';\n                $description = $var['description'] ?? '';\n                $introduction = $var['introduction'] ?? '';\n            ?>\n                <tr>\n                    <td>\n                        <?php echo $this->escape($name); ?>\n\n                        <?php if($introduction): ?>\n                            <p class=\"margin-top-small text-fade\">version >= <?php echo $this->escape($introduction); ?></p>\n                        <?php endif; ?>\n                    </td>\n                    <td><?php echo $markdown->text($this->escape($description)); ?></td>\n                </tr>\n            <?php endforeach; ?>\n        </tbody>\n    </table>\n<?php endforeach; ?>","metadata":{"source":"./appwrite-docs/environment-variables.phtml"}}],[{"pageContent":"<?php\n\n$events = $this->getParam('events', []);\n\n?>\n<p>Appwrite provides a variety of events that allows your application to react to changes as they happen. A event will fire when a change occurs in your Appwrite project, like when a new user registers or a new file is uploaded to Appwrite. You can subscribe to these events to with Appwrite <a href=\"/docs/functions\">Functions</a>, <a href=\"/docs/realtime\">Realtime</a>, or <a href=\"/docs/webhooks\">Webhooks</a>.</p>\n\n<p>You can subscribe to events for specific resources using their ID or subscribe to changes of all resources of the same type by using a wildcard character <code>*</code> instead of an ID. You can also filter for events of specific actions like <code>create</code>, <code>update</code>, or <code>delete</code>. You can find a list of events for Storage, Databases, Functions, and Authentication services below.</p>\n\n<h2 id=\"storage-events\"><a href=\"/docs/events#storage-events\">Storage Service</a></h2>\n\n<table class=\"full text-size-small vertical\">\n    <thead>\n    <tr>\n        <th style=\"width: 240px;\">Name</th>\n        <th style=\"width: 140px;\">Payload</th>\n        <th>Description</th>\n    </tr>\n    </thead>\n    <tbody>\n    <?php foreach($events as $event):\n        $pattern = $event['pattern'] ?? '';\n        $description = $event['description'] ?? '';\n        $model = $event['model'] ?? '';\n    ?>\n    <?php if(str_starts_with($pattern, 'bucket')): ?>\n    <tr>\n        <td>\n            <code><?php echo $this->escape($pattern); ?></code>\n        </td>\n        <td>\n        <?php if(!empty($model)): ?>\n            <a href=\"/docs/models/<?php echo $this->escape($model); ?>\"><?php echo $this->escape(ucfirst($model)); ?> Object</a>\n        <?php endif; ?>\n        </td>\n        <td><?php echo $this->escape($description); ?></td>\n    </tr>\n    <?php endif; ?>\n    <?php endforeach; ?>\n    </tbody>\n</table>\n\n<h2 id=\"databases-events\"><a href=\"/docs/events#databases-events\">Databases Service</a></h2>\n\n<table class=\"full text-size-small vertical\">\n    <thead>\n    <tr>\n        <th style=\"width: 240px;\">Name</th>\n        <th style=\"width: 140px;\">Payload</th>\n        <th>Description</th>\n    </tr>\n    </thead>\n    <tbody>\n    <?php foreach($events as $event):\n        $pattern = $event['pattern'] ?? '';\n        $description = $event['description'] ?? '';\n        $model = $event['model'] ?? '';\n    ?>\n    <?php if(str_starts_with($pattern, 'databases')): ?>\n    <tr>\n        <td>\n        <code><?php echo $this->escape($pattern); ?></code>\n        </td>\n        <td>\n        <?php if(!empty($model)): ?>\n            <a href=\"/docs/models/<?php echo $this->escape($model); ?>\"><?php echo $this->escape(ucfirst($model)); ?> Object</a>\n        <?php endif; ?>\n        </td>\n        <td><?php echo $this->escape($description); ?></td>\n    </tr>\n    <?php endif; ?>\n    <?php endforeach; ?>\n    </tbody>\n</table>\n\n<h2 id=\"functions-events\"><a href=\"/docs/events#functions-events\">Functions Service</a></h2>\n\n<table class=\"full text-size-small vertical\">\n    <thead>\n    <tr>\n        <th style=\"width: 240px;\">Name</th>\n        <th style=\"width: 140px;\">Payload</th>\n        <th>Description</th>\n    </tr>\n    </thead>\n    <tbody>\n    <?php foreach($events as $event):\n        $pattern = $event['pattern'] ?? '';\n        $description = $event['description'] ?? '';\n        $model = $event['model'] ?? '';\n    ?>\n    <?php if(str_starts_with($pattern, 'functions')): ?>\n    <tr>\n        <td>\n            <code><?php echo $this->escape($pattern); ?></code>\n        </td>\n        <td>\n        <?php if(!empty($model)): ?>\n            <a href=\"/docs/models/<?php echo $this->escape($model); ?>\"><?php echo $this->escape(ucfirst($model)); ?> Object</a>\n        <?php endif; ?>\n        </td>\n        <td><?php echo $this->escape($description); ?></td>\n    </tr>\n    <?php endif; ?>\n    <?php endforeach; ?>\n    </tbody>\n</table>\n\n\n<h2 id=\"authentication-events\"><a href=\"/docs/events#authentication-events\">Authentication Service</a></h2>\n\n<table class=\"full text-size-small vertical\">\n    <thead>\n    <tr>\n        <th style=\"width: 240px;\">Name</th>\n        <th style=\"width: 140px;\">Payload</th>\n        <th>Description</th>\n    </tr>\n    </thead>\n    <tbody>\n    <?php foreach($events as $event):\n        $pattern = $event['pattern'] ?? '';\n        $description = $event['description'] ?? '';\n        $model = $event['model'] ?? '';\n    ?>\n    <?php if(str_starts_with($pattern, 'users') || str_starts_with($pattern, 'teams')): ?>\n    <tr>\n        <td>\n            <code><?php echo $this->escape($pattern); ?></code>\n        </td>\n        <td>\n        <?php if(!empty($model)): ?>\n            <a href=\"/docs/models/<?php echo $this->escape($model); ?>\"><?php echo $this->escape(ucfirst($model)); ?> Object</a>\n        <?php endif; ?>\n        </td>\n        <td><?php echo $this->escape($description); ?></td>\n    </tr>\n    <?php endif; ?>\n    <?php endforeach; ?>\n    </tbody>\n</table>\n\n<h2 id=\"events-limitations\"><a href=\"/docs/events#events-limitations\">Known Limitations</a></h2>\n<p>When events fire, only existing subscriptions for that event will receive the update. If your client or server side integrations lose network connection temporarily, delivery of the event is not guaranteed.</p>\n<p>For self-hosted instances, when the Appwrite containers are shut down and restarted, events with pending webhooks and subscription updates will not be delivered.</p>\n<p>A change to a resource can cause multiple events to fire. For example adding a new document with ID <code>\"lion-king\"</code> to a collection with the ID <code>\"movies\"</code> will cause all of the below events to fire.</p>\n<div class=\"ide margin-top-small\" data-lang=\"json\" data-lang-label=\"JSON\">\n    <pre class=\"line-numbers\"><code class=\"prism language-json\" data-prism>{\n    \"events\": [\n        databases.default.collections.movies.documents.lion-king.create,\n        databases.*.collections.*.documents.*.create, \n        databases.default.collections.*.documents.lion-king.create, \n        databases.*.collections.*.documents.lion-king.create, \n        databases.*.collections.movies.documents.lion-king.create, \n        databases.default.collections.movies.documents.*.create, \n        databases.*.collections.movies.documents.*.create, \n        databases.default.collections.*.documents.*.create, \n        databases.default.collections.movies.documents.lion-king, \n        databases.*.collections.*.documents.*, \n        databases.default.collections.*.documents.lion-king, \n        databases.*.collections.*.documents.lion-king, \n        databases.*.collections.movies.documents.lion-king, \n        databases.default.collections.movies.documents.*, \n        databases.*.collections.movies.documents.*, \n        databases.default.collections.*.documents.*, \n        databases.default.collections.movies, \n        databases.*.collections.*, \n        databases.default.collections.*, \n        databases.*.collections.movies, \n        databases.default, \n        databases.*\n    ]\n}</code></pre>\n</div>\n<p>When designing function triggers or webhook integrations, beware of possible overlaping events. Function execution order is not dependent on type of event.</p>\n<p>Permissions apply to Appwrite events. When subscribing to event channels using Appwrite Realtime, you will only receive updates for resources to which you have read permissions.</p>","metadata":{"source":"./appwrite-docs/events.phtml"}}],[{"pageContent":"<?php\n$platforms = $this->getParam('platforms');\n$versions = [];\n\nforeach($platforms['client']['sdks'] as $lang) {\n    $key = $lang['key'] ?? '';\n    $version = $lang['version'] ?? '';\n\n    if(!empty($key)) {\n        $versions[$key] = $version;\n    }\n}\n\n$androidVersion = (isset($versions['android'])) ? $versions['android'] : '';\n?>\n<p>Appwrite is a development platform that provides a powerful API and management console to get your next project up and running quickly.</p>\n\n<p><a href=\"https://cloud.appwrite.io/\" target=\"_blank\" rel=\"noopener\">Create your first project now</a> and start building on Appwrite Cloud.</p>\n\n<h2><a href=\"/docs/getting-started-for-android#addProject\" id=\"addProject\">Add your Android Platform</a></h2>\n\n<p>To init your SDK and start interacting with Appwrite services, you need to add a new Android platform to your project. To add a new platform, go to your Appwrite console, choose the project you created in the step before, and click the 'Add Platform' button. Only API requests initiated from platforms added to your Appwrite project will be accepted. This prevents unauthorized apps from accessing your Appwrite project.</p>\n\n<p>From the options, choose to add a new <b>Android</b> platform and add add your app <u>name</u> and <u>package name</u>, your package name is generally the <b>applicationId</b> in your app-level <a href=\"https://github.com/appwrite/playground-for-android/blob/master/app/build.gradle#L12\" target=\"_blank\" rel=\"noopener\">build.gradle</a> file. By registering your new app platform, you are allowing your app to communicate with the Appwrite API.</p>\n\n<h2><a href=\"/docs/getting-started-for-android#getSDK\" id=\"getSDK\">Get Appwrite Android SDK</a></h2>\n\n<p>First, add this to your root level build.gradle file: </p>\n<div class=\"ide\" data-lang=\"groovy\" data-lang-label=\"Groovy\">\n  <pre class=\"line-numbers\"><code class=\"prism language-groovy\" data-prism><?php echo $this->escape('repositories {\n    mavenCentral()\n}');?></code></pre>\n</div>\n\n<p>Then add this to your project's build.gradle file:</p>\n\n<div class=\"ide\" data-lang=\"groovy\" data-lang-label=\"Groovy\">\n  <pre class=\"line-numbers\"><code class=\"prism language-groovy\" data-prism>implementation(\"io.appwrite:sdk-for-android:<?php echo $this->escape($androidVersion); ?>\")</code></pre>\n</div>\n\n<h3><a href=\"/docs/getting-started-for-android#OAuthCallback\" id=\"OAuthCallback\">OAuth Callback</a></h3>\n\n<p>In order to capture the Appwrite OAuth callback url, the following activity needs to be added inside the `&lt;application&gt;` tag, along side the existing `&lt;activity&gt;` tags in your <a href=\"https://github.com/appwrite/playground-for-android/blob/master/app/src/main/AndroidManifest.xml\" target=\"_blank\" rel=\"noopener\">AndroidManifest.xml</a>. Be sure to replace the <b>[PROJECT_ID]</b> string with your actual Appwrite project ID. You can find your Appwrite project ID in your project settings screen in your Appwrite console.</p>\n\n<div class=\"ide\" data-lang=\"html\" data-lang-label=\"XML\">\n    <pre class=\"line-numbers\"><code class=\"prism language-xml\" data-prism><?php echo $this->escape('<manifest ...>\n  ...\n  <application ...>\n    ...\n    <!-- Add this inside the `<application>` tag, along side the existing `<activity>` tags -->\n    <activity android:name=\"io.appwrite.views.CallbackActivity\" android:exported=\"true\">\n      <intent-filter android:label=\"android_web_auth\">\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"appwrite-callback-[PROJECT_ID]\" />\n      </intent-filter>\n    </activity>\n  </application>\n</manifest>'); ?>\n</code></pre>\n</div>\n\n<h2><a href=\"/docs/getting-started-for-android#initSDK\" id=\"initSDK\">Init your SDK</a></h2>\n\n<p>Initialize your SDK code with your project ID, which can be found in your project settings page.</p>\n\n<div class=\"ide\" data-lang=\"android\" data-lang-label=\"Android SDK\">\n    <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your Appwrite Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID</code></pre>\n</div>\n\n<p>Before sending any API calls to your new Appwrite project, make sure your Android device or emulator has network access to your Appwrite project's hostname or IP address.</p>\n\n<h2><a href=\"/docs/getting-started-for-android#makeRequest\" id=\"makeRequest\">Make Your First Request</a></h2>\n\n<p>After your SDK configuration is set, access any of the Appwrite services and choose any request to send. Full documentation for any service method you would like to use can be found in the SDK documentation or in the API References section.</p>\n\n<div class=\"ide\" data-lang=\"android\" data-lang-label=\"Android SDK\">\n                    <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>// Register User\nval account = Account(client)\n\nval user = account.create(\n    userId = ID.unique(),\n    email = \"email@example.com\",\n    password = \"password\"\n)</code></pre>\n</div>\n\n<h2><a href=\"/docs/getting-started-for-android#listenToChanges\" id=\"listenToChanges\">Listen to Changes</a></h2>\n\n<p>To listen to changes in realtime from Appwrite, subscribe to a variety of channels and receive updates within milliseconds. Full documentation for Realtime can be found <a href=\"/docs/realtime\">here</a>.</p>\n\n<div class=\"ide\" data-lang=\"android\" data-lang-label=\"Android SDK\">\n  <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>// Subscribe to files channel\nval realtime = Realtime(client)\n\nval subscription = realtime.subscribe(\"files\") {\n    if (it.events.contains(\"buckets.*.files.*.create\")) {\n        // Log when a new file is uploaded\n        print(it.payload.toString());\n    }\n})\n</code></pre>\n</div>\n\n<h2><a href=\"/docs/getting-started-for-android#fullExample\" id=\"fullExample\">Full Example</a></h2>\n<div class=\"ide\" data-lang=\"android\" data-lang-label=\"Android SDK\">\n                    <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Account\n\nval client = Client(context)\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your Appwrite Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nval account = Account(client)\n\nval user = account.create(\n    userId = ID.unique(),\n    email = \"email@example.com\",\n    password = \"password\"\n)\n\n// Subscribe to files channel\nval realtime = Realtime(client)\n\nval subscription = realtime.subscribe(\"files\") {\n    if (it.events.contains(\"buckets.*.files.*.create\")) {\n        // Log when a new file is uploaded\n        print(it.payload.toString());\n    }\n}</code></pre>\n</div>\n\n<h2><a href=\"/docs/getting-started-for-android#nextSteps\" id=\"nextSteps\">Next Steps</a></h2>\n\n<p>Appwrite has many services and tools to help improve your app and speed up your development. The best way to learn how you can take advantage of them is to explore the different API references docs.</p>\n","metadata":{"source":"./appwrite-docs/getting-started-for-android.phtml"}}],[{"pageContent":"<?php\n\nuse Appwrite\\Utopia\\View;\n\n$events = $this->getParam('events', []);\n$runtimes = $this->getParam('runtimes', []);\n\n?>\n\n<p>Appwrite Functions allow you to extend and customize your Appwrite server functionality by executing your custom code. Appwrite can execute your custom code in response to any <a href=\"/docs/events\" target=\"_blank\">Appwrite system event</a> like account creation, user login, or document update. You can also <a href=\"/docs/functions#scheduled-execution\">schedule your functions</a> or start them manually by triggering your function from an HTTP endpoint using the Appwrite client or server APIs.</p>\n\n<p>Appwrite Functions run in a secure, isolated Docker container. By default, Appwrite supports multiple runtimes for different languages that you can use to run your code.</p>\n\n<h2><a href=\"/docs/functions#gettingStarted\" id=\"gettingStarted\">Getting Started</a></h2>\n\n<p>The quickest way to get started with Appwrite Functions is using the <a href=\"/docs/command-line\">Appwrite CLI</a>. The CLI comes with starter code and some simple commands to quickly create and deploy your functions. Once you have the CLI installed and setup with an Appwrite project, create your first function using: </p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite init function</code></pre>\n</div>\n\n<p>Give your function a name and choose your runtime. This will create a new starter function in the current directory and also add it to your <code>appwrite.json</code> file. Go ahead and deploy your function using :</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite deploy function</code></pre>\n</div>\n\n<p>You can now head over to your Appwrite Dashboard, navigate to the Function settings and execute your function. You can find the status of your execution under the <b>Logs</b> tab. </p>\n\n<p>Feel free to modify and play around with the starter code and use the <code>appwrite deploy</code> command to instantly deploy your changes to the Appwrite server. </p>\n\n<p> The following sections will dive deeper into some more terminology and advanced concepts which can be useful when writing your function from scratch.</p>\n\n<h2><a href=\"/docs/functions#writingYourOwnFunction\" id=\"writingYourOwnFunction\">Writing your own Function</a></h2>\n\n<p>When writing your own Appwrite Function, you must export the code in certain ways depending on the language. This varies between languages so refer to the examples below.</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Node.js</h3>\n        <div>\n        <div class=\"ide margin-top-small\" data-lang=\"javascript\" data-lang-label=\"JavaScript\">\n            <pre class=\"line-numbers\"><code class=\"prism language-js\" data-prism>module.exports = async (req, res) => {\n  const payload =\n    req.payload ||\n    'No payload provided. Add custom data when executing function.';\n\n  const secretKey =\n    req.variables.SECRET_KEY ||\n    'SECRET_KEY variable not found. You can set it in Function settings.';\n\n  const randomNumber = Math.random();\n\n  const trigger = req.variables.APPWRITE_FUNCTION_TRIGGER;\n\n  res.json({\n    message: 'Hello from Appwrite!',\n    payload,\n    secretKey,\n    randomNumber,\n    trigger,\n  });\n};</code></pre>\n        </div>\n        <p><b>Installing Dependencies</b></p>\n        <p>Include a <code>package.json</code> file along with your function, and Appwrite handles the rest! The best practice is to make sure that the <code>node_modules</code> folder is <b>not</b> a part of your tarball.</p>\n        </div>\n    </li>\n    <li>\n        <h3>PHP</h3>\n        <div>\n        <div class=\"ide margin-top-small\" data-lang=\"php\" data-lang-label=\"PHP\">\n            <pre class=\"line-numbers\"><code class=\"prism language-php\" data-prism>&lt;?php\n\nreturn function ($req, $res) {\n  $payload =\n    $req['payload'] ?:\n    'No payload provided. Add custom data when executing function.';\n\n  $secretKey =\n    $req['variables']['SECRET_KEY'] ?:\n    'SECRET_KEY variable not found. You can set it in Function settings.';\n\n  $randomNumber = \\mt_rand() / \\mt_getrandmax();\n\n  $trigger = $req['variables']['APPWRITE_FUNCTION_TRIGGER'];\n\n  $res->json([\n    'message' => 'Hello from Appwrite!',\n    'payload' => $payload,\n    'secretKey' => $secretKey,\n    'randomNumber' => $randomNumber,\n    'trigger' => $trigger,\n  ]);\n};</code></pre>\n        </div>\n        <p><b>Installing Dependencies</b></p>\n        <p>Include a <code>composer.json</code> file along with your function, make sure to require autoload.php from vendor folder, and Appwrite handles the rest!. The best practice is to make sure that the <code>vendor</code> directory is <b>not</b> a part of your tarball. </p>\n    </div>\n    </li>\n    <li>\n        <h3>Python</h3>\n        <div>\n        <div class=\"ide margin-top-small\" data-lang=\"python\" data-lang-label=\"Python\">\n            <pre class=\"line-numbers\"><code class=\"prism language-python\" data-prism>import random\n\ndef main(req, res):\n  payload = req.payload or 'No payload provided. Add custom data when executing function.'\n\n  secretKey = req.variables.get(\n    'SECRET_KEY',\n    'SECRET_KEY variable not found. You can set it in Function settings.'\n  )\n\n  randomNumber = random.random()\n\n  trigger = req.variables['APPWRITE_FUNCTION_TRIGGER']\n\n  return res.json({\n    'message': 'Hello from Appwrite!',\n    'payload': payload,\n    'secretKey': secretKey,\n    'randomNumber': randomNumber,\n    'trigger': trigger,\n  })</code></pre>\n        </div>\n        <p><b>Installing Dependencies</b></p>\n        <p>Include a <code>requirements.txt</code> file with your function, Appwrite handles the rest!</p>\n        </div>\n    </li>\n    <li>\n        <h3>Ruby</h3>\n        <div>\n        <div class=\"ide margin-top-small\" data-lang=\"ruby\" data-lang-label=\"Ruby\">\n            <pre class=\"line-numbers\"><code class=\"prism language-ruby\" data-prism>def main(req, res)\n  payload =\n    !req.payload.empty? ? req.payload :\n    'No payload provided. Add custom data when executing function.'\n\n  secretKey =\n    req.variables['SECRET_KEY'] ||\n    'SECRET_KEY variable not found. You can set it in Function settings.'\n\n  randomNumber = rand()\n\n  trigger = req.variables['APPWRITE_FUNCTION_TRIGGER']\n\n  return res.json({\n    :message => 'Hello from Appwrite!',\n    :payload => payload,\n    :secretKey => secretKey,\n    :randomNumber => randomNumber,\n    :trigger => trigger,\n  })\nend</code></pre>\n        </div>\n        <p><b>Installing Dependencies</b></p>\n        <p>Include a <code>Gemfile</code> with your function, Appwrite handles the rest!</p>\n        </div>\n    </li>\n    <li>\n        <h3>Deno</h3>\n        <div>\n        <div class=\"ide margin-top-small\" data-lang=\"typescript\" data-lang-label=\"Deno\">\n            <pre class=\"line-numbers\"><code class=\"prism language-typescript\" data-prism>export default async function (req: any, res: any) {\n  const payload =\n    req.payload ||\n    'No payload provided. Add custom data when executing function.';\n\n  const secretKey =\n    req.variables.SECRET_KEY ||\n    'SECRET_KEY variable not found. You can set it in Function settings.';\n\n  const randomNumber = Math.random();\n\n  const trigger = req.variables.APPWRITE_FUNCTION_TRIGGER;\n\n  res.json({\n    message: 'Hello from Appwrite!',\n    payload,\n    secretKey,\n    randomNumber,\n    trigger,\n  });\n};</code></pre>\n        </div>\n        <p><b>Installing Dependencies</b></p>\n        <p>No special steps are required for Deno, Appwrite handles everything!</p>\n        </div>\n    </li>\n    <li>\n        <h3>Dart</h3>\n        <div>\n        <div class=\"ide margin-top-small\" data-lang=\"dart\" data-lang-label=\"Dart\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'dart:math';\nimport 'dart:async';\n\nFuture &lt;void&gt; start(final req, final res) async {\n  final payload =\n    !req.payload?.isEmpty ? req.payload :\n    'No payload provided. Add custom data when executing function.';\n\n  final secretKey =\n    req.variables['SECRET_KEY'] ??\n    'SECRET_KEY variable not found. You can set it in Function settings.';\n\n  final randomNumber = new Random().nextDouble();\n\n  final trigger = req.variables['APPWRITE_FUNCTION_TRIGGER'];\n\n  res.json({\n    'message': 'Hello from Appwrite!',\n    'payload': payload,\n    'secretKey': secretKey,\n    'randomNumber': randomNumber,\n    'trigger': trigger,\n  });\n}</code></pre>\n        </div>\n        <p><b>Installing Dependencies</b></p>\n        <p>Include a <code>pubspec.yaml</code> file with your function- Appwrite handles the rest!</p>\n        </div>\n    </li>\n    <li>\n        <h3>Swift</h3>\n        <div>\n        <div class=\"ide margin-top-small\" data-lang=\"swift\" data-lang-label=\"Swift\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>func main(req: RequestValue, res: RequestResponse) throws -> RequestResponse {\n    let payload = req.payload.isEmpty \n        ? \"No payload provided. Add custom data when executing function\" \n        : req.payload\n    \n    let secretKey = req.variables[\"SECRET_KEY\"] \n        ?? \"SECRET_KEY variable not found. You can set it in Function settings.\"\n\n    let randomNumber = Double.random(in: 0...1)\n\n    let trigger = req.variables[\"APPWRITE_FUNCTION_TRIGGER\"]\n\n    return res.json(data: [\n        \"message\": \"Hello from Appwrite!\",\n        \"payload\": payload,\n        \"secretKey\": secretKey,\n        \"randomNumber\": randomNumber,\n        \"trigger\": trigger,\n    ])\n}</code></pre>\n        </div>\n        <p>With Swift, your <b>entrypoint</b> can be empty since Appwrite automatically infers it from the location of your <b>main()</b> function. Just ensure that your cloud function has a <b>single declaration of main()</b> across your source files.</p>\n        <p><b>Installing Dependencies</b></p>\n        <p>Include a <code>Package.swift</code> file with your function, Appwrite handles the rest!</p>\n        </div>\n    </li>\n    <li>\n        <h3>.NET</h3>\n        <div>\n        <div class=\"ide margin-top-small\" data-lang=\"csharp\" data-lang-label=\"C#\">\n            <pre class=\"line-numbers\"><code class=\"prism language-csharp\" data-prism>public async Task<RuntimeResponse> Main(RuntimeRequest req, RuntimeResponse res)\n{\n  var payload = (string.IsNullOrEmpty(req.Payload))\n                ? \"No payload provided. Add custom data when executing function.\"\n                : req.Payload; \n\n  var secretKey = req.Variables.ContainsKey(\"SECRET_KEY\")\n                  ? req.Variables[\"SECRET_KEY\"]\n                  : \"SECRET_KEY variable not found. You can set it in Function settings.\";\n\n  var randomNumber = new Random().NextDouble();\n\n  var trigger = req.Variables[\"APPWRITE_FUNCTION_TRIGGER\"];\n\n  return res.Json(new() \n  {\n    { \"message\", \"Hello from Appwrite!\" },\n    { \"payload\", payload },\n    { \"secretKey\", secretKey },\n    { \"randomNumber\", randomNumber },\n    { \"trigger\", trigger },\n  });\n}</code></pre>\n        </div>\n        <p><b>Installing Dependencies</b></p>\n        <p>Include a <code>Function.csproj</code> file with your function, Appwrite handles the rest!</p>\n        </div>\n    </li>\n    <li>\n        <h3>Kotlin</h3>\n        <div>\n        <div class=\"ide margin-top-small\" data-lang=\"kotlin\" data-lang-label=\"Kotlin\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import kotlin.random.Random\n\n@Throws(Exception::class)\nfun main(req: RuntimeRequest, res: RuntimeResponse): RuntimeResponse {\n\n    val payload = if (req.payload.isEmpty()) \"No payload provided. Add custom data when executing function.\" else req.payload\n\n    val secretKey = req.variables[\"SECRET_KEY\"] ?: \"SECRET_KEY variable not found. You can set it in Function settings.\"\n    \n    val randomNumber = Random.nextDouble(0.0, 1.0)\n\n    val trigger = req.variables[\"APPWRITE_FUNCTION_TRIGGER\"]    \n\n    return res.json(mapOf(\n        \"message\" to \"Hello from Appwrite!\",\n        \"payload\" to payload,\n        \"secretKey\" to secretKey,\n        \"randomNumber\" to randomNumber,\n        \"trigger\" to trigger\n    ))\n}</code></pre>\n        </div>\n        <p><b>Installing Dependencies</b></p>\n        <p>Include a <code>deps.gradle</code> file with your function, Appwrite handles the rest!</p>\n        </div>\n    </li>\n    <li>\n        <h3>Java</h3>\n        <div>\n        <div class=\"ide margin-top-small\" data-lang=\"java\" data-lang-label=\"Java\">\n            <pre class=\"line-numbers\"><code class=\"prism language-java\" data-prism>import java.util.Map;\nimport java.util.HashMap;\n\npublic RuntimeResponse main(RuntimeRequest req, RuntimeResponse res) throws Exception {\n\n    String payload = (req.getPayload().isEmpty())\n                     ? \"No payload provided. Add custom data when executing function.\"\n                     : req.getPayload();\n\n    Map<String, String> variables = req.getVariables();\n\n    String secretKey = variables.containsKey(\"SECRET_KEY\")\n                       ? variables.get(\"SECRET_KEY\")\n                       : \"SECRET_KEY variable not found. You can set it in Function settings.\";\n\n    double randomNumber = Math.random();\n\n    String trigger = variables.get(\"APPWRITE_FUNCTION_TRIGGER\");\n\n    Map<String, Object> response = new HashMap();\n        response.put(\"message\", \"Hello from Appwrite!\");\n        response.put(\"payload\", payload);\n        response.put(\"secretKey\", secretKey);\n        response.put(\"randomNumber\", randomNumber);\n        response.put(\"trigger\", trigger);\n\n    return res.json(response);\n}</code></pre>\n        </div>\n        <p><b>Installing Dependencies</b></p>\n        <p>Include a <code>deps.gradle</code> file with your function, Appwrite handles the rest!</p>\n        </div>\n    </li>\n    <li>\n        <h3>C++</h3>\n        <div>\n        <div class=\"ide margin-top-small\" data-lang=\"cpp\" data-lang-label=\"C++\">\n            <pre class=\"line-numbers\"><code class=\"prism language-csharp\" data-prism>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nstatic RuntimeResponse &main(const RuntimeRequest &req, RuntimeResponse &res) {\n\n    std::string payload = req.payload.empty() ? \n                          \"No payload provided. Add custom data when executing function.\" : \n                          req.payload;\n\n    std::string secretKey = req.variables.get(\"SECRET_KEY\", \"SECRET_KEY variable not found. You can set it in Function settings.\").asString();\n\n    double randomNumber = ((double) rand() / (RAND_MAX));\n\n    std::string trigger = req.variables[\"APPWRITE_FUNCTION_TRIGGER\"].asString();\n\n    Json::Value response;\n    response[\"message\"] = \"Hello from Appwrite!\";\n    response[\"payload\"] = payload;\n    response[\"secretKey\"] = secretKey;\n    response[\"randomNumber\"] = randomNumber;\n    response[\"trigger\"] = trigger;\n    \n    return res.json(response);\n}</code></pre>\n        </div>\n        <p><b>Installing Dependencies</b></p>\n        <p>Include a <code>CMakeLists.txt</code> file with your function, Appwrite handles the rest!</p>\n        </div>\n    </li>\n</ul>\n\n\n<p>When your function is called, you receive two parameters, a <code>request</code> and a <code>response</code> object. The request object contains all data that was sent to the function including function variables. A schema of the request object can be found below and is the same for all runtimes.</p>\n\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom text-size-small\">\n    <thead>\n    <tr>\n        <th style=\"width: 140px\">Property</th>\n        <th>Description</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>headers</td>\n        <td>An object containing all the request headers.</td>\n    </tr>\n    <tr>\n        <td>payload</td>\n        <td>A JSON string containing the data when you <a href=\"/docs/client/functions#functionsCreateExecution\">created the execution.</a></td>\n    </tr>\n    <tr>\n        <td>variables</td>\n        <td>An object containing all the function variables. This includes <a href=\"/docs/functions#functionVariables\">variables</a> automatically added by Appwrite.</td>\n    </tr>\n    </tbody>\n</table>\n\n<p>The response object has two functions, <code>send()</code> and <code>json()</code> that can be used to send data back to the client. The types and implementation of these functions vary depending on runtime due to all languages being slightly different. You can check out implementation in the specific languages to learn more about them. The schema of the response object can be found below: </p>\n\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom text-size-small\">\n    <thead>\n    <tr>\n        <th style=\"width: 140px\">Function</th>\n        <th>Description</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>send(text, status)</td>\n        <td>Function to return a text response. Status code defaults to 200</td>\n    </tr>\n    <tr>\n        <td>json(obj, status)</td>\n        <td>Function to return a JSON response. Status code defaults to 200</td>\n    </tr>\n    </tbody>\n</table>\n\n<h2><a href=\"/docs/functions#createFunction\" id=\"createFunction\">Create your Function</a></h2>\n\n<p>Before you can deploy your function, you will need to create a new function from your Appwrite project's dashboard. Access the Function settings from your project's left navigation panel. Click the 'Add Function' button and choose a function name and runtime. In your Functions settings page, you can also set your function event triggers, CRON schedule, and set secure function variables for your function. </p>\n\n<h2><a href=\"/docs/functions#deployFunction\" id=\"deployFunction\">Deploy Your Function</a></h2>\n\n<p>Once you've written your function, you can now deploy it using the <a href=\"/docs/command-line\">Appwrite CLI</a>, the Appwrite <a href=\"/docs/getting-started-for-server\">Server API</a> or manually from the Appwrite console.</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Unix</h3>\n\n        <div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite functions createDeployment \\\n    --functionId=6012cc93d5a7b \\\n    --activate=true \\\n    --entrypoint=\"index.js\" \\\n    --code=\".\"</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>CMD</h3>\n\n        <div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CMD\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite functions createDeployment ^\n    --functionId=6012cc93d5a7b ^\n    --activate=true ^\n    --entrypoint=\"index.js\" ^\n    --code=\".\"</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>PowerShell</h3>\n\n        <div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"PowerShell\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>appwrite functions createDeployment `\n    --functionId=6012cc93d5a7b `\n    --activate=true `\n    --entrypoint=\"index.js\" `\n    --code=\".\"</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>The command above accepts three parameters:</p>\n\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom text-size-small\">\n    <thead>\n    <tr>\n        <th style=\"width: 140px\">Name</th>\n        <th>Description</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>functionId</td>\n        <td>The ID of the Function you created in the previous step. You can find your function ID on your function page in your project dashboard.</td>\n    </tr>\n    <tr>\n        <td>entrypoint</td>\n        <td>The file name of your custom code that is executed when the function is triggered.</td>\n    </tr>\n    <tr>\n        <td>code</td>\n        <td>Path to your function tarball. When used with the Appwrite CLI, simply pass the path to your code directory, and the CLI will automatically package your code. </td>\n    </tr>\n    </tbody>\n</table>\n\n<p><a href=\"/docs/server/functions#functionsCreateDeployment\" rel=\"noopener\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> You can also create new code deployments using the Appwrite server API</a></p>\n\n<h3>Manual Deployment</h3>\n<p>You can also upload your functions to be deployed using the Appwrite console. The example below shows a simple Node.JS function, but the same idea applies to any other language.</p>\n\n<div class=\"ide margin-bottom\">\n    <pre class=\"line-numbers\"><code class=\"prism\" data-prism>.\n├── package.json\n└── index.js\n</code></pre>\n</div>\n\n<p>First, navigate inside the folder that contains your dependency file. Package your code files into the <code>.tar.gz</code> format with this tar command:</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Unix</h3>\n\n        <div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>tar -czf code.tar.gz --exclude code.tar.gz .</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>CMD</h3>\n\n        <div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CMD\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>tar -czf code.tar.gz --exclude code.tar.gz .</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>PowerShell</h3>\n\n        <div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"PowerShell\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>tar -czf code.tar.gz --exclude code.tar.gz .</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>Next, navigate to your Appwrite console and upload the function.</p>\n\n<ol class=\"margin-top margin-bottom-large text-size-normal\">\n  <li class=\"margin-bottom-small\">Navigate to the function you want to deploy.</li>\n  <li class=\"margin-bottom-small\">Click <i class=\"icon-plus\"></i> <b>Create deployment</b>.</li>\n  <li class=\"margin-bottom-small\">Select the <b>Manual</b> tab.</li>\n  <li class=\"margin-bottom-small\">Input the entry point of your function under <b>Entrypoint</b>. For the example above, it would be <code>index.js</code>.</li>\n  <li class=\"margin-bottom-small\">Upload <code> code.tar.gz</code>.</li>\n  <li class=\"margin-bottom-small\">Select <b>Activate deployment after build</b> to use your new function.</li>\n  <li class=\"margin-bottom-small\">Click <b>Create</b> to deploy your function.</li>\n</ol>\n\n\n<h2><a href=\"/docs/functions#build\" id=\"build\">Builds</a></h2>\n<p>Deployments needs to be built before they can be activated. This is automatically done after creating a deployment and the time taken can vary depending on the runtime.</p>\n\n<p>If a build fails for any reason, the deployment's status is set to <span class=\"tag red\">failed</span> and you won't be able to activate it. You can however retry a build if you think it was caused by an external factor using the <b>Retry Button</b> on the Appwrite Dashboard or <a href=\"/docs/server/functions#functionsRetryBuild\">Retry Build</a> endpoint with the <code>buildId</code> from the deployment.</p>\n\n<p>To find more details about a deployment and reasons for its failure, you can use the <a href=\"/docs/server/functions#functionsGetDeployment\">Get Deployment</a> endpoint using the <code>deploymentId</code>.</p>\n\n<p>Deployments that have been built successfully are marked as <span class=\"tag green\">ready</span> and can be activated and executed.</p>\n\n<div class=\"notice\">\n    <h3>Build Times</h3>\n    <p>Compiled runtimes such as Rust and Swift take much longer to build however yield better performance over their interpreted counterparts such as Node.</p>\n</div>\n\n<h2><a href=\"/docs/functions#execute\" id=\"execute\">Execute</a></h2>\n\n<p>Besides setting a schedule or allowing your function to listen to Appwrite's system events, you can also manually execute your cloud functions from your Appwrite console or API.</p>\n\n<?php\n$image = new View(__DIR__.'/../general/image.phtml');\n    echo $image\n        ->setParam('srcLight', '/images-ee/docs/functions-light.png')\n        ->setParam('srcDark', '/images-ee/docs/functions-dark.png')\n        ->setParam('alt', 'Function settings page.')\n        ->setParam('description', 'Function settings page.')\n        ->render();\n?>\n\n<p>To execute a function from the Appwrite console, click the <b>Execute Now</b> button on your function's overview page. To execute a function from the API, send a POST request to the <a href=\"/docs/client/functions#functionsCreateExecution\">function execution endpoint</a>.</p>\n\n<p>The function execution endpoint is available from both Appwrite client and server APIs. To execute your function from the <b>server API</b>, you need an API key with 'execution.write' scope.</p>\n\n<p>Executing the function from the <b>client API</b> requires the current user to have execution permission for the function. You can change the execution permission from the function's settings page in the Appwrite console, by default no user, team, or role has this permission.</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Functions } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')\n    .setProject('[PROJECT_ID]');\n\nconst functions = new Functions(client);\n\nlet promise = functions.createExecution('[FUNCTION_ID]');\n\npromise.then(function (response) {\n    console.log(response); // Success\n}, function (error) {\n    console.log(error); // Failure\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n\n        <div class=\"ide margin-bottom\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nvoid main() async {\n    final client = Client()\n        .setEndpoint('https://cloud.appwrite.io/v1')\n        .setProject('[PROJECT_ID]');\n\n    final functions = Functions(client);\n\n    final execution = await functions.createExecution(\n        functionId: '[FUNCTION_ID]'\n    );\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n\n        <div class=\"ide margin-bottom\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Functions\n\nsuspend fun main() {\n    val client = Client(applicationContext)\n        .setEndpoint(\"https://cloud.appwrite.io/v1\")\n        .setProject(\"[PROJECT_ID]\")\n\n    val functions = Functions(client)\n\n    val execution = functions.createExecution(\n        functionId = \"[FUNCTION_ID]\"\n    )\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n\n        <div class=\"ide margin-bottom\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nfunc main() async throws {\n    let client = Client()\n      .setEndpoint(\"https://cloud.appwrite.io/v1\")\n      .setProject(\"[PROJECT_ID]\")\n\n    let functions = Functions(client)\n\n    let execution = try await functions.createExecution(\n        functionId: \"[FUNCTION_ID]\"\n    )\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>GraphQL</h3>\n\n        <div class=\"ide margin-bottom\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n            <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>mutation {\n    functionsCreateExecution(functionId: \"[FUNCTION_ID]\") {\n        _id\n        statusCode\n        response\n        stdout\n        stderr\n        duration\n    }\n}</code></pre>\n        </div>\n    </li>\n</ul>\n\n<h2><a href=\"/docs/functions#scheduled-execution\" id=\"scheduled-execution\">Scheduled Execution</a></h2>\n<p>Appwrite supports scheduled function executions. You can schedule executions using <a href=\"https://en.wikipedia.org/wiki/Cron\" target=\"_blank\" rel=\"noopener\">cron expressions</a> in the settings of your function. Cron supports recurring executions as frequently as <b>every minute</b>.</p>\n\n<p>Here are some cron expressions for common intervals.</p>\n\n<table class=\"full text-size-small\">\n    <thead>\n    <tr>\n        <td>Cron Expression</td>\n        <td>Schedule</td>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>*/15 * * * *</td>\n        <td>Every 15 minutes</td>\n    </tr>\n    <tr>\n        <td>0 * * * *</td>\n        <td>Every Hour</td>\n    </tr>\n    <tr>\n        <td>0 0 * * *</td>\n        <td>Every day at 00:00</td>\n    </tr>\n    <tr>\n        <td>0 0 * * 1</td>\n        <td>Every monday at 00:00</td>\n    </tr>\n    </tbody>\n</table>\n\n<h3><a href=\"/docs/functions#abuseLimits\" id=\"abuseLimits\">Abuse and Limits</a></h3>\n\n<p>Appwrite Functions can be executed using Client or Server SDKs. Client SDKs must be authenticated with an account that has been granted execution <a href=\"/docs/permissions\">permissions</a> on the function's settings page. Server SDKs require an API key with the correct scopes.</p>\n\n<p>The Functions Service APIs are rate limited to 60 calls per minute per account when using a Client SDK. Learn more about <a href=\"/docs/rate-limits\">rate limiting</a>. The response size of a Cloud Function is limited to 1MB. Responses larger than 1MB should be handled using Appwrite's Databases or Storage service.</p>\n\n<p>Each execution has a default timeout of 15 seconds to prevent hanging functions from blocking resources. This timeout can be configured per function on a function's settings page or in <code>appwrite.json</code> for up to 900 seconds.</p>\n\n<h2><a href=\"/docs/functions#ignoreFiles\" id=\"ignoreFiles\">Ignore Files</a></h2>\n\n<p>Library folders such as <code>node_modules</code> or <code>vendor</code> should not be included in your tarball since these dependencies will be installed during your function's build process. Similarly, you should <b>not</b> include files containing secrets in your deployment. You can use the Appwite CLI's <b>file ignoring</b> feature to exclude specific files from a deployment.</p>\n\n<p>You can use the <b>ignore</b> property in your <code>appwrite.json</code> file to specify which files and folders should be ignored. This value must be an array of paths, as seen in the example below:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"json\" data-lang-label=\"JSON\">\n    <pre class=\"line-numbers\"><code class=\"prism language-json\" data-prism>{\n    ...\n    \"functions\": [\n        {\n            \"$id\": \"6213b58cb21dda6c3263\",\n            \"name\": \"My Awesome Function\",\n            \"runtime\": \"node-17.0\",\n            \"path\": \"My Awesome Function\",\n            \"entrypoint\": \"src/index.js\",\n            \"ignore\": [ \"node_modules\", \".env\" ]\n        },\n        ...\n    ],\n}</code></pre>\n</div>\n\n<p>The example configuration above would not deploy the folder <code>node_modules</code> and the file <code>.env</code>.</p>\n\n<p>Alternatively, you can add a <code>.gitignore</code> file into your function folder and Appwrite CLI will ignore files specified in there. Keep in mind that if present, the <b>ignore</b> configuration in <code>appwrite.json</code> will nullify your ignore file.</p>\n\n<p>If you need to use a <code>.gitignore</code> file for your version control but don't want the Appwrite CLI to use it, you can specify the <b>ignore</b> key in <code>appwrite.json</code> to be an empty array.</p>\n\n<h2><a href=\"/docs/functions#supportedRuntimes\" id=\"supportedRuntimes\">Supported Runtimes</a></h2>\n\n<p>Appwrite provides multiple code runtimes to execute your custom functions. Each runtime uses a Docker image tied to a specific language version to provide a safe, isolated playground to run your team's code.</p>\n\n<p>Below is a list of supported Cloud Functions runtimes. The Appwrite team continually adds support for new runtimes.</p>\n\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large\">\n    <thead>\n        <tr>\n            <th style=\"width: 50px\"></th>\n            <th style=\"width: 120px\">Name</th>\n            <th>Image</th>\n            <th>Architectures</th>\n        </tr>\n    </thead>\n    <tbody>\n        <?php foreach($runtimes as $key => $runtime): ?>\n        <tr>\n            <td><img src=\"\" data-ls-attrs=\"src=/images/runtimes/<?php echo $this->escape($runtime['logo'] ?? ''); ?>\" alt=\"Function Env.\" class=\"avatar xxs\" /></td>\n            <td><span data-general-copy><?php echo $this->escape($key); ?> </span></td>\n            <td><a href=\"https://hub.docker.com/r/<?php echo $this->escape(strtok($runtime['image'], ':')); ?>\" target=\"_blank\" rel=\"noopener\"><?php echo $this->escape($runtime['image'] ?? ''); ?> <i class=\"icon-link-ext\"></i></a></td>\n            <td><?php echo $this->escape(implode(' / ', $runtime['supports'] ?? [])); ?></td>\n        </tr>\n        <?php endforeach; ?>\n    </tbody>\n</table>\n\n<p>By default, the following runtimes are enabled: <code>node-16.0</code>, <code>php-8.0</code>, <code>python-3.9</code>, <code>ruby-3.0</code>, and <code>dart-2.17</code>.</p>\n\n<h2><a href=\"/docs/functions#functionVariables\" id=\"functionVariables\">Function Variables</a></h2>\n\n<p>Function variables supplied by Appwrite in addition to your own defined function variables that you can access from your function code. These variables give you information about your execution runtime environment.</p>\n\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large\">\n    <thead>\n        <tr>\n            <th style=\"width: 250px\">Name</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>\n                APPWRITE_FUNCTION_ID\n            </td>\n            <td>Your function's unique ID.</td>\n        </tr>\n        <tr>\n            <td>\n                APPWRITE_FUNCTION_NAME\n            </td>\n            <td>Your function's name.</td>\n        </tr>\n        <tr>\n            <td>\n                APPWRITE_FUNCTION_DEPLOYMENT\n            </td>\n            <td>Your function's code deployment unique ID.</td>\n        </tr>\n        <tr>\n            <td>\n                APPWRITE_FUNCTION_TRIGGER\n            </td>\n            <td>Either 'event' when triggered by one of the selected scopes, 'http' when triggered by an HTTP request or the Appwrite Console, or 'schedule' when triggered by the cron schedule.</td>\n        </tr>\n        <tr>\n            <td>\n                APPWRITE_FUNCTION_RUNTIME_NAME\n            </td>\n            <td>Your function runtime name. Can be any of Appwrite supported execution runtimes.</td>\n        </tr>\n        <tr>\n            <td>\n                APPWRITE_FUNCTION_RUNTIME_VERSION\n            </td>\n            <td>Your function runtime version.</td>\n        </tr>\n        <tr>\n            <td>\n                APPWRITE_FUNCTION_EVENT\n            </td>\n            <td>Your function event name. This value is available only when your function trigger is 'event.' This variable value can be any of Appwrite <a href=\"/docs/events\">system events</a>.</td>\n        </tr>\n        <tr>\n            <td>\n                APPWRITE_FUNCTION_EVENT_DATA\n            </td>\n            <td>Your function event payload. This value is available only when your function trigger is 'event'. This variable value contains a string in JSON format with your specific event data.</td>\n        </tr>\n        <tr>\n            <td>\n                APPWRITE_FUNCTION_DATA\n                <p class=\"margin-top-small text-fade\">version >= 0.8.0</p>\n            </td>\n            <td>Your function's custom execution data. This variable's value contains a string in any format. If the custom data is in JSON FORMAT, it must be parsed inside the function code. Note that this variable can be set only when triggering a function using the <a href=\"https://appwrite.io/docs/client/functions?sdk=web#functionsCreateExecution\">SDK or HTTP API</a> and the Appwrite Dashboard.</td>\n        </tr>\n        <tr>\n            <td>\n                APPWRITE_FUNCTION_PROJECT_ID\n                <p class=\"margin-top-small text-fade\">version >= 0.8.0</p>\n            </td>\n            <td>Your function's project ID.</td>\n        </tr>\n        <tr>\n            <td>\n                APPWRITE_FUNCTION_USER_ID\n                <p class=\"margin-top-small text-fade\">version >= 0.8.0</p>\n            </td>\n            <td>The userId of the user that triggered your function's execution. Executions triggered in the Appwrite console will be prepended with \"admin-\".</td>\n        </tr>\n        <tr>\n            <td>\n                APPWRITE_FUNCTION_JWT\n                <p class=\"margin-top-small text-fade\">version >= 0.8.0</p>\n            </td>\n            <td>A <a href=\"https://jwt.io/\">JSON Web Token</a> generated for the user that executes your function.</td>\n        </tr>\n        <tr>\n            <td>\n                APPWRITE_FUNCTION_EVENT_PAYLOAD\n                <p class=\"margin-top-small text-fade\">version &lt; 0.8.0 <span class=\"text-danger\">(deprecated)</span></p>\n            </td>\n            <td>Your function event payload. Deprecated in favor of APPWRITE_FUNCTION_EVENT_DATA in version 0.8.0.</td>\n        </tr>\n        <tr>\n            <td>\n                APPWRITE_FUNCTION_ENV_NAME\n                <p class=\"margin-top-small text-fade\">version &lt; 0.8.0 <span class=\"text-danger\">(deprecated)</span></p>\n            </td>\n            <td>Your function environment name. Can be any of Appwrite supported execution environments.</td>\n        </tr>\n        <tr>\n            <td>\n                APPWRITE_FUNCTION_ENV_VERSION\n                <p class=\"margin-top-small text-fade\">version &lt; 0.8.0 <span class=\"text-danger\">(deprecated)</span></p>\n            </td>\n            <td>Your function environment version.</td>\n        </tr>\n    </tbody>\n</table>\n\n<div class=\"notice\">\n    <h3>Using an Appwrite SDK in Your Function</h3>\n    <p>Appwrite Server SDKs require an API key, an endpoint, and a project ID for authentication. Appwrite passes in your project ID with the function variable  <code>APPWRITE_FUNCTION_PROJECT_ID</code>, but not the endpoint and API key. If you need to use a Server SDK, you will need to add function variables for your endpoint and API key in the <b>Settings</b> tab of your function.</p>\n    <p>If you are running a <b>local Appwrite instance</b>, you will need to pass in the machine's public IP instead of <code>'https://localhost/v1'</code>. Localhost inside the function's runtime container is not the same as localhost of your machine.</p>\n</div>\n\n<h2><a href=\"/docs/functions#appwriteSDKInFunctions\" id=\"appwriteSDKInFunctions\">Appwrite SDKs in Functions</a></h2>\n\n<p>You can integrate Appwrite Functions with other Appwrite services by using the appropriate <a href=\"/docs/getting-started-for-server\">Server SDK</a> for your runtime. You can find starter code for your function's runtime in the <a href=\"https://github.com/appwrite/functions-starter\" target=\"_blank\">Appwrite Function Starter repository</a>.</p>\n\n<p>To initialize a Server SDK in a function, you need to provide your Appwrite endpoint and an <a href=\"/docs/keys\">API key</a> in the <b>Variables</b> tab of your Function. The ID of your Appwrite project is passed in automatically as <code>APPWRITE_FUNCTION_PROJECT_ID</code>.</p>\n\n<h2><a href=\"/docs/functions#monitorDebug\" id=\"monitorDebug\">Monitor & Debug</a></h2>\n\n<p>You can monitor your function execution usage stats and logs from your Appwrite console. To access your functions usage stats and logs, click the <b>Usage</b> tab in your function dashboard.</p>\n\n<p>The usage screen in your console will allow you to track the number of execution and your function CPU usage time. You can also review a detailed log of your function execution history, including the function exit code, output log, and error log.</p>\n\n<?php\n$image = new View(__DIR__.'/../general/image.phtml');\n    echo $image\n        ->setParam('srcLight', '/images-ee/docs/functions-monitor-light.png')\n        ->setParam('srcDark', '/images-ee/docs/functions-monitor-dark.png')\n        ->setParam('alt', 'Function usage and logs tracking.')\n        ->setParam('description', 'Function usage and logs tracking.')\n        ->render();\n?>\n\n<h2><a href=\"/docs/functions#demosExamples\" id=\"demosExamples\">Demos & Examples</a></h2>\n\n<p>There are many Cloud Function demos and examples created by the Appwrite team and community in multiple coding languages. These examples are available at our <a href=\"https://github.com/open-runtimes/examples\" target=\"_blank\" rel=\"noopener\">examples repository</a> on GitHub. You can also submit your examples by submitting a <a href=\"https://github.com/open-runtimes/examples/pulls\" target=\"_blank\" rel=\"noopener\">pull-request</a>.</p>\n","metadata":{"source":"./appwrite-docs/functions.phtml"}}],[{"pageContent":"<?php\n$platforms = $this->getParam('platforms');\n$versions = [];\n\nforeach($platforms['client']['sdks'] as $lang) {\n    $key = $lang['key'] ?? '';\n    $version = $lang['version'] ?? '';\n\n    if(!empty($key)) {\n        $versions[$key] = $version;\n    }\n}\n\n$appleVersion = $versions['apple'] ?? '';\n?>\n<p>Appwrite is a development platform that provides a powerful API and management console to get your next project up and running quickly.</p>\n\n<p><a target=\"_blank\" rel=\"noopener\" href=\"https://cloud.appwrite.io/\">Create your first project now</a> and start building on Appwrite Cloud.</p>\n\n<h2><a href=\"/docs/getting-started-for-apple#addProject\" id=\"addProject\">Add your Apple Platform</a></h2>\n\n<p>To init your SDK and start interacting with Appwrite services, you need to add a new Apple platform to your project. To add a new platform, go to your Appwrite console, choose the project you created in the step before, and click the <b>'Add Platform'</b> button. Only API requests initiated from platforms added to your Appwrite project will be accepted. This prevents unauthorized apps from accessing your Appwrite project.</p>\n\n<p>From the options, choose to add a new <b>Apple</b> platform, select the iOS, macOS, watchOS or tvOS tab and add your app <u>name</u> and <u>bundle identifier</u>, Your bundle identifier can be found at the top of the <b>General</b> tab in your project settings, or in your <b>Info.plist</b> file. By registering your new app platform, you are allowing your app to communicate with the Appwrite API.</p>\n\n<h2><a href=\"/docs/getting-started-for-apple#getSDK\" id=\"getSDK\">Get Appwrite Apple SDK</a></h2>\n\n<h3>Using Xcode</h3>\n\n<ol>\n    <li>Select File > Add Packages</li>\n    <li>Search for the Appwrite SDK with the URL https://github.com/appwrite/sdk-for-apple</li>\n    <li>In the right panel, select your target project and add your desired version rules</li>\n    <li>Select Add Package and wait for package resolution to complete</li>\n    <li>Make sure the Appwrite package product is checked and select Add Package again</li>\n</ol>\n\n<h3>Using Swift Packages</h3>\n\n<p>Add the following to your Package.swift file: </p>\n\n<div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Swift\">\n  <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>dependencies: [\n    .package(\n        name: \"Appwrite\",\n        url: \"https://github.com/appwrite/sdk-for-swift\",\n        .exact(\"<?php echo $this->escape($appleVersion); ?>\")\n    )\n]')</code></pre>\n</div>\n\n<p>Then add the dependency to your target:</p>\n\n<div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Swift\">\n  <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>targets: [\n    .target(\n        name: \"[YOUR_TARGET]\",\n        dependencies: [\n            \"Appwrite\"\n        ]\n    )\n]</code></pre>\n</div>\n\n<h3><a href=\"/docs/getting-started-for-apple#OAuthCallback\" id=\"OAuthCallback\">OAuth Callback</a></h3>\n\n<p>In order to capture the Appwrite OAuth callback url, the following URL scheme needs to added to your `Info.plist`</p>\n\n<div class=\"ide\" data-lang=\"html\" data-lang-label=\"XML\">\n    <pre class=\"line-numbers\"><code class=\"prism language-xml\" data-prism><?php echo $this->escape('<key>CFBundleURLTypes</key>\n<array>\n<dict>\n    <key>CFBundleTypeRole</key>\n    <string>Editor</string>\n    <key>CFBundleURLName</key>\n    <string>io.appwrite</string>\n    <key>CFBundleURLSchemes</key>\n    <array>\n        <string>appwrite-callback-[PROJECT_ID]</string>\n    </array>\n</dict>\n</array>\n');?></code></pre>\n</div>\n\n<p>If you're using UIKit, you'll also need to add a hook to your <b>SceneDelegate.swift</b> file to ensure cookies work correctly.</p>\n\n<div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Swift\">\n  <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism><?php echo $this->escape('\nfunc scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>) {\n    guard let url = URLContexts.first?.url,\n        url.absoluteString.contains(\"appwrite-callback\") else {\n        return\n    }\n    WebAuthComponent.handleIncomingCookie(from: url)\n}\n');?></code></pre>\n</div>\n\n<h2><a href=\"/docs/getting-started-for-apple#initSDK\" id=\"initSDK\">Init your SDK</a></h2>\n\n<p>Initialize your SDK code with your project ID, which can be found in your project settings page.</p>\n\n<div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n    <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\nimport AppwriteModels\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your Appwrite Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID</code></pre>\n</div>\n\n<p>Before sending any API calls to your new Appwrite project, make sure your device or emulator has network access to your Appwrite project's hostname or IP address.</p>\n\n<h2><a href=\"/docs/getting-started-for-apple#makeRequest\" id=\"makeRequest\">Make Your First Request</a></h2>\n\n<p>After your SDK configuration is set, access any of the Appwrite services and choose any request to send. Complete documentation for any service method you would like to use can be found in your SDK documentation or in the API References section.</p>\n\n<div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n                    <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>// Register User\nlet account = Account(client)\n\nlet user = try await account.create(\n    userId: ID.unique(),\n    email: \"email@example.com\",\n    password: \"password\"\n)</code></pre>\n</div>\n\n<h2><a href=\"/docs/getting-started-for-apple#listenToChanges\" id=\"listenToChanges\">Listen to Changes</a></h2>\n\n<p>To listen to changes in realtime from Appwrite, subscribe to a variety of channels and receive updates within milliseconds. Full documentation for Realtime can be found <a href=\"/docs/realtime\">here</a>.</p>\n\n<div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n  <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>// Subscribe to files channel\nlet realtime = Realtime(client)\n\nlet subscription = realtime.subscribe(channels: [\"files\"]) { message in\n    if (message.events!.contains(\"buckets.*.files.*.create\")) {\n        // Log when a new file is uploaded\n        print(String(describing: message.payload))\n    }\n}</code></pre>\n</div>\n\n<p>If you're using macOS, for realtime to function correctly you need to ensure you have both \"Outgoing Connections (Client)\" <i>and</i> \"Incoming Connections (Server)\" enabled in your App Sandbox settings in your project file.</p>\n\n<h2><a href=\"/docs/getting-started-for-apple#fullExample\" id=\"fullExample\">Full Example</a></h2>\n<div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n                    <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\nimport AppwriteModels\n\nlet client = Client()\n  .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your Appwrite Endpoint\n  .setProject(\"[PROJECT_ID]\")                // Your project ID\n\n// Register User\nlet account = Account(client)\n\nlet user = try await account.create(\n    userId: ID.unique(),\n    email: \"email@example.com\",\n    password: \"password\"\n)\n\n// Subscribe to files channel\nlet realtime = Realtime(client)\n\nlet subscription = realtime.subscribe(channels: [\"files\"]) { message in\n    if (message.events!.contains(\"buckets.*.files.*.create\")) {\n        // Log when a new file is uploaded\n        print(String(describing: message.payload))\n    }\n}</code></pre>\n</div>\n\n<h2><a href=\"/docs/getting-started-for-apple#nextSteps\" id=\"nextSteps\">Next Steps</a></h2>\n\n<p>Appwrite has many services and tools to help improve your app and speed up your development. The best way to learn how you can take advantage of them is to explore the different API references docs.</p>","metadata":{"source":"./appwrite-docs/getting-started-for-apple.phtml"}}],[{"pageContent":"<?php\n$platforms = $this->getParam('platforms');\n$versions = [];\n\nforeach($platforms['client']['sdks'] as $lang) {\n    $key = $lang['key'] ?? '';\n    $version = $lang['version'] ?? '';\n\n    if(!empty($key)) {\n        $versions[$key] = $version;\n    }\n}\n\n$version = (isset($versions['flutter'])) ? $versions['flutter'] : '';\n?>\n<p>Appwrite is a development platform that provides a powerful API and management console to get your next project up and running quickly.</p>\n\n<p><a target=\"_blank\" rel=\"noopener\" href=\"https://cloud.appwrite.io/\">Create your first project now</a> and start building on Appwrite Cloud.</p>\n\n<h2><a href=\"/docs/getting-started-for-flutter#addYourPlatform\" id=\"addYourPlatform\">Add your Flutter Platform</a></h2>\n\n<p>To init your SDK and start interacting with Appwrite services, you need to add a new Flutter platform to your project. To add a new platform, go to your Appwrite console, choose the project you created in the step before, and click the 'Add Platform' button. Only API requests initiated from platforms added to your Appwrite project will be accepted. This prevents unauthorized apps from accessing your Appwrite project.</p>\n\n<p>From the options, choose to add a new <b>Flutter</b> platform and add your app credentials. Appwrite Flutter SDK currently supports building apps for Android, iOS, Linux, Mac OS, Web and Windows.</p>\n\n<p>If you are building your Flutter application for multiple devices, you have to follow this process for each different device.</p>\n\n<h3><a href=\"/docs/getting-started-for-flutter#android\" id=\"android\">Android</a></h3>\n\n<p>For <b>Android</b> first add your app <u>name</u> and <u>package name</u>, Your package name is generally the <b>applicationId</b> in your app-level <a href=\"https://github.com/appwrite/playground-for-flutter/blob/master/android/app/build.gradle#L41\" target=\"_blank\" rel=\"noopener\">build.gradle</a> file. By registering your new app platform, you are allowing your app to communicate with the Appwrite API.</p>\n\n<p>In order to capture the Appwrite OAuth callback url, the following activity needs to be added inside the `&lt;application&gt;` tag, along side the existing `&lt;activity&gt;` tags in your <a href=\"https://github.com/appwrite/playground-for-flutter/blob/master/android/app/src/main/AndroidManifest.xml\" target=\"_blank\" rel=\"noopener\">AndroidManifest.xml</a>. Be sure to replace the <b>[PROJECT_ID]</b> string with your actual Appwrite project ID. You can find your Appwrite project ID in you project settings screen in your Appwrite console.</p>\n\n<div class=\"ide\" data-lang=\"html\" data-lang-label=\"XML\">\n    <pre class=\"line-numbers\"><code class=\"prism language-xml\" data-prism><?php echo $this->escape('<manifest ...>\n  ...\n  <application ...>\n    ...\n    <!-- Add this inside the `<application>` tag, along side the existing `<activity>` tags -->\n    <activity android:name=\"com.linusu.flutter_web_auth_2.CallbackActivity\" android:exported=\"true\">\n      <intent-filter android:label=\"flutter_web_auth_2\">\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"appwrite-callback-[PROJECT_ID]\" />\n      </intent-filter>\n    </activity>\n  </application>\n</manifest>'); ?>\n</code></pre>\n</div>\n\n<h3><a href=\"/docs/getting-started-for-flutter#iOS\" id=\"iOS\">iOS</a></h3>\n\n<p>For <b>iOS</b> first add your app <u>name</u> and <u>Bundle ID</u>, You can find your Bundle Identifier in the General tab for your app's primary target in Xcode.</p>\n\n<p>The Appwrite SDK uses ASWebAuthenticationSession on iOS 12+ and SFAuthenticationSession on iOS 11 to allow OAuth authentication. You have to change your iOS Deployment Target in Xcode to be iOS >= 11 to be able to build your app on an emulator or a real device.</p>\n\n<ol class=\"margin-top margin-bottom-large\">\n  <li class=\"margin-bottom-small\">In Xcode, open Runner.xcworkspace in your app's iOS folder.\n  <li class=\"margin-bottom-small\">To view your app's settings, select the Runner project in the Xcode project navigator. Then, in the main view sidebar, select the Runner target.</li>\n  <li class=\"margin-bottom-small\">Select the General tab.</li>\n  <li class=\"margin-bottom-small\">In Deployment Info, 'Target' select iOS 11.0</li>\n</ol>\n\n<h3><a href=\"/docs/getting-started-for-flutter#linux\" id=\"linux\">Linux</a></h3>\n\n<p>For <b?>Linux</b> add your app <u>name</u> and <u>package name</u>, Your package name is generally the <b>name</b> in your <a href=\"https://github.com/appwrite/playground-for-flutter/blob/master/pubspec.yaml#L1\" target=\"_blank\" rel=\"noopener\">pubspec.yaml</a> file. If you cannot find the correct package name, run the application in linux, and make any request with proper exception handling, you should get the application id needed to add in the received error message.</p>\n\n<h3><a href=\"/docs/getting-started-for-flutter#macOS\" id=\"macOS\">macOS</a></h3>\n\n<p>For <b>macOS</b> add your app name and Bundle ID, You can find your Bundle Identifier in the General tab for your app's primary target in Xcode.</p>\n<p>The Appwrite SDK uses ASWebAuthenticationSession on macOS 10.15+ to allow OAuth authentication. You have to change your macOS Deployment Target in Xcode to be macOS >= 10.15 to be able to build your app for macOS.</p>\n\n<h3><a href=\"/docs/getting-started-for-flutter#web\" id=\"web\">Web</a></h3>\n\n<p>To build web apps that integrate with Appwrite successfully, you must add a web platform on your Appwrite project's dashboard and list the domain your website uses to allow communication to the Appwrite API. The process is similar to the <a href=\"/docs/getting-started-for-web#addPlatform\">adding a web platform</a> in the web guide.</p>\n\n<p>For web in order to capture the OAuth2 callback URL and send it to the application using JavaScript <code>postMessage()</code>, you need to create an html file inside <code>./web</code> folder of your Flutter project. For example <code>auth.html</code> with the following content.</p>\n\n<div class=\"ide\" data-lang=\"html\" data-lang-label=\"html\">\n    <pre class=\"line-numbers\"><code class=\"prism language-html\" data-prism><?php echo $this->escape('<!DOCTYPE html>\n<title>Authentication complete</title>\n<p>Authentication is complete. If this does not happen automatically, please\nclose the window.\n<script>\n  window.opener.postMessage({\n    \\'flutter-web-auth-2\\': window.location.href\n  }, window.location.origin);\n  window.close();\n</script>'); ?>\n</code></pre>\n</div>\n\n<p>The redirection URL passed to the authentication service must be the same as the URL on which the application is running (schema, host, port if necessary), and the path must point to created HTML file, /auth.html in this case. The callbackUrlScheme parameter of the authenticate() method does not take into account, so it is possible to use a schema for native platforms in the code.</p>\n\n<div class=\"notice\">\n  <h2>Flutter Web Cross-Domain Communication & Cookies</h2>\n  <p>While running Flutter Web, make sure your Appwrite server and your Flutter client use the same top-level domain and protocol (HTTP or HTTPS) to communicate. When communicating between different domains or protocols, you may receive HTTP status error 401 because some modern browsers block cross-site or insecure cookies for enhanced privacy. In production, Appwrite allows you set multiple <a href=\"/docs/custom-domains\">custom-domains</a> for each project.</p>\n</div>\n\n\n<h3><a href=\"/docs/getting-started-for-flutter#windows\" id=\"windows\">Windows</a></h3>\n\n<p>For <b>Windows</b> add your app <u>name</u> and <u>package name</u>, Your package name is generally the <b>name</b> in your <a href=\"https://github.com/appwrite/playground-for-flutter/blob/master/pubspec.yaml#L1\" target=\"_blank\" rel=\"noopener\">pubspec.yaml</a> file. If you cannot find the correct package name, run the application in windows, and make any request with proper exception handling, you should get the application id needed to add in the received error message.</p>\n\n\n<h2><a href=\"/docs/getting-started-for-flutter#getSDK\" id=\"getSDK\">Get Appwrite Flutter SDK</a></h2>\n\n<p>Add <a href=\"https://pub.dev/packages/appwrite\" target=\"_blank\" rel=\"noopener\">Appwrite SDK</a> to your package's pubspec.yaml file <a href=\"https://github.com/appwrite/playground-for-flutter/blob/master/pubspec.yaml\" target=\"_blank\" rel=\"noopener\">(view example)</a>:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"yaml\" data-lang-label=\"yaml\">\n    <pre class=\"line-numbers\"><code class=\"prism language-yaml\" data-prism>dependencies:\n  appwrite: ^<?php echo $this->escape($version); ?>\n</code></pre>\n</div>\n\n<p>You can also install the SDK using the <a href=\"https://pub.dev/\" target=\"_blank\" rel=\"noopener\">Dart package manager</a> from your terminal:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n  <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>flutter pub add appwrite</code></pre>\n</div>\n\n<h2><a href=\"/docs/getting-started-for-flutter#initSDK\" id=\"initSDK\">Init your SDK</a></h2>\n\n<p>Initialize your SDK with your endpoint and project ID, which can be found on your project settings page. It's usually a good practice to initialize the Client and make it available across the app using the state management solution of your choice, as the Client is required for making any calls to the Appwrite API.</p>\n\n<div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n  <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nClient client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your Appwrite Endpoint\n    .setProject('[PROJECT_ID]');         // Your project ID</code></pre>\n</div>\n\n<p>Before sending any API calls to your new Appwrite project, make sure your mobile device or emulator has network access to your Appwrite project's hostname or IP address.</p>\n\n<h2><a href=\"/docs/getting-started-for-flutter#makeRequest\" id=\"makeRequest\">Make Your First Request</a></h2>\n\n<p>After your SDK configuration is set, access any of the Appwrite services and choose any request to send. Full documentation for any service method you would like to use can be found in your SDK documentation or in the API References section.</p>\n\n<div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n  <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>// Register User\nAccount account = Account(client);\n\nfinal user = await account.create(\n    userId: ID.unique(),\n    email: 'me@appwrite.io',\n    password: 'password',\n    name: 'My Name'\n);\n</code></pre>\n</div>\n\n<h2><a href=\"/docs/getting-started-for-flutter#listenToChanges\" id=\"listenToChanges\">Listen to Changes</a></h2>\n\n<p>If you want to listen to changes in realtime from Appwrite, you can subscribe to a variety of channels and receive updates within milliseconds. Full documentation for Realtime can be found <a href=\"/docs/realtime\">here</a>.</p>\n\n<div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n  <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>// Subscribe to files channel\nfinal realtime = Realtime(client);\nfinal subscription = realtime.subscribe(['files']);\n\nsubscription.stream.listen((response) {\n    if (response.events.contains('buckets.*.files.*.create') {\n        // Log when a new file is uploaded\n        print(response.payload);\n    }\n});\n</code></pre>\n</div>\n\n<h2><a href=\"/docs/getting-started-for-flutter#fullExample\" id=\"fullExample\">Full Example</a></h2>\n<div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n  <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nClient client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')  // Your Appwrite Endpoint\n    .setProject('[PROJECT_ID]');          // Your project ID\n\nAccount account = Account(client);\n\nfinal user = await account.create(\n    userId: ID.unique(),\n    email: 'me@appwrite.io',\n    password: 'password',\n    name: 'My Name'\n);\n\n// Subscribe to files channel\nfinal realtime = Realtime(client);\nfinal subscription = realtime.subscribe(['files']);\n\nsubscription.stream.listen((response) {\n    if (response.events.contains('buckets.*.files.*.create')) {\n        // Log when a new file is uploaded\n        print(response.payload);\n    }\n});\n</code></pre>\n</div>\n\n<h2><a href=\"/docs/getting-started-for-flutter#nextSteps\" id=\"nextSteps\">Next Steps</a></h2>\n\n<p>Appwrite has many services and tools to help improve your app and speed up your development. The best way to learn how you can take advantage of them is to explore the different API references docs.</p>\n","metadata":{"source":"./appwrite-docs/getting-started-for-flutter.phtml"}}],[{"pageContent":"<?php\n$platforms = $this->getParam('platforms');\n$platform = [];\n\nforeach($platforms['client']['sdks'] ?? [] as $lang) {\n\n    $key = $lang['key'] ?? '';\n\n    if($key === 'web') {\n        $platform = $lang;\n        break;\n    }\n}\n\n$version = $platform['version'] ?? '';\n$demos = $platform['demos'] ?? [];\n?>\n<p>Appwrite is a development platform that provides a powerful API and management console to get your next project up and running quickly.</p>\n\n<p><a target=\"_blank\" rel=\"noopener\" href=\"https://cloud.appwrite.io/\">Create your first project now</a> and start building on Appwrite Cloud.</p>\n\n<h2><a href=\"/docs/getting-started-for-web#addPlatform\" id=\"addPlatform\">Add Your Web Platform</a></h2>\n\n<p>To init your SDK and interact with Appwrite services, you need to add a web platform to your project. To add a new platform, go to your Appwrite console, choose the project you created in the step before and click the 'Add Platform' button.</p>\n\n<p>From the options, choose to add a <b>web</b> platform and add your client app hostname. By adding your hostname to your project platform, you are allowing cross-domain communication between your project and the Appwrite API. Only web apps hosted on domains specified in a web platform will be able to make requests to your Appwrite instance, preventing unwanted access from malicious actors.</p>\n\n<p>Web platforms allow wildcard hostnames through a <span class=\"tag\">*</span> character. The wildcard character can be applied anywhere in a hostname, both <span class=\"tag\">*.example.com</span> and <span class=\"tag\">prod.*.example.com</span> are valid examples. Avoid using wildcards unless necessary to keep your Appwrite project secure.</p>\n\n<?php //TODO add console ui image here ?>\n\n<h2><a href=\"/docs/getting-started-for-web#getSDK\" id=\"getSDK\">Get Appwrite Web SDK</a></h2>\n\n<h3><a href=\"/docs/getting-started-for-web#npm\" id=\"npm\">NPM</a></h3>\n\n<p>Use <a href=\"https://npmjs.com\" target=\"_blank\">NPM (node package manager)</a> from your command line to add Appwrite SDK to your project.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>npm install appwrite</code></pre>\n</div>\n\n<p>When you're using a bundler (like <a href=\"http://browserify.org/\" target=\"_blank\" rel=\"noopener\">Browserify</a> or <a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"noopener\">Webpack</a>), import the Appwrite module when you need it:</p>\n\n<div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n    <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Account, ID } from 'appwrite';</code></pre>\n</div>\n\n<h3><a href=\"/docs/getting-started-for-web#cdn\" id=\"cdn\">CDN</a></h3>\n\n<p>To install with a CDN (content delivery network) add the following scripts to the bottom of your tag, but before you use any Appwrite services:</p>\n\n<div class=\"ide\" data-lang=\"html\" data-lang-label=\"HTML\">\n    <pre class=\"line-numbers\"><code class=\"prism language-markup\" data-prism><?php echo htmlentities('<script src=\"https://cdn.jsdelivr.net/npm/appwrite@'.$this->escape($version).'\"></script>\n<script>\n    const { Client, Account, ID } = Appwrite;\n    // Your code below...\n</script>'); ?></code></pre>\n</div>\n\n<h2><a href=\"/docs/getting-started-for-web#initSDK\" id=\"initSDK\">Init your SDK</a></h2>\n\n<p>Initialize your SDK code with your project ID which can be found in your project settings page.</p>\n\n<div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n    <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>const client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n</code></pre>\n</div>\n\n<h2><a href=\"/docs/getting-started-for-web#makeRequest\" id=\"makeRequest\">Make Your First Request</a></h2>\n\n<p>After your SDK configuration is set, access any of the Appwrite services and choose any request to send. Full documentation for any service method you would use is found in the SDK documentation or in the API References section.</p>\n\n<div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n                    <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>const account = new Account(client);\n\n// Register User\naccount.create(\n    ID.unique(),\n    'me@example.com',\n    'password',\n    'Jane Doe'\n).then(response => {\n    console.log(response);\n}, error => {\n    console.log(error);\n});</code></pre>\n</div>\n\n<h2><a href=\"/docs/getting-started-for-web#listenToChanges\" id=\"listenToChanges\">Listen to Changes</a></h2>\n\n<p>To listen to changes in realtime from Appwrite, subscribe to a variety of channels and receive updates within milliseconds. Full documentation for Realtime is found <a href=\"/docs/realtime\">here</a>.</p>\n\n<div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n                    <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>// Subscribe to files channel\nclient.subscribe('files', response => {\n    if(response.events.includes('buckets.*.files.*.create')) {\n        // Log when a new file is uploaded\n        console.log(response.payload);\n    }\n});</code></pre>\n</div>\n\n<h2><a href=\"/docs/getting-started-for-web#fullExample\" id=\"fullExample\">Full Example</a></h2>\n<div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n                    <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Account, ID } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nconst account = new Account(client);\n\n// Register User\naccount.create(\n    ID.unique(),\n    'me@example.com',\n    'password',\n    'Jane Doe'\n).then(response => {\n    console.log(response);\n}, error => {\n    console.log(error);\n});\n\n// Subscribe to files channel\nclient.subscribe('files', response => {\n    if(response.events.includes('buckets.*.files.*.create')) {\n        // Log when a new file is uploaded\n        console.log(response.payload);\n    }\n});</code></pre>\n</div>\n\n<h2><a href=\"/docs/getting-started-for-web#demos\" id=\"demos\">Demos</a></h2>\n\n<p>Below is a list of some demos to help you get started with Appwrite for Web using your favorite tools and framework of choice.</p>\n\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large text-size-small vertical\">\n        <thead>\n        <tr>\n            <th style=\"width: 80px\"></th>\n            <th style=\"width: 180px\">Demo</th>\n            <th>GitHub Repository</th>\n            <th style=\"width: 120px\"></th>\n        </tr>\n        </thead>\n        <tbody>\n        <?php foreach($demos as $demo):\n            $name = $demo['name'] ?? '';\n            $icon = $demo['icon'] ?? '';\n            $description = $demo['description'] ?? '';\n            $source = $demo['source'] ?? '';\n            $url = $demo['url'] ?? '';\n            $repo = str_replace('https://github.com/', '', $source);\n            ?>\n            <tr>\n                <td>\n                    <img src=\"/images-ee/platforms/<?php echo $icon; ?>\" alt=\"Logo\" height=\"30\" class=\"force-light sdk-logo margin-start margin-end\" />\n                    <img src=\"/images-ee/platforms/dark/<?php echo $icon; ?>\" alt=\"Logo\" height=\"30\" class=\"force-dark sdk-logo margin-start margin-end\" />\n                </td>\n                <td>\n                    <?php echo $name; ?>\n                </td>\n                <td>\n                    <a href=\"<?php echo $source; ?>\" target=\"_blank\" rel=\"noopener\"><?php echo $repo; ?></a>\n                </td>\n                <td>\n                    <a href=\"<?php echo $url; ?>\" target=\"_blank\" rel=\"noopener\">Live Example</a>\n                </td>\n            </tr>\n        <?php endforeach; ?>\n        </tbody>\n    </table>\n\n<h2><a href=\"/docs/getting-started-for-web#nextSteps\" id=\"nextSteps\">Next Steps</a></h2>\n\n<p>Appwrite has many services and tools to help improve your app and speed up your development. The best way to learn how you can take advantage of them is to explore the different API references docs.</p>\n","metadata":{"source":"./appwrite-docs/getting-started-for-web.phtml"}}],[{"pageContent":"<?php\n$platforms = $this->getParam('platforms');\n$versions = [];\n\nforeach($platforms['server']['sdks'] ?? [] as $lang) {\n    $key = $lang['key'] ?? '';\n    $version = $lang['version'] ?? '';\n\n    if(!empty($key)) {\n        $versions[$key] = $version;\n    }\n}\n\n$kotlinVersion = $versions['kotlin'] ?? '';\n$swiftVersion = $versions['swift'] ?? '';\n?>\n\n<p>Appwrite is a development platform that provides a powerful API and management console to get your next project up and running quickly.</p>\n\n<p><a target=\"_blank\" rel=\"noopener\" href=\"https://cloud.appwrite.io/\">Create your first project now</a> and start building on Appwrite Cloud.</p>\n\n<h2><a href=\"/docs/getting-started-for-server#getSDK\" id=\"getSDK\">Get the Appwrite SDK for Your Platform</a></h2>\n\n<p>We provide libraries and SDKs for major programming languages and platforms so you don't have to write code for interacting with our HTTP APIs from scratch.</p>\n\n<p>Choose your desired SDK corresponding to your product development platform and import it using the given package manager. <b>For the sake of this tutorial we use code examples using Appwrite SDKs for Node.js, PHP, Python, Ruby, Dart, and Deno, but the same can be applied to any of <a href=\"/docs/sdks#server\">our server side SDKs</a></b>.</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Node.js</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"bash\" data-lang-label=\"Bash\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>npm install node-appwrite --save</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>PHP</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"bash\" data-lang-label=\"Bash\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>composer require 'appwrite/appwrite'</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Python</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"bash\" data-lang-label=\"Bash\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>pip install appwrite</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Ruby</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"bash\" data-lang-label=\"Bash\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>gem install appwrite</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Deno</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"typescript\" data-lang-label=\"Deno SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-typescript\" data-prism>import * as sdk from \"https://deno.land/x/appwrite/mod.ts\";</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Dart</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"bash\" data-lang-label=\"Bash\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>dart pub add dart_appwrite</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Kotlin</h3>\n        <div>\n            <p>Add maven repositories to your <b>build.gradle(.kts)</b> file</p>\n            <div class=\"ide margin-top-small\" data-lang=\"groovy\" data-lang-label=\"Groovy\">\n                <pre class=\"line-numbers\"><code class=\"prism language-groovy\" data-prism>repositories {\n    mavenCentral()\n}</code></pre>\n            </div>\n            <p>Add Appwrite SDK under dependencies in your <b>build.gradle(.kts)</b> file</p>\n            <div class=\"ide margin-top-small\" data-lang=\"groovy\" data-lang-label=\"Groovy\">\n                <pre class=\"line-numbers\"><code class=\"prism language-groovy\" data-prism>dependencies {\n    implementation(\"io.appwrite:sdk-for-kotlin:<?php echo $this->escape($kotlinVersion); ?>\")\n}</code></pre>\n            </div>\n        </div>\n    </li>\n    <li>\n        <h3>Swift</h3>\n        <div>\n            <p>Add the Appwrite Swift SDK package as a dependency</p>\n            <div class=\"ide margin-top-small\" data-lang=\"swift\" data-lang-label=\"Swift\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>dependencies: [\n    .package(\n        name: \"Appwrite\",\n        url: \"https://github.com/appwrite/sdk-for-swift.git\",\n        .exact(\"<?php echo $this->escape($swiftVersion); ?>\")\n    )\n]</code></pre>\n            </div>\n            <p>Add the dependency product to your target</p>\n            <div class=\"ide margin-top-small\" data-lang=\"swift\" data-lang-label=\"Swift\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>dependencies: [\n    \"Appwrite\"\n]</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>.NET</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"csharp\" data-lang-label=\"C#\">\n            <pre class=\"line-numbers\"><code class=\"prism language-csharp\" data-prism>dotnet add package Appwrite</code></pre>\n        </div>\n    </li>\n</ul>\n\n<h2><a href=\"/docs/getting-started-for-server#createProject\" id=\"createProject\">Create Your First Appwrite Project</a></h2>\n\n<p>Go to your new Appwrite console and click the <i class=\"icon-plus\"></i> icon in the top navigation header or on the <b>'Create Project'</b> button on your console homepage. Choose a name for your project and click create to get started.</p>\n\n<h2><a href=\"/docs/getting-started-for-server#authentication\" id=\"authentication\">Authentication</a></h2>\n\n<p>The Appwrite server API provides you with two authentication methods. The first one uses an API key, and the second is using a JSON Web Token (JWT). Each method has different use cases, and you can use whichever fills your app needs.</p>\n\n<h3><a href=\"/docs/getting-started-for-server#apiKey\" id=\"apiKey\">API Key</a></h3>\n\n<p>Using an API Key you can interact with the Appwrite server API as an admin. You'll be able to access all of your project resources as long as your key has the relevant access scopes attached. To get your first API key, go to your appwrite console, choose the project you created in the step before and click the 'API Keys' link.</p>\n\n<p>Inside your API keys screen, click the 'Add API Key' button, choose your key name, for example: 'Demo Key', and select the scopes your key are granted to use. After complete, you could copy your new API Key and use it to initialize your Appwrite server SDK. To learn about the different API scopes available to you, read more about <a href=\"/docs/keys\">Appwrite API Keys</a> </p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Node.js</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"nodejs\" data-lang-label=\"Node.js SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>const { Client } = require('node-appwrite');\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your Appwrite Endpoint\n    .setProject('[PROJECT_ID]')                // Your project ID\n    .setKey('919c2db5d4...a2a3346ad2');         // Your secret API key\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>PHP</h3>\n\n        <div class=\"ide margin-top-small\" data-lang=\"php\" data-lang-label=\"PHP SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-php\" data-prism>use Appwrite\\Client;\n\n$client = (new Client())\n    ->setEndpoint('https://cloud.appwrite.io/v1') // Your Appwrite Endpoint\n    ->setProject('[PROJECT_ID]')                // Your project ID\n    ->setKey('919c2db5d4...a2a3346ad2');         // Your secret API key\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Python</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"python\" data-lang-label=\"Python SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-python\" data-prism>from appwrite.client import Client\n\nclient = Client()\n\nclient = (client\n    .set_endpoint('https://cloud.appwrite.io/v1') # Your API Endpoint\n    .set_project('[PROJECT_ID]')                # Your project ID\n    .set_key('919c2db5d4...a2a3346ad2')          # Your secret API key\n)\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Ruby</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"ruby\" data-lang-label=\"Ruby SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-ruby\" data-prism>require 'appwrite'\n\nclient = Appwrite::Client.new()\n    .set_endpoint('https://cloud.appwrite.io/v1') # Your API Endpoint\n    .set_project('[PROJECT_ID]')                # Your project ID\n    .set_key('919c2db5d4...a2a3346ad2')          # Your secret API key\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Deno</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"typescript\" data-lang-label=\"Deno SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-typescript\" data-prism>import { Client } from \"https://deno.land/x/appwrite/mod.ts\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your Appwrite Endpoint\n    .setProject('[PROJECT_ID]')                // Your project ID\n    .setKey('919c2db5d4...a2a3346ad2');         // Your secret API key\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Dart</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"dart\" data-lang-label=\"Dart SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:dart_appwrite/dart_appwrite.dart';\n\nClient client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your Appwrite Endpoint\n    .setProject('[PROJECT_ID]')                // Your project ID\n    .setKey('919c2db5d4...a2a3346ad2');         // Your secret API key\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Kotlin</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"kotlin\" data-lang-label=\"Kotlin SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\n\nval client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your Appwrite Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n    .setKey(\"919c2db5d4...a2a3346ad2\")          // Your secret API key\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Swift</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"swift\" data-lang-label=\"Swift SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your Appwrite Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n    .setKey(\"919c2db5d4...a2a3346ad2\")          // Your secret API key\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>.NET</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"csharp\" data-lang-label=\".NET SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-csharp\" data-prism>using Appwrite;\n\nvar client = new Client()\n  .SetEndpoint(\"http://cloud.appwrite.io/v1\")  // Your Appwrite Endpoint\n  .SetProject(\"[PROJECT_ID]\")               // Your project ID\n  .SetKey(\"919c2db5d4...a2a3346ad2\");                        // Your secret API Key</code></pre>\n        </div>\n    </li>\n</ul>\n\n<div class=\"notice\">\n    <h3>API Key Authentication</h3>\n    <p>When using Server SDKs, you authenticate with API keys. API keys are not restricted by account-based permissions but have restrictions on the types of resources that can be accessed. This means API keys can access all resources of specified types, regardless of which account can access them.</p>\n\n    <p><a href=\"/docs/keys\">Learn more about API keys</a></p>\n</div>\n\n<h3><a href=\"/docs/getting-started-for-server#jwt\" id=\"jwt\">JSON Web Token (JWT) &nbsp;<span class=\"text-size-small text-fade\">version >= 0.8</span></a></h3>\n\n<p>Using a JSON Web Token (JWT), you can interact with the Appwrite server API as a specific user. You'll be able to access only the relevant user resources and perform actions on his behalf.</p>\n\n<p>To create a JWT, you need to use the \"account->createJWT\" method using one of the Appwrite client SDKs. Before creating a token, you need to make sure your user is authenticated using the <span class=\"tag\">createSession</span> method or log in with an OAuth provider.</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web SDK</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>const account = new Account(client);\naccount.createJWT()\n    .then(function (response) {\n        console.log(response);\n    }, function (error) {\n        console.log(error);\n    });</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter SDK</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>Account account = Account(client);\n\nResponse user = await account.createJWT();\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android SDK</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>val account = Account(client)\n\nval response = account.createJWT()\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple SDK</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>let account = Account(client)\n\nlet response = try await account.createJWT()</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>After you get your valid token, you can pass it to your server and use it to initialize your Appwrite Server SDK and start making API calls. Your JWT is valid for a maximum time of 15 minutes or less if the user session has expired before that time.</p>\n\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Node.js</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"nodejs\" data-lang-label=\"Node.js SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>const { Client } = require('node-appwrite');\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your Appwrite Endpoint\n    .setProject('[PROJECT_ID]')                // Your project ID\n    .setJWT('919c2db5d4...a2a3346ad2');         // Your secret JWT\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>PHP</h3>\n\n        <div class=\"ide margin-top-small\" data-lang=\"php\" data-lang-label=\"PHP SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-php\" data-prism>use Appwrite\\Client;\n\n$client = (new Client())\n    ->setEndpoint('https://cloud.appwrite.io/v1') // Your Appwrite Endpoint\n    ->setProject('[PROJECT_ID]')                // Your project ID\n    ->setJWT('919c2db5d4...a2a3346ad2');         // Your secret JWT\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Python</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"python\" data-lang-label=\"Python SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-python\" data-prism>from appwrite.client import Client\n\nclient = Client()\n\nclient = (client\n    .set_endpoint('https://cloud.appwrite.io/v1') # Your API Endpoint\n    .set_project('[PROJECT_ID]')                # Your project ID\n    .set_key('919c2db5d4...a2a3346ad2')          # Your secret API key\n)\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Ruby</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"ruby\" data-lang-label=\"Ruby SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-ruby\" data-prism>require 'appwrite'\n\nclient = Client.new()\n    .set_endpoint('https://cloud.appwrite.io/v1') # Your API Endpoint\n    .set_project('[PROJECT_ID]')                # Your project ID\n    .set_key('919c2db5d4...a2a3346ad2')          # Your secret JWT\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Deno</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"typescript\" data-lang-label=\"Deno SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-typescript\" data-prism>import { Client } from \"https://deno.land/x/appwrite/mod.ts\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your Appwrite Endpoint\n    .setProject('[PROJECT_ID]')                // Your project ID\n    .setJWT('919c2db5d4...a2a3346ad2');         // Your secret JWT\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Dart</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"dart\" data-lang-label=\"Dart SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:dart_appwrite/dart_appwrite.dart';\n\nClient client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your Appwrite Endpoint\n    .setProject('[PROJECT_ID]')                // Your project ID\n    .setJWT('919c2db5d4...a2a3346ad2');         // Your secret JWT\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Kotlin</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"kotlin\" data-lang-label=\"Kotlin SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\n\nval client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your Appwrite Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n    .setJWT(\"919c2db5d4...a2a3346ad2\")          // Your secret JWT\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Swift</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"swift\" data-lang-label=\"Swift SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your Appwrite Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n    .setJWT(\"919c2db5d4...a2a3346ad2\")          // Your secret JWT\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>.NET</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"csharp\" data-lang-label=\".NET SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-csharp\" data-prism>using Appwrite;\n\nvar client = new Client()\n  .SetEndpoint(\"http://cloud.appwrite.io/v1\")  // Your Appwrite Endpoint\n  .SetProject(\"[PROJECT_ID]\")               // Your project ID\n  .SetJWT(\"919c2db5d4...a2a3346ad2\");                        // Your secret JWT\n</code></pre>\n        </div>\n    </li>\n</ul>\n\n<h2><a href=\"/docs/getting-started-for-server#makeRequest\" id=\"makeRequest\">Make Your First Request</a></h2>\n\n<p>After your SDK configuration is set, create any of the Appwrite service objects and choose any request to send. Full documentation for any service method you would like to use can be found in your SDK documentation or in the API References section.</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Node.js</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"nodejs\" data-lang-label=\"Node.js SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>const { ID, Users } = require('node-appwrite');\n\nconst users = new Users(client);\n\nlet promise = users.create(\n    ID.unique(),\n    'email@example.com',\n    null,\n    'password'\n);\n\npromise.then(function (response) {\n    console.log(response);\n}, function (error) {\n    console.log(error);\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>PHP</h3>\n\n        <div class=\"ide margin-top-small\" data-lang=\"php\" data-lang-label=\"PHP SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-php\" data-prism>use Appwrite\\ID;\nuse Appwrite\\Services\\Users;\n                \n$users = new Users($client);\n\n$user = $users->create(\n    userId: ID::unique(),\n    email: 'email@example.com',\n    phone: null,\n    password: 'password'\n);\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Python</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"python\" data-lang-label=\"Python SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-python\" data-prism>from appwrite.id import ID\nfrom appwrite.services.users import Users\n\nusers = Users(client)\n\nuser = users.create(\n    user_id=ID.unique(),\n    email='email@example.com',\n    phone=None,\n    password='password'\n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Ruby</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"ruby\" data-lang-label=\"Ruby SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-ruby\" data-prism>require 'appwrite'\n\nusers = Appwrite::Users.new(client)\n\nuser = users.create(\n    userId: ID.unique(),\n    email: 'email@example.com',\n    phone: nil,\n    password: 'password'\n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Deno</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"typescript\" data-lang-label=\"Deno SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-typescript\" data-prism>import { ID, Users } from \"https://deno.land/x/appwrite/mod.ts\";\n                \nconst users = new Users(client);\n\nlet promise = users.create(\n    ID.unique(),\n    'email@example.com',\n    null,\n    'password'\n);\n\npromise.then(function (response) {\n    console.log(response);\n}, function (error) {\n    console.log(error);\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Dart</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"dart\" data-lang-label=\"Dart SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:dart_appwrite/dart_appwrite.dart';\n\nfinal users = Users(client);\n\nfinal user = await users.create(\n    userId: ID.unique(),\n    email: 'email@example.com',\n    phone: null,\n    password: 'password'\n);</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Kotlin</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"kotlin\" data-lang-label=\"Kotlin SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.ID\nimport io.appwrite.services.Users\n\nval users = Users(client)\n\nval user = users.create(\n    userId = ID.unique(),\n    email = 'email@example.com',\n    phone = null,\n    password = 'password'\n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Swift</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"swift\" data-lang-label=\"Swift SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\nimport AppwriteModels\n                \nlet users = Users(client)\n\nlet user = try await users.create(\n    userId: ID.unique(),\n    email: \"email@example.com\",\n    phone: nil,\n    password: \"password\"\n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>.NET</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"csharp\" data-lang-label=\".NET SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-csharp\" data-prism>using Appwrite.Services;\nusing Appwrite.Models;\n\nvar users = new Users(client);\n\nvar user = await users.Create(\n    userId: ID.Unique(),\n    email: \"email@example.com\",\n    phone: null,\n    password: \"password\");</code></pre>\n        </div>\n    </li>\n</ul>\n\n<h2><a href=\"/docs/getting-started-for-server#fullExample\" id=\"fullExample\">Full Example</a></h2>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Node.js</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"nodejs\" data-lang-label=\"Node.js SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>const { Client, ID, Users } = require('node-appwrite');\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your Appwrite Endpoint\n    .setProject('[PROJECT_ID]')                // Your project ID\n    .setKey('919c2db5d4...a2a3346ad2');         // Your secret API key\n\nconst users = new Users(client);\n\nlet promise = users.create(\n    ID.unique(),\n    'email@example.com',\n    null,\n    'password'\n);\n\npromise.then(function (response) {\n    console.log(response);\n}, function (error) {\n    console.log(error);\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>PHP</h3>\n\n        <div class=\"ide margin-top-small\" data-lang=\"php\" data-lang-label=\"PHP SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-php\" data-prism>use Appwrite\\Client;\nuse Appwrite\\ID;\nuse Appwrite\\Services\\Users;\n\n$client = (new Client())\n    ->setEndpoint('https://cloud.appwrite.io/v1') // Your Appwrite Endpoint\n    ->setProject('[PROJECT_ID]')                // Your project ID\n    ->setKey('919c2db5d4...a2a3346ad2');         // Your secret API key\n\n$users = new Users($client);\n\n$user = $users->create(\n    userId: ID::unique(),\n    email: 'email@example.com',\n    phone: null,\n    password: 'password'\n);</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Python</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"python\" data-lang-label=\"Python SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-python\" data-prism>from appwrite.client import Client\nfrom appwrite.id import ID\nfrom appwrite.services.users import Users\n\nclient = Client()\n\nclient = (client\n    .set_endpoint('https://cloud.appwrite.io/v1') # Your API Endpoint\n    .set_project('[PROJECT_ID]')                # Your project ID\n    .set_key('919c2db5d4...a2a3346ad2')          # Your secret API key\n)\n\nusers = Users(client)\n\nuser = users.create(\n    user_id=ID.unique(),\n    email='email@example.com',\n    phone=None,\n    password='password'\n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Ruby</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"ruby\" data-lang-label=\"Ruby SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-ruby\" data-prism>require 'appwrite'\n\ninclude Appwrite\n\nclient = Client.new()\n    .set_endpoint('https://cloud.appwrite.io/v1') # Your API Endpoint\n    .set_project('[PROJECT_ID]')                # Your project ID\n    .set_key('919c2db5d4...a2a3346ad2')          # Your secret API key\n\nusers = Users.new(client)\n\nuser = users.create(\n    userId: ID.unique(),\n    email: 'email@example.com',\n    phone: nil,\n    password: 'password'\n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Deno</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"typescript\" data-lang-label=\"Deno SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-typescript\" data-prism>import { Client, ID, Users } from \"https://deno.land/x/appwrite/mod.ts\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your Appwrite Endpoint\n    .setProject('[PROJECT_ID]')                // Your project ID\n    .setKey('919c2db5d4...a2a3346ad2')          // Your secret API key\n\nconst users = new Users(client);\n\nlet promise = users.create(\n    ID.unique(),\n    'email@example.com',\n    null,\n    'password'\n);\n\npromise.then(function (response) {\n    console.log(response);\n}, function (error) {\n    console.log(error);\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Dart</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"dart\" data-lang-label=\"Dart SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:dart_appwrite/dart_appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your Appwrite Endpoint\n    .setProject('[PROJECT_ID]')                // Your project ID\n    .setKey('919c2db5d4...a2a3346ad2');         // Your secret API key\n\nfinal users = Users(client);\n\nfinal user = await users.create(\n    userId: ID.unique(),\n    email: 'email@example.com',\n    phone: null,\n    password: 'password'\n);</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Kotlin</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"kotlin\" data-lang-label=\"Kotlin SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.ID\nimport io.appwrite.services.Users\n\nval client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your Appwrite Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n    .setKey(\"919c2db5d4...a2a3346ad2\")          // Your secret API key\n\nval users = Users(client)\n\nval user = users.create(\n    userId = ID.unique(),\n    email = 'email@example.com',\n    phone = null,\n    password = 'password'\n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Swift</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"swift\" data-lang-label=\"Swift SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\nimport AppwriteModels\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your Appwrite Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n    .setKey(\"919c2db5d4...a2a3346ad2\")          // Your secret API key\n\nlet users = Users(client)\n\nlet user = try await users.create(\n    userId: ID.unique(),\n    email: \"email@example.com\",\n    phone: nil,\n    password: \"password\"\n)</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>.NET</h3>\n        <div class=\"ide margin-top-small\" data-lang=\"csharp\" data-lang-label=\".NET SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-csharp\" data-prism>using Appwrite;\nusing Appwrite.Services;\nusing Appwrite.Models;\n\nvar client = new Client()\n  .SetEndpoint(\"http://cloud.appwrite.io/v1\")    // Your Appwrite Endpoint\n  .SetProject(\"[PROJECT_ID]\")                 // Your project ID\n  .SetKey(\"cd868db89\");                         // Your secret API key\n\nvar users = new Users(client);\n\nvar user = await users.Create(\n    userId: ID.Unique(),\n    email: \"email@example.com\",\n    phone: null,\n    password: \"password\");</code></pre>\n        </div>\n    </li>\n</ul>\n\n<h2><a href=\"/docs/getting-started-for-server#nextSteps\" id=\"nextSteps\">Next Steps</a></h2>\n\n<p>Appwrite has many services and tools to help improve your app and speed up your development. The best way to learn how you can take advantage of them is to explore the different API references docs.</p>\n","metadata":{"source":"./appwrite-docs/getting-started-for-server.phtml"}}],[{"pageContent":"<p>Appwrite supports multiple protocols for accessing the server, including <a href=\"/docs/rest\">REST</a>, <a href=\"/docs/graphql\">GraphQL</a>, and <a href=\"/docs/realtime\">Realtime</a>.</p>\n\n<p>The GraphQL API allows you to query and mutate any resource type on your Appwrite server through the endpoint <code>/v1/graphql</code>. Every endpoint available through REST is available through GraphQL, except for OAuth.</p>\n\n<h2><a href=\"/docs/graphql#requests\" id=\"requests\">Requests</a></h2>\n\n<p>Although every query executes through the same endpoint, there are multiple ways to make a GraphQL request. All requests, however, share a common structure.</p>\n\n<table class=\"vertical full args\">\n    <thead>\n    <tr>\n        <td style=\"width: 140px\">Name</td>\n        <td style=\"width: 70px\"></td>\n        <td style=\"width: 120px\">Type</td>\n        <td>Description</td>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td data-title=\"Name: \">\n            query\n        </td>\n        <td data-title=\"\">\n            <span class=\"tag red\">required</span>\n        </td>\n        <td data-title=\"Type: \">\n            string\n        </td>\n        <td data-title=\"Description: \">\n            The GraphQL query to execute.\n        </td>\n    </tr>\n    <tr>\n        <td data-title=\"Name: \">\n            operationName\n        </td>\n        <td data-title=\"\">\n            <span class=\"tag\">optional</span>\n        </td>\n        <td data-title=\"Type: \">\n            string\n        </td>\n        <td data-title=\"Description: \">\n            If the query contains several named operations, controls which one to execute.\n        </td>\n    </tr>\n    <tr>\n        <td data-title=\"Name: \">\n            variables\n        </td>\n        <td data-title=\"\">\n            <span class=\"tag\">optional</span>\n        </td>\n        <td data-title=\"Type: \">\n            object\n        </td>\n        <td data-title=\"Description: \">\n            An object containing variable names and values for the query. Variables are made available to your query with the <code>$</code> prefix.\n        </td>\n    </tr>\n    </tbody>\n</table>\n\n<div class=\"notice\">\n  <h2>GraphQL Model Parameters</h2>\n\n  <p>In Appwrite's GraphQL API, all internal model parameters are prefixed with <code>_</code> instead of <code>$</code> because <code>$</code> is reserved by GraphQL.</p>\n\n  <p>For example, <code>$collectionId</code> in the REST API would be referenced as <code>_collectionId</code> in the GraphQL API.</p>\n\n</div>\n\n\n<h3><a href=\"/docs/graphql#get-requests\" id=\"get-requests\">GET Requests</a></h3>\n\n<p>You can execute a GraphQL query via a GET request, passing a <code>query</code> and optionally <code>operationName</code> and <code>variables</code> as query parameters.</p>\n\n<h3><a href=\"/docs/graphql#post-requests\" id=\"post-requests\">POST Requests</a></h3>\n\n<p>There are multiple ways to make a GraphQL POST request, differentiated by content type.</p>\n\n<h4>JSON</h4>\n\n<p>There are two ways to make requests with the <code>application/json</code> content type. You can send a JSON object containing a <code>query</code> and optionally <code>operationName</code> and <code>variables</code>, or an array of objects with the same structure.</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Object</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"json\" data-lang-label=\"JSON\">\n            <pre class=\"line-numbers\"><code class=\"prism language-json\" data-prism>{\n    \"query\": \"\",\n    \"operationName\": \"\",\n    \"variables\": {}\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Array</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"json\" data-lang-label=\"JSON\">\n            <pre class=\"line-numbers\"><code class=\"prism language-json\" data-prism>[\n    {\n        \"query\": \"\",\n        \"operationName\": \"\",\n        \"variables\": {}\n    }\n]</code></pre>\n        </div>\n    </li>\n</ul>\n\n<h4>GraphQL</h4>\n\n<p>The <code>application/graphql</code> content type can be used to send a query as the raw POST body.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n    <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>query GetAccount {\n    accountGet {\n        _id\n        email\n    }\n}</code></pre></div>\n\n<h4>Multipart Form Data</h4>\n\n<p>The <code>multipart/form-data</code> content type can be used to upload files via GraphQL. In this case, the form data must include the following parts in addition to the files to upload:</p>\n\n<table class=\"vertical full args\">\n    <thead>\n    <tr>\n        <td style=\"width: 140px\">Name</td>\n        <td style=\"width: 70px\"></td>\n        <td style=\"width: 120px\">Type</td>\n        <td>Description</td>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td data-title=\"Name: \">\n            operations\n        </td>\n        <td data-title=\"\">\n            <span class=\"tag red\">required</span>\n        </td>\n        <td data-title=\"Type: \">\n            string\n        </td>\n        <td data-title=\"Description: \">\n            JSON encoded GraphQL query and optionally operation name and variables. File variables should contain null values.\n        </td>\n    </tr>\n    <tr>\n        <td data-title=\"Name: \">\n            map\n        </td>\n        <td data-title=\"\">\n            <span class=\"tag red\">required</span>\n        </td>\n        <td data-title=\"Type: \">\n            string\n        </td>\n        <td data-title=\"Description: \">\n            JSON encoded map of form-data filenames to the operations dot-path to inject the file to, e.g. <code>variables.file</code>.\n        </td>\n    </tr>\n    </tbody>\n</table>\n\n<h2><a href=\"/docs/graphql#responses\" id=\"responses\">Responses</a></h2>\n\n<p>A response to a GraphQL request will have the following structure:</p>\n\n<table class=\"vertical full args\">\n    <thead>\n    <tr>\n        <td style=\"width: 140px\">Name</td>\n        <td style=\"width: 120px\">Type</td>\n        <td>Description</td>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td data-title=\"Name: \">\n            data\n        </td>\n        <td data-title=\"Type: \">\n            object\n        </td>\n        <td data-title=\"Description: \">\n            The data returned by the query, maps requested field names to their results.\n        </td>\n    </tr>\n    <tr>\n        <td data-title=\"Name: \">\n            errors\n        </td>\n        <td data-title=\"Type: \">\n            object[]\n        </td>\n        <td data-title=\"Description: \">\n            An array of errors that occurred during the request.\n        </td>\n    </tr>\n    </tbody>\n</table>\n\n<p>The data object will contain a map of requested field names to their results. If no data is returned, the object will not be present in the response.</p>\n\n<p>The errors array will contain error objects, each with their own <b>message</b> and <b>path</b>. The path will contain the field key that is null due to the error. If no errors occur, the array will not be present in the response.</p>\n\n<h2><a href=\"/docs/realtime#authentication\" id=\"authentication\">Authentication</a></h2>\n<p>GraphQL authenticates using Appwrite accounts and sessions. Both accounts and sessions can be created with GraphQL using the <code>accountCreate</code>, <code>accountCreateEmailSession</code>, <code>accountCreateAnonymousSession</code>, or <code>accountCreatePhoneSession</code> mutations.</p>\n\n<p>More information and examples of authenticating users can be found in the dedicated <a href=\"/docs/authentication\">authentication guide</a>.</p>\n\n<h2><a href=\"/docs/graphql#graphql-vs-rest\" id=\"graphql-vs-rest\">GraphQL vs REST</a></h2>\n\n<p>There are two main features that make GraphQL appealing when compared to the REST API: <b>selection sets</b> and <b>query batching.</b></p>\n\n<h3><a href=\"/docs/graphql#selection-sets\" id=\"selection-sets\">Selection Sets</a></h3>\n\n<p>Selection sets can be used to tell a GraphQL API exactly which fields of a particular resource you would like to receive in the response. The server will respond with only those fields, nothing more, nothing less. This gives you full control over what data comes into your application.</p>\n\n<p>For example, to retrieve only the email of a currently authenticated user, you could query the <code>accountGet</code> field, passing only email as the <b>field selection set</b>.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n    <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>query GetAccount {\n    accountGet {\n        _id\n        email\n    }\n}</code></pre></div>\n\n<p>Given this query, the GraphQL API will respond with:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"json\" data-lang-label=\"JSON\">\n    <pre class=\"line-numbers\"><code class=\"prism language-json\" data-prism>{\n    \"data\": {\n        \"accountGet\": {\n            \"_id\": \"...\",\n            \"email\": \"...\"\n        }\n    }\n}</code></pre></div>\n\n<p>This can be a useful feature for performance, network efficiency, and app responsiveness. As the processing happens on the server, the bandwidth consumed for the request can be dramatically reduced.</p>\n\n<h3><a href=\"/docs/graphql#query-batching\" id=\"query-batching\">Query Batching</a></h3>\n\n<p>GraphQL allows sending multiple queries or mutations in the same request. There are two different ways to batch queries. The simplest way is to include multiple fields in a single query <b>or</b> mutation.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n    <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>query GetAccountAndLocale {\n    accountGet {\n        _id\n        email\n    }\n    localeGet {\n        ip\n    }\n}</code></pre></div>\n\n<p>If both field executions succeed, the response will contain a data key for each field, containing the values of the selected fields.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"json\" data-lang-label=\"JSON\">\n    <pre class=\"line-numbers\"><code class=\"prism language-json\" data-prism>{\n    \"data\": {\n        \"accountGet\": {\n            \"_id\": \"...\",\n            \"email\": \"...\"\n        },\n        \"localeGet\": {\n            \"ip\": \"...\"\n        }\n    }\n}</code></pre></div>\n\n<p>If there was no authenticated user, the <code>accountGet</code> field would fail to resolve. In such a case the value of the data key for that field will be null, and an object will be added to the errors array instead.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"json\" data-lang-label=\"JSON\">\n    <pre class=\"line-numbers\"><code class=\"prism language-json\" data-prism>{\n    \"data\": {\n        \"accountGet\": null,\n        \"localeGet\": {\n            \"ip\": \"...\",\n            \"country\": \"...\"\n        }\n    },\n    \"errors\": [\n        {\n            \"message\": \"User (role: guest) missing scope (account)\",\n            \"path\": [\"accountGet\"]\n        }\n    ]\n}</code></pre></div>\n\n<p>Batching with a single query or mutation has some down-sides. You can not mix and match queries and mutations within the same request unless you provide an operationName, in which case you can only execute one query per request.</p>\n\n<p>Additionally, all <b>variables</b> must be passed in the same object, which can be cumbersome and hard to maintain.</p>\n\n<p>The second way to batch is to pass an array of queries or mutations in the request. In this way, you can execute queries <b>and</b> mutations and keep variables separated for each.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"json\" data-lang-label=\"JSON\">\n    <pre class=\"line-numbers\"><code class=\"prism language-json\" data-prism>[\n    {\n        \"query\": \"query GetAccount { accountGet{ email } }\",\n    },\n    {\n        \"query\": \"query GetLocale { localeGet { ip } }\"\n    }\n]</code></pre></div>\n\n<p>This allows you to execute complex actions in a single network request.</p>\n\n<h3><a href=\"/docs/graphql#sdk-usage\" id=\"sdk-usage\">SDK Usage</a></h3>\n\n<p>Appwrite SDKs also support GraphQL in addition to the REST services.</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Graphql } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your Appwrite Endpoint\n    .setProject('[PROJECT_ID]');                // Your project ID\n\nconst graphql = new Graphql(client);\n\nconst mutation = graphql.mutation({\n    query: `mutation CreateAccount(\n        $email: String!,\n        $password: String!,\n        $name: String\n    ) {\n        accountCreate(\n            email: $email,\n            password: $password,\n            name: $name,\n            userId: \"unique()\"\n        ) {\n            _id\n        }\n    }`,\n    variables: {\n        email: '...',\n        password: '...',\n        name: '...'\n    }\n});\n\nmutation.then(response => {\n    console.log(response);\n}).catch(error => {\n    console.log(error);\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n\n        <div class=\"ide margin-bottom\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1') // Your Appwrite Endpoint\n    .setProject('[PROJECT_ID]');               // Your project ID\n\nfinal graphql = Graphql(client);\n\nFuture mutation = graphql.mutation({\n    'query': '''mutation CreateAccount(\n        \\$email: String!,\n        \\$password: String!,\n        \\$name: String\n    ) {\n        accountCreate(\n            email: \\$email,\n            password: \\$password,\n            name: \\$name,\n            userId: \"unique()\"\n        ) {\n            _id\n        }\n    }''',\n    'variables': {\n        'email': '...',\n        'password': '...',\n        'name': '...'\n    }\n});\n\nmutation.then((response) {\n    print(response);\n}).catchError((error) {\n    print(error.message);\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"android\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Graphql\n\nval client = Client(context)\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nval graphql = Graphql(client)\n\ntry {\n    val response = graphql.mutation(mapOf(\n        \"query\" to \"\"\"mutation CreateAccount(\n            ${'$'}email: String!,\n            ${'$'}password: String!,\n            ${'$'}name: String\n        ) {\n            accountCreate(\n                email: ${'$'}email,\n                password: ${'$'}password,\n                name: ${'$'}name,\n                userId: \"unique()\"\n            ) {\n                _id\n            }\n        }\"\"\",\n        \"variables\" to mapOf(\n            \"email\" to \"...\",\n            \"password\" to \"...\",\n            \"name\" to \"...\"\n        )\n    ))\n\n    Log.d(javaClass.name, response)\n} catch (ex: AppwriteException) {\n    ex.printStackTrace()\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"apple\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\")                // Your project ID\n\nlet graphql = Graphql(client)\n\ndo {\n    let response = try await graphql.mutation([\n        \"query\": \"\"\"\n            mutation CreateAccount(\n                $email: String!,\n                $password: String!,\n                $name: String\n            ) {\n                accountCreate(\n                    email: $email,\n                    password: $password,\n                    name: $name,\n                    userId: \"unique()\"\n\n                ) {\n                    _id\n                }\n            }\n        \"\"\",\n        \"variables\": [\n            \"email\": \"...\",\n            \"password\": \"...\",\n            \"name\": \"...\"\n        ]\n    ])\n\n    print(String(describing: response))\n} catch {\n    print(error.localizedDescription)\n}</code></pre>\n        </div>\n    </li>\n</ul>","metadata":{"source":"./appwrite-docs/graphql.phtml"}}],[{"pageContent":"<?php\n$layout     = $this->getParam('layout', 'xxl');\n$sdk        = $this->getParam('sdk', '');\n$family     = $this->getParam('family', '');\n$title      = $this->getParam('title', '');\n$subtitle   = $this->getParam('subtitle', '');\n\n$clientSDK      = ($family === APP_PLATFORM_CLIENT && !empty($sdk)) ? '?sdk=' . $sdk : '';\n$serverSDK      = ($family === APP_PLATFORM_SERVER && !empty($sdk)) ? '?sdk=' . $sdk : '';\n\n$cols = [\n    'xxl' => ['nav' => 'span-3', 'main' => 'span-9'],\n    'xxxl' => ['nav' => 'span-2', 'main' => 'span-10'],\n]\n?>\n<div class=\"zone <?php echo $layout; ?> docs\" data-general-strech-value=\"<?php echo $layout; ?>\">\n    <div class=\"row responsive text-size-small\">\n        <div class=\"col <?php echo $cols[$layout]['nav']; ?>\">\n            <nav data-ui-highlight data-ls-ui-open>\n                <h2 class=\"margin-start-negative-tiny\"><i class=\"icon-menu\"></i><i class=\"icon-cancel\"></i> &nbsp; Table of contents</h2>\n\n                <ul class=\"margin-bottom\">\n                    <li><a href=\"/docs\">Home</a></li>\n                </ul>\n\n                <div class=\"margin-bottom-small\">\n                    <b class=\"text-size-small\">Getting Started</b>\n                </div>\n\n                <ul class=\"margin-bottom\">\n                    <!-- <li><a href=\"/docs/overview\">Overview</a></li> -->\n                    <li><a href=\"/docs/getting-started-for-web\">Appwrite for Web</a></li>\n                    <li><a href=\"/docs/getting-started-for-flutter\">Appwrite for Flutter</a></li>\n                    <li><a href=\"/docs/getting-started-for-apple\">Appwrite for Apple</a></li>\n                    <li><a href=\"/docs/getting-started-for-android\">Appwrite for Android</a></li>\n                    <li><a href=\"/docs/getting-started-for-server\">Appwrite for Server</a></li>\n                    <li>\n                        <a href=\"/docs/command-line\"><i class=\"icon-right-dir\"></i> Appwrite CLI</a>\n                        <ul class=\"margin-top-small margin-bottom-small\">\n                            <li>&nbsp;&nbsp;<a href=\"/docs/command-line-deployment\" data-selected=\"/docs/command-line\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i>Deployment</a></li>\n                            <li>&nbsp;&nbsp;<a href=\"/docs/command-line-commands\" data-selected=\"/docs/command-line\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i>Commands</a></li>\n                            <li>&nbsp;&nbsp;<a href=\"/docs/command-line-ci\" data-selected=\"/docs/command-line\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i>CI Mode</a></li>\n                        </ul>\n                    </li>\n                    <li><a href=\"/docs/sdks\">SDKs</a></li>\n                </ul>\n\n                <div class=\"margin-bottom-small\">\n                    <b class=\"text-size-small\">APIs</b>\n                </div>\n\n                <ul class=\"margin-bottom\">\n                    <li><a href=\"/docs/rest\">REST</a></li>\n                    <li><a href=\"/docs/graphql\">GraphQL</a></li>\n                    <li><a href=\"/docs/realtime\">Realtime</a></li>\n                </ul>\n\n                <div class=\"margin-bottom-small\">\n                    <b class=\"text-size-small\">References</b>\n                </div>\n\n                <ul class=\"margin-bottom\">\n                    <li><a href=\"/docs/client/account<?php echo $this->escape($clientSDK); ?>\">Account</a></li>\n                    <li><a href=\"/docs/server/users<?php echo $this->escape($serverSDK); ?>\">Users</a></li>\n                    <li><a href=\"/docs/client/teams<?php echo $this->escape($clientSDK); ?>\">Teams</a></li>\n                    <li><a href=\"/docs/client/databases<?php echo $this->escape($clientSDK); ?>\">Databases</a></li>\n                    <li><a href=\"/docs/client/storage<?php echo $this->escape($clientSDK); ?>\">Storage</a></li>\n                    <li><a href=\"/docs/client/functions<?php echo $this->escape($clientSDK); ?>\">Functions</a></li>\n                    <li><a href=\"/docs/client/locale<?php echo $this->escape($clientSDK); ?>\">Localization</a></li>\n                    <li><a href=\"/docs/client/avatars<?php echo $this->escape($clientSDK); ?>\">Avatars</a></li>\n                    <li><a href=\"/docs/server/health<?php echo $this->escape($serverSDK); ?>\">Health</a></li>\n                </ul>\n\n                <div class=\"margin-bottom-small\">\n                    <b class=\"text-size-small\">Guides</b>\n                </div>\n\n                <ul class=\"margin-bottom\">\n                    <li>\n                        <a href=\"/docs/databases\"><i class=\"icon-right-dir\"></i> Databases</a>\n                        <ul class=\"margin-top-small margin-bottom-small\">\n                            <li>&nbsp;&nbsp;<a href=\"/docs/databases-queries\" data-selected=\"/docs/databases\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i>Queries</a></li>\n                            <li>&nbsp;&nbsp;<a href=\"/docs/databases-pagination\" data-selected=\"/docs/databases\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i>Pagination</a></li>\n                            <li>&nbsp;&nbsp;<a href=\"/docs/databases-relationships\" data-selected=\"/docs/databases\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i>Relationships (Beta)</a></li>\n                        </ul>\n                    </li>                    \n                    <li><a href=\"/docs/storage\">Storage</a></li>\n                    <li>\n                        <a href=\"/docs/authentication\"><i class=\"icon-right-dir\"></i> Authentication</a>\n                        <ul class=\"margin-top-small margin-bottom-small\">\n                            <li>&nbsp;&nbsp;<a href=\"/docs/authentication-server\" data-selected=\"/docs/authentication\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i>Server Authentication</a></li>\n                            <li>&nbsp;&nbsp;<a href=\"/docs/authentication-security\" data-selected=\"/docs/authentication\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i>Security</a></li>                                                \n                        </ul>\n                    </li>\n                    <li><a href=\"/docs/functions\">Functions</a></li>\n                </ul>\n\n                <div class=\"margin-bottom-small\">\n                    <b class=\"text-size-small\">Advanced</b>\n                </div>\n\n                <ul class=\"margin-bottom\">\n                    <li><a href=\"/docs/keys\">API Keys</a></li>\n                    <li><a href=\"/docs/permissions\">Permissions</a></li>\n                    <li><a href=\"/docs/events\">Events</a></li>\n                    <li><a href=\"/docs/queries\">Queries</a></li>\n                    <li><a href=\"/docs/pagination\">Pagination</a></li>\n                    <li><a href=\"/docs/webhooks\">Webhooks</a></li>\n                    <li><a href=\"/docs/custom-domains\">Custom Domains</a></li>\n                    <li><a href=\"/docs/response-codes\">Response Codes</a></li>\n                    <li><a href=\"/docs/rate-limits\">Rate Limits</a></li>\n                    <li>\n                        <a href=\"/docs/self-hosting\"><i class=\"icon-right-dir\"></i> Self-Hosting</a>\n\n                        <ul class=\"margin-top-small margin-bottom-small\">\n                            <li>&nbsp;&nbsp;<a href=\"/docs/configuration\" data-selected=\"/docs/self-hosting\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> Configuration</a></li>\n                            <li>&nbsp;&nbsp;<a href=\"/docs/environment-variables\" data-selected=\"/docs/self-hosting\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> Env. Variables</a></li>\n                            <li>&nbsp;&nbsp;<a href=\"/docs/email-delivery\" data-selected=\"/docs/self-hosting\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> Email Delivery</a></li>\n                            <li>&nbsp;&nbsp;<a href=\"/docs/sms-delivery\" data-selected=\"/docs/self-hosting\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> SMS Delivery</a></li>\n                            <li>&nbsp;&nbsp;<a href=\"/docs/certificates\" data-selected=\"/docs/self-hosting\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> Certificates</a></li>\n                            <li>&nbsp;&nbsp;<a href=\"/docs/debugging\" data-selected=\"/docs/self-hosting\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> Debugging</a></li>\n                            <li>&nbsp;&nbsp;<a href=\"/docs/upgrade\" data-selected=\"/docs/self-hosting\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> Upgrade</a></li>\n                            <li>&nbsp;&nbsp;<a href=\"/docs/production\" data-selected=\"/docs/self-hosting\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> Production</a></li>\n                        </ul>\n                    </li>\n                </ul>\n            </nav>\n        </div>\n        <div class=\"col <?php echo $cols[$layout]['main']; ?>\">\n            <article>\n                <a href=\"/docs\" class=\"back\"><i class=\"icon-left-open\"></i> Docs</a>\n\n                <h1 class=\"margin-top-small margin-bottom\">\n                    <?php echo $this->escape($title); ?>\n\n                    <?php if (!empty($subtitle)) : ?>\n                        &nbsp;<span class=\"text-fade text-size-normal\">| <?php echo $this->escape($subtitle); ?></span>\n                    <?php endif; ?>\n                </h1>\n\n                <?php echo $this->exec($this->getParam('page', [])); ?>\n            </article>&nbsp;\n        </div>\n    </div>\n</div>","metadata":{"source":"./appwrite-docs/index.phtml"}}],[{"pageContent":"<?php\n$scopes = $this->getParam('scopes', );\n?>\n\n<p>Using your API Keys, you can access Appwrite services using the SDK of your choice. To create a new API key, go to your API keys tab in your project setting using your Appwrite console and click the 'Add API Key' button.</p>\n\n<p>When adding a new API Key, you can choose which scope to grant your application. If you need to replace your API Key, create a new key, update your app credentials and, once ready, delete your old key.</p>\n\n<div class=\"notice\">\n  <h2>Best Practice</h2>\n  <p>It is a best practice to grant only the scopes you need to meet your project's goals to an API key. API keys should be treated as a secret. Never share the API key and keep API keys out of client applications.</p>\n</div>\n\n<h2 id=\"scopes\">Scopes</h2>\n\n<table class=\"full text-size-small\">\n    <thead>\n    <tr>\n        <td style=\"width: 140px\">Name</td>\n        <td>Description</td>\n    </tr>\n    </thead>\n    <tbody>\n    <?php foreach ($scopes as $key => $scope):\n        $description = $scope['description'] ?? '';\n        ?>\n    <tr>\n        <td><?php echo $this->escape($key); ?></td>\n        <td><?php echo $this->escape($description); ?></td>\n    </tr>\n    <?php endforeach; ?>\n    </tbody>\n</table>","metadata":{"source":"./appwrite-docs/keys.phtml"}}],[{"pageContent":"<?php\n$clients = [\n    [\n        'title' => 'Getting Started for Web',\n        'description' => 'Build Web apps with Appwrite.',\n        'logo' => '/images/clients/web.png',\n        'link' => '/docs/getting-started-for-web',\n    ],\n    [\n        'title' => 'Getting Started for Flutter',\n        'description' => 'Build Flutter apps with Appwrite.',\n        'logo' => '/images/clients/flutter.png',\n        'link' => '/docs/getting-started-for-flutter',\n    ],\n    [\n        'title' => 'Getting Started for Apple',\n        'description' => 'Build iOS apps with Appwrite.',\n        'logo' => '/images/clients/apple.png',\n        'link' => '/docs/getting-started-for-apple',\n    ],\n    [\n        'title' => 'Getting Started for Android',\n        'description' => 'Build Android apps with Appwrite.',\n        'logo' => '/images/clients/android.png',\n        'link' => '/docs/getting-started-for-android',\n    ],\n    /*[\n        'title' => 'Unity',\n        'logo' => '/images/clients/unity.png',\n        'description' => 'Integrate Appwrite with your Unity project.',\n        'link' => '/docs/getting-started-for-unity',\n    ],*/\n    [\n        'title' => 'Getting Started for Servers',\n        'description' => 'Integrate Appwrite with your backend.',\n        'logo' => '/images/clients/servers.png',\n        'link' => '/docs/getting-started-for-server',\n    ],\n    [\n        'title' => 'Command Line',\n        'description' => 'Integrate Appwrite from your terminal or CI.',\n        'logo' => '/images/clients/terminal.png',\n        'link' => '/docs/command-line',\n    ],\n];\n\n$latestVersion = $this->getParam('latestVersion', 'latest');\n\n$getSpecsUrl = function($type, $platform) use ($latestVersion) {\n    // $type is 'swagger2' or 'open-api3'\n    // $platform is 'client' or 'server'\n\n    return 'https://github.com/appwrite/appwrite/blob/master/app/config/specs/' . $type . '-' . $latestVersion . '-' . $platform . '.json';\n}\n\n?>\n\n<div class=\"zone xxl\">\n\n    <p class=\"margin-bottom\">This documentation contains all the information you need to start building Web, Flutter, Android, or iOS apps with Appwrite. You can also review the complete and detailed API references to our services, tools, and features.</p>\n    \n    <div class=\"notice\">\n        <h2>Can't wait to get started?</h2>\n        <p><a target=\"_blank\" rel=\"noopener\" href=\"https://cloud.appwrite.io/\">Create your first project now</a> and start building on Appwrite Cloud.</p>\n    </div>\n\n    <h2 class=\"margin-bottom\">Overview</h2>\n\n    <p>Appwrite is a secure, open-source backend that abstracts the complexity of common, complex, and repetitive tasks required for building a modern app.</p>\n\n    <p>Appwrite provides you with a set of secure APIs, tools, and a management console UI to help you build your apps quickly without compromising security. Use Appwrite to add user authentication and management, data and file storage, run server-side code, image manipulation, localization, and more into your apps.</p>\n\n    <p>Appwrite adapts to your unique habits and needs. You can integrate Appwrite directly with your client app or use it alongside your existing backend server, using the language and technologies you're most comfortable with.</p>\n\n    <h2 class=\"margin-bottom\">Quickstart Tutorials</h2>\n\n    <div class=\"row responsive\">\n        <?php foreach ($clients as $i => $client): ?>\n        <div class=\"col span-6 sdk margin-bottom\">\n\n            <a href=\"<?php echo $this->escape($client['link']); ?>\" class=\"box padding-small clear\">\n\n                <img src=\"<?php echo $client['logo']; ?>\" alt=\"Logo\" class=\"avatar pull-start margin-end\" />\n\n                <div class=\"margin-bottom-tiny text-one-liner\"><?php echo $client['title']; ?></div>\n\n                <p class=\"note text-size-small margin-bottom-no text-one-liner\"><?php echo $client['description']; ?></p>\n            </a>\n\n        </div>\n        <?php if(($i+1) % 2 == 0): ?>\n    </div>\n    <div class=\"row responsive\">\n        <?php endif; ?>\n\n        <?php endforeach; ?>\n    </div>\n\n    <div class=\"margin-bottom-large\">\n        <h2 class=\"margin-bottom\">Explore Appwrite</h2>\n        <p>Appwrite provides all the core features of a modern backend. Explore Appwrite's features for <a href=\"/docs/authentication\">authentication</a>, <a href=\"/docs/databases\">databases</a>, <a href=\"/docs/storage\">file storage</a>, and executing server-side code with <a href=\"/docs/functions\">functions</a>.</p>\n        <p>Appwrite is technology-agnostic. You can integrate Appwrite with any of the <a href=\"/docs/sdks\">SDKs</a>, or directly with the <a href=\"/docs/rest\">REST</a> or <a href=\"/docs/graphql\">GraphQL</a> API.</p>\n        <p>You can also respond to events in real time with Appwrite's <a href=\"/docs/realtime\">Realtime API</a> or through <a href=\"/docs/webhooks\">webhooks</a>.</p>\n    </div>\n\n    <div class=\"margin-bottom-large\">\n        <h2 class=\"margin-bottom\">Contributing</h2>\n\n        <p>Are you looking to contribute to Appwrite? Our <a href=\"https://github.com/appwrite/appwrite/blob/master/CONTRIBUTING.md\" target=\"_blank\" rel=\"noopener\">contribution guide</a> has you covered. Want an SDK for a language we don't yet support? Check out the <a href=\"https://github.com/appwrite/sdk-generator\" target=\"_blank\" rel=\"noopener\">SDK generator</a> project. Also, have a look at our <a href=\"https://github.com/appwrite\" target=\"_blank\" rel=\"noopener\">GitHub organization</a> for all of our other projects.</p>\n    </div>\n\n    <div class=\"margin-bottom-large\">\n        <h2 class=\"margin-bottom\">Learn More</h2>\n        <p>Follow our <a href=\"https://dev.to/appwrite\" target=\"_blank\" rel=\"noopener\">blog</a> and subscribe to our newsletter to learn more about Appwrite and stay up-to-date with Appwrite's latest news and announcements. You can also join our <a href=\"https://appwrite.io/discord\" target=\"_blank\" rel=\"noopener\">Discord server</a>, where you can chat with fellow developers and get support from our team and community members.</p>\n    </div>\n</div>\n","metadata":{"source":"./appwrite-docs/main.phtml"}}],[{"pageContent":"<?php\n$models = $this->getParam('models', []);\n$model = $this->getParam('model', null);\n$rules = $model['properties'] ?? [];\n\n$markdown = new \\Parsedown();\n$markdown->setSafeMode(true);\n\n$example = function ($model, $models) use (&$example)\n{\n    $output = [];\n    $properties = $model['properties'] ?? [];\n\n    if(empty($properties)) {\n        return new \\stdClass();\n    }\n\n    foreach($properties as $key => $property) {\n        $value = $property['x-example'] ?? null;\n        $type = $property['type'] ?? null;\n        $isArray = $type == 'array';\n        $child = str_replace('#/definitions/', '', ($property['items']['$ref'] ?? ''));\n\n        // We consider anyOf and oneOf the same in docs views\n        $isXOf = false;\n        $xOfKey = null;\n\n        if(isset($property['items']['x-anyOf'])) {\n            $isXOf = true;\n            $xOfKey = 'x-anyOf';\n        }\n\n        if(isset($property['items']['x-oneOf'])) {\n            $isXOf = true;\n            $xOfKey = 'x-oneOf';\n        }\n\n        if(!empty($child) && \\array_key_exists($child, $models)) {\n            $childExample = $example($models[$child], $models);\n            $output[$key] = $isArray ? [$childExample] : $childExample;\n        }\n        else if($isXOf) {\n            if($isArray) {\n                $output[$key] = \\array_map(function($anyOfOption) use($example, $models) {\n                    $anyofChild = str_replace('#/definitions/', '', ($anyOfOption['$ref'] ?? ''));\n                    return $example($models[$anyofChild], $models);\n                }, $property['items'][$xOfKey]);\n            } else {\n                $model = $property['items'][$xOfKey][0];\n                $anyofChild = str_replace('#/definitions/', '', ($model['$ref'] ?? ''));\n                $output[$key] = $example($models[$anyofChild], $models);\n            }\n        }\n        else {\n            $output[$key] = $value;\n        }\n    }\n\n    return $output;\n};\n?>\n\n<h2>Properties</h2>\n\n<table class=\"vertical full args\">\n    <thead>\n    <tr>\n        <td style=\"width: 140px\">Name</td>\n        <td style=\"width: 120px\">Type</td>\n        <td>Description</td>\n    </tr>\n    </thead>\n    <tbody>\n    <?php foreach ($rules as $key => $rule):\n        $type = (isset($rule['type'])) ? $rule['type'] : '';\n        $array = ($rule['type'] === 'array') ? true : false;\n        $description = (isset($rule['description'])) ? $rule['description'] : '';\n        $required = (isset($rule['require'])) ? $rule['require'] : false;\n        $arrayType = (isset($rule['items']['type'])) ? $rule['items']['type'] : '';\n        $ref = (isset($rule['items']['$ref'])) ? str_replace('#/definitions/', '', $rule['items']['$ref']) : '';\n\n        // We consider anyOf and oneOf the same in docs views\n        $isXOf = false;\n        $xOfKey = null;\n\n        if(isset($rule['items']['x-anyOf'])) {\n            $isXOf = true;\n            $xOfKey = 'x-anyOf';\n        }\n\n        if(isset($rule['items']['x-oneOf'])) {\n            $isXOf = true;\n            $xOfKey = 'x-oneOf';\n        }\n        ?>\n        <tr>\n            <td data-title=\"Name: \">\n                <?php echo $this->escape($key); ?>\n            </td>\n            <td data-title=\"Type: \">\n                <?php if(\\array_key_exists($ref, $models)): ?>\n                    <a href=\"/docs/models/<?php echo $this->escape($ref); ?>\"><?php echo $this->escape($ref); ?><?php if($array): ?>[]<?php endif; ?></a>\n\n\n                <?php elseif($isXOf): ?>\n                    <?php\n                        if($array) {\n                            echo '<span>array of</span><br />';\n                        }\n                    ?>\n                    \n                    <?php\n                    echo \\implode('<br />', \\array_map(function($xOfRule) {\n                        $xOfRule = (isset($xOfRule['$ref'])) ? str_replace('#/definitions/', '', $xOfRule['$ref']) : '';\n                        return '<a href=\"/docs/models/' . $this->escape($xOfRule) . '\">' . $this->escape($xOfRule) . '</a>';\n                    }, $rule['items'][$xOfKey]));\n                    ?>\n                <?php else: ?>\n                    <?php if($array): ?>\n                        <?php echo $this->escape($arrayType); ?>[]\n                    <?php else: ?>\n                        <?php echo $this->escape($type); ?>\n                    <?php endif; ?>\n                <?php endif; ?>\n            </td>\n            <td data-title=\"<?php echo (!empty($description)) ? 'Description: ' : ''; ?>\"><?php echo $markdown->text($description); ?></td>\n        </tr>\n    <?php endforeach; ?>\n    </tbody>\n</table>\n\n<h2>Examples</h2>\n\n<p><b>JSON</b></p>\n\n<div class=\"ide\" data-lang=\"json\" data-lang-label=\"JSON\">\n    <pre class=\"line-numbers\"><code class=\"prism language-json\" data-prism><?php echo json_encode($example($model, $models), JSON_PRETTY_PRINT); ?></code></pre>\n</div>\n\n<!-- <p><b>YAML</b></p>\n\n<div class=\"ide\" data-lang=\"yaml\" data-lang-label=\"YAML\">\n    <pre class=\"line-numbers\"><code class=\"prism language-yaml\" data-prism><?php echo yaml_emit($example($model, $models)); ?></code></pre>\n</div> -->","metadata":{"source":"./appwrite-docs/models.phtml"}}],[{"pageContent":"<p>Appwrite is an end-to-end backend server that is aiming to abstract the complexity of common, complex, and repetitive tasks required for building a modern app.</p>\n\n<p>Appwrite provides you with a set of APIs, tools, and a management console UI to help you build your apps a lot faster and in a much more secure way. Between Appwrite different services, you can find user authentication and account management, user preferences, database and storage persistence, cloud functions, localization, image manipulation, and more.</p>\n\n<h3>Appwrite is Cross-Platform</h3>\n\n<p>Appwrite is both cross-platform and technology agnostic, meaning it can run on any operating system, coding language, or platform. Although Appwrite can easily fit the definition of serverless technology, it's designed to run well in multiple configurations. You can integrate Appwrite directly with your client app, use it behind your custom backend or alongside your backend server.</p>\n\n<p>There are many cases where Appwrite can be used as an alternative to your custom backend server, but it doesn't purport to replace your backend engineers. It would be best if you thought of Appwrite as a tool at your disposal that you can combine into your stack any way you see fit.</p>\n\n<h3>Appwrite was Designed for Security</h3>\n\n<p>Appwrite offers a lot of different services to help you get a better starting point to your projects, and we are continually adding new features and services that are all aiming to make developers' lives easier.</p>","metadata":{"source":"./appwrite-docs/overview.phtml"}}],[{"pageContent":"<p>\n    Pagination is the process of dividing data into discrete pages. In Appwrite, it is achieved by using an offset or a cursor, which both come with their own use case and benefits.\n</p>\n\n<h2><a href=\"/docs/pagination#offset-pagination\" id=\"offset-pagination\">Offset Pagination</a></h2>\n<p>\n    Using <code>Query.limit()</code> and <code>Query.offset()</code> you can achieve one of the most common approaches to pagination.\n    With <code>Query.limit()</code> you can define to how many documents that can be returned from one request.\n    The <code>Query.offset()</code> is simply the number of records you wish to skip before selecting records.\n</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Databases, Query } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')\n    .setProject('[PROJECT_ID]');\n\nconst databases = new Databases(client);\n                \n// Page 1\nconst page1 = await databases.listDocuments(\n    '[DATABASE_ID]',\n    '[COLLECTION_ID]',\n    [\n        Query.limit(25),\n        Query.offset(0)\n    ]\n);\n\n// Page 2\nconst page2 = await databases.listDocuments(\n    '[DATABASE_ID]',\n    '[COLLECTION_ID]',\n    [\n        Query.limit(25),\n        Query.offset(25)\n    ]\n);</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Flutter SDK\">\n        <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nvoid main() async {\n    final client = Client()\n        .setEndpoint('https://cloud.appwrite.io/v1')\n        .setProject('[PROJECT_ID]');\n\n    final databases = Databases(client);\n\n    final page1 = await databases.listDocuments(\n        databaseId: '[DATABASE_ID]',\n        collectionId: '[COLLECTION_ID]',\n        queries: [\n            Query.limit(25),\n            Query.offset(0)\n        ]\n    );\n\n    final page2 = await databases.listDocuments(\n        databaseId: '[DATABASE_ID]',\n        collectionId: '[COLLECTION_ID]',\n        queries: [\n            Query.limit(25),\n            Query.offset(25)\n        ]\n    );\n}\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.Query\nimport io.appwrite.services.Databases\n\nsuspend fun main() {\n    val client = Client(applicationContext)\n        .setEndpoint(\"https://cloud.appwrite.io/v1\")\n        .setProject(\"[PROJECT_ID]\")\n\n    val databases = Databases(client)\n\n    val page1 = databases.listDocuments(\n        databaseId = \"[DATABASE_ID]\",\n        collectionId = \"[COLLECTION_ID]\",\n        queries = [\n            Query.limit(25),\n            Query.offset(0)\n        ]\n    )\n\n    val page2 = databases.listDocuments(\n        databaseId = \"[DATABASE_ID]\",\n        collectionId = \"[COLLECTION_ID]\",\n        queries = [\n            Query.limit(25),\n            Query.offset(25)\n        ]\n    )\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\nimport AppwriteModels\n\nfunc main() async throws {\n    let client = Client()\n        .setEndpoint(\"https://cloud.appwrite.io/v1\")\n        .setProject(\"[PROJECT_ID]\")\n\n    let databases = Databases(client)\n\n    let page1 = try await databases.listDocuments(\n        databaseId: \"[DATABASE_ID]\",\n        collectionId: \"[COLLECTION_ID]\",\n        queries: [\n            Query.limit(25),\n            Query.offset(0)\n        ]\n    )\n\n    let page2 = try await databases.listDocuments(\n        databaseId: \"[DATABASE_ID]\",\n        collectionId: \"[COLLECTION_ID]\",\n        queries: [\n            Query.limit(25),\n            Query.offset(25)\n        ]\n    )\n}</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>\n    The request gets slower as the number of records increases because the database has to read up to the offset number of rows to know where it should start selecting data.\n    Also when there is data added in high frequency - the individual pages might skip results.\n</p>\n\n<h2><a href=\"/docs/pagination#cursor-pagination\" id=\"cursor-pagination\">Cursor Pagination</a></h2>\n<p>\n    The cursor is a unique identifier for a document that points to where the next page should start. After reading a page of documents, pass the last document's ID into the <code>Query.cursorAfter(lastId)</code> query method to get the next page of documents. Pass the first document's ID into the <code>Query.cursorBefore(firstId)</code> query method to retrieve the previous page.\n</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Databases, Query } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\")\n    .setProject(\"[PROJECT_ID]\");\n\nconst databases = new Databases(client);\n\n// Page 1\nconst page1 = await databases.listDocuments(\n    '[DATABASE_ID]',\n    '[COLLECTION_ID]',\n    [\n        Query.limit(25),\n    ]\n);\n\nconst lastId = page1.documents[page1.documents.length - 1].$id;\n\n// Page 2\nconst page2 = await databases.listDocuments(\n    '[DATABASE_ID]',\n    '[COLLECTION_ID]',\n    [\n        Query.limit(25),\n        Query.cursorAfter(lastId),\n    ]\n);</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Flutter SDK\">\n        <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nvoid main() async {\n    final client = Client()\n        .setEndpoint('https://cloud.appwrite.io/v1')\n        .setProject('[PROJECT_ID]');\n\n    final databases = Databases(client);\n\n    final page1 = await databases.listDocuments(\n        databaseId: '[DATABASE_ID]',\n        collectionId: '[COLLECTION_ID]',\n        queries: [\n            Query.limit(25)\n        ]\n    );\n\n    final lastId = page1.documents[page1.documents.length - 1].$id;\n\n    final page2 = await databases.listDocuments(\n        databaseId: '[DATABASE_ID]',\n        collectionId: '[COLLECTION_ID]',\n        queries: [\n            Query.limit(25),\n            Query.cursorAfter(lastId)\n        ]\n    );\n\n}\n</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import android.util.Log\nimport io.appwrite.AppwriteException\nimport io.appwrite.Client\nimport io.appwrite.Query\nimport io.appwrite.services.Databases\n\nsuspend fun main() {\n    val client = Client(applicationContext)\n        .setEndpoint(\"https://cloud.appwrite.io/v1\")\n        .setProject(\"[PROJECT_ID]\")\n\n    val databases = Databases(client)\n\n    val page1 = databases.listDocuments(\n        databaseId = \"[DATABASE_ID]\",\n        collectionId = \"[COLLECTION_ID]\",\n        queries = [\n            Query.limit(25)\n        ]\n    )\n\n    val lastId = page1.documents[page1.documents.size - 1].$id\n\n    val page2 = databases.listDocuments(\n        databaseId = \"[DATABASE_ID]\",\n        collectionId = \"[COLLECTION_ID]\",\n        queries = [\n            Query.limit(25),\n            Query.cursorAfter(lastId)\n        ]\n    )\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\nimport AppwriteModels\n\nfunc main() async throws {\n    let client = Client()\n      .setEndpoint(\"https://cloud.appwrite.io/v1\")\n      .setProject(\"[PROJECT_ID]\")\n\n    let databases = Databases(client)\n\n    let page1 = try await databases.listDocuments(\n        databaseId: \"[DATABASE_ID]\",\n        collectionId: \"[COLLECTION_ID]\",\n        queries: [\n            Query.limit(25)\n        ]\n    )\n\n    let lastId = page1.documents[page1.documents.count - 1].$id\n\n    let page2 = try await databases.listDocuments(\n        databaseId: \"[DATABASE_ID]\",\n        collectionId: \"[COLLECTION_ID]\",\n        queries: [\n            Query.limit(25),\n            Query.cursorAfter(lastId)\n        ]\n    )\n}</code></pre>\n        </div>\n    </li>\n</ul>\n\n<h2><a href=\"/docs/pagination#when-to-use-what\" id=\"when-to-use-what\">When to use what?</a></h2>\n<p>\n    The different scenarios in which offset or cursor pagination make the most sense depends on the data itself and how often new records are added.\n    When querying static data, the performance cost alone may not be enough for you to use a cursor, as the added complexity that comes with it may be more than you need.\n</p>\n<p>\n    <b>Offset pagination</b> should be used for static data with an indicator to what is the current page and how many pages are available in total. For example a list with up to 20 pages or static data like a list of countries or currencies.\n</p>\n<p>\n    <b>Cursor pagination</b> should be used high-frequency data which is lazy-loaded with infinite scrolling. For example a feed, comment section, chat history or high volume datasets.\n</p>","metadata":{"source":"./appwrite-docs/pagination.phtml"}}],[{"pageContent":"<p>The Appwrite API roles and permissions allow you to manage read and write access across your app different resources such as database documents and storage files.</p>\n\n<p>While roles define access to entire services or API endpoints, permissions are used to manage read and write access to specific resources such as database documents or storage files.</p>\n\n<h2 id=\"roles\">Roles</h2>\n\n<p>Appwrite currently has 6 different roles aimed to handle access control to specific API endpoints or entire services.</p>\n\n<p>You can review Appwrite API references to see which role is needed in order to gain access to a specific API endpoint or service.</p>\n\n<p>For example, only users with a guest role can access authentication endpoints while access to member users is denied.</p>\n\n<p>You can change your project members' roles from your project settings in the Appwrite console.</p>\n\n<table class=\"full\">\n    <thead>\n    <tr>\n        <td style=\"width: 80px\">ID</td>\n        <td style=\"width: 120px\">Name</td>\n        <td>Description</td>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>0</td>\n        <td>Guest</td>\n        <td>Any user that has not been authenticated is given this role.</td>\n    </tr>\n    <tr>\n        <td>1</td>\n        <td>Member</td>\n        <td>Any user that has successfully authenticated using one of the authentication endpoints is given this role.</td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>Admin</td>\n        <td>Referred to a user granted this with this role in your Appwrite project console. This role is only available in <a href=\"/docs/mods\">admin mode</a></td>\n    </tr>\n    <tr>\n        <td>3</td>\n        <td>Developer</td>\n        <td>Referred to a user granted this with this role in your Appwrite project console. This role is only available in <a href=\"/docs/mods\">admin mode</a></td>\n    </tr>\n    <tr>\n        <td>4</td>\n        <td>Owner</td>\n        <td>Referred to a user granted this with this role in your Appwrite project console. This role is only available in <a href=\"/docs/mods\">admin mode</a></td>\n    </tr>\n    <tr>\n        <td>5</td>\n        <td>App</td>\n        <td>This role is given to your API key. This role is only available in <a href=\"/docs/mods\">admin mode</a></td>\n    </tr>\n    </tbody>\n</table>\n\n<h2 id=\"permissions\">Permissions</h2>\n\n<p>Appwrite permissions are more specific than its roles. Permissions are aimed to help you manage read and write access control to specific resource rather than entire endpoints or services.</p>\n\n<p>Using permissions you can decide that only users X and Y will have read access to a specific database document, while user Z will be the only one with write access.</p>\n\n<p>Permission can be given to specific users, entire teams or only to a specific group of users inside a team.</p>\n\n\n<table class=\"full\">\n    <thead>\n    <tr>\n        <td style=\"width: 160px\">Type</td>\n        <td>Description</td>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>*</td>\n        <td>Wildcard permission. Gives anyone read or write access.</td>\n    </tr>\n    <tr>\n        <td>user:[USER_ID]</td>\n        <td>Access to a specific user by his UID.</td>\n    </tr>\n    <tr>\n        <td>team:[TEAM_ID]</td>\n        <td>Access to any member of the specific team. To gain access to this permission, user must be the team creator (owner), or receive and accept an invitation from a team member to join this team.</td>\n    </tr>\n\n    <tr>\n        <td>member:[MEMBER_ID]</td>\n        <td>Access to a specific member of a team. This permission will only be valid while user is still an active member of a team. To view user member ID fetch the team <a href=\"/docs/client/teams\">members list</a>.</td>\n    </tr>\n    <tr>\n        <td>role:[ROLE_ID]</td>\n        <td>Access to a user with a specific role. For Example: 'role:4' will give access only to project owners. View the roles table above to learn more about different roles in the platform.</td>\n    </tr>\n    </tbody>\n</table>","metadata":{"source":"./appwrite-docs/permissions-old.phtml"}}],[{"pageContent":"<p>Appwrite permission mechanism offers a simple, yet flexible way to manage which users, teams, or roles can access a specific resource in your project, like documents and files.</p>\n\n<p>Using permissions, you can decide that only <span class=\"tag\">user A</span> and <span class=\"tag\">user B</span> will have read and update access to a specific database document, while <span class=\"tag\">user C</span> and <span class=\"tag\">team X</span> will be the only ones with delete access.</p>\n\n<p>As the name suggests, read permission allows a user to read a resource, create allows users to create new resources, update allows a user to make changes to a resource, and delete allows the user to remove the resource.</p>\n\n<p>All permissions can be granted to individuals or groups of users, entire teams, or only to team members with a specific role. Permission can also be granted based on authentication status such as to all users, only authenticated users, or only guest users.</p>\n\n<p>A project user can only grant a resource with permissions that they own. For example, if a user is trying to share a document with a team that they are not a member of, they will encounter a 401 not authorized error. If your app needs users to grant access to teams they're not a member of, you can create Appwrite Functions with a <a href=\"/docs/getting-started-for-server\">Server SDK</a> to achieve this functionality.</p>\n\n<div class=\"notice calm margin-top-large margin-bottom-large\">\n    <h4>Appwrite Resource</h4>\n    \n    <p>An Appwrite resource can be a database, collection, document, bucket, or file. Each resource has its own set of permissions to define who can interact with it.</p>\n\n    <p>Using the Appwrite permissions mechanism, you can grant resource access to users, teams, and members with different roles.</p>\n</div>\n\n<h2 id=\"default-values\"><a href=\"/docs/permissions#default-values\">Default Values</a></h2>\n\n<p>If you create a resource using a Server SDK or the Appwrite console without explicit permissions, no one can access it by default because the permissions will be empty. If you create a resource using a Client SDK without explicit permissions, the creator will be granted read, update, and delete permissions on that resource by default.</p>\n\n<h2 id=\"server-integration\"><a href=\"/docs/permissions#server-integration\">Server Integration</a></h2>\n\n<p>Server integrations can be used for increased flexibility. When using a Server SDK in combination with the proper <a href=\"/docs/keys#scopes\">API key scopes</a>, you can have any type of access to any of your project resources regardless of their permissions.</p>\n\n<p>Using the server integration flexibility, you can change resource permissions, share resources between different users and teams, or edit and delete them without any limitations.</p>\n\n<h2 id=\"permission-types\"><a href=\"/docs/permissions#permission-types\">Permission Types</a></h2>\n<p>In Client and Server SDKs, you will find a <b>Permission</b> class with helper methods for each role described below.</p>\n<table class=\"full text-size-small\">\n    <thead>\n    <tr>\n        <td style=\"width: 200px\">Type</td>\n        <td>Description</td>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>Permission.read()</td>\n        <td>Access to read a resource.</td>\n    </tr>\n    <tr>\n        <td>Permission.create()</td>\n        <td>Access to create new resources. Does not apply to files or documents. Applying this type of access to files or documents results in an error.</td>\n    </tr>\n    <tr>\n        <td>Permission.update()</td>\n        <td>Access to change a resource, but not remove or create new resources. Does not apply to functions.</td>\n    </tr>\n    <tr>\n        <td>Permission.delete()</td>\n        <td>Access to remove a resource. Does not apply to functions.</td>\n    </tr>\n    <tr>\n        <td>Permission.write()</td>\n        <td>Alias to grant create, update, and delete access for collections and buckets and update and delete access for documents and files.</td>\n    </tr>\n    </tbody>\n</table>\n\n\n<h2 id=\"permission-roles\"><a href=\"/docs/permissions#permission-roles\">Permission Roles</a></h2>\n<p>In Client and Server SDKs, you will find a <b>Role</b> class with helper methods for each role described below.</p>\n<table class=\"full text-size-small\">\n    <thead>\n    <tr>\n        <td style=\"width: 200px\">Type</td>\n        <td>Description</td>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>Role.any()</td>\n        <td>Grants access to anyone.</td>\n    </tr>\n    <tr>\n        <td>Role.guests()</td>\n        <td>Grants access to any guest user without a session. Authenticated users don't have access to this role.</td>\n    </tr>\n    <tr>\n        <td>Role.users([STATUS])</td>\n        <td>Grants access to any authenticated or anonymous user. You can optionally pass the <span class=\"tag\">verified</span> or <span class=\"tag\">unverified</span> string to target specific types of users.</td>\n    </tr>\n    <tr>\n        <td>Role.user([USER_ID], [STATUS])</td>\n        <td>Grants access to a specific user by user ID. You can optionally pass the <span class=\"tag\">verified</span> or <span class=\"tag\">unverified</span> string to target specific types of users.</td>\n    </tr>\n    <tr>\n        <td>Role.team([TEAM_ID])</td>\n        <td>Grants access to any member of the specific team. To gain access to this permission, the user must be the team creator (owner), or receive and accept an invitation to join this team.</td>\n    </tr>\n    <tr>\n        <td>Role.team([TEAM_ID], [ROLE])</td>\n        <td>Grants access to any member who possesses a specific role in a team. To gain access to this permission, the user must be a member of the specific team and have the given role assigned to them. Team roles can be assigned when inviting a user to become a team member.</td>\n    </tr>\n    <tr>\n        <td>Role.member([MEMBERSHIP_ID])</td>\n        <td>Grants access to a specific member of a team. When the member is removed from the team, they will no longer have access.</td>\n    </tr>\n    </tbody>\n</table>\n\n<h2 id=\"examples\"><a href=\"/docs/permissions#examples\">Examples</a></h2>\n\n<p>The examples below will show you how you can use the different Appwrite permissions to manage access control to your project resources.</p>\n\n<p>The following examples are using the <a href=\"https://github.com/appwrite/sdk-for-js\" target=\"_blank\" rel=\"noopener\">Appwrite Web SDK</a> but can be applied similarly to any of the other <a href=\"/docs/sdks\">Appwrite SDKs</a>.</p>\n\n<h3 id=\"example-1\"><a href=\"/docs/permissions#example-1\">Example #1 - Basic Usage</a></h3>\n\n<p>In the following example, we are creating a document that can be read by anyone, edited by writers or admins, and deleted by administrators or a user with the user ID <span class=\"tag\">user:5c1f88b42259e</span>.</p>\n\n<div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n    <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Databases, Permission, Role } from \"appwrite\";\n        \nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')\n    .setProject('[PROJECT_ID]');\n\nconst databases = new Databases(client);\n\nlet promise = databases.createDocument(\n    '[DATABASE_ID]',\n    '[COLLECTION_ID]',\n    {'actorName': 'Chris Evans', 'height': 183},\n    [\n        Permission.read(Role.any()),                  // Anyone can view this document\n        Permission.update(Role.team(\"writers\")),      // Writers can update this document\n        Permission.update(Role.team(\"admin\")),       // Admins can update this document\n        Permission.delete(Role.user(\"5c1f88b42259e\")) // User 5c1f88b42259e can delete this document\n        Permission.delete(Role.team(\"admin\"))         // Admins can delete this document\n    ]\n);\n\npromise.then(function (response) {\n    console.log(response);\n}, function (error) {\n    console.log(error);\n});</code></pre>\n</div>\n\n<h3 id=\"example-2\"><a href=\"/docs/permissions#example-2\">Example #2 - Team Roles</a></h3>\n\n<p>In the following example, we are creating a document that can be read by members of the team with ID <span class=\"tag\">5c1f88b87435e</span> and can only be edited or deleted by members of the same team that possess the team role <span class=\"tag\">owner</span>.</p>\n\n<div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n    <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Databases, Permission, Role } from \"appwrite\";\n        \nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')\n    .setProject('[PROJECT_ID]');\n\nconst databases = new Databases(client);\n\nlet promise = databases.createDocument(\n    '[DATABASE_ID]',\n    '[COLLECTION_ID]',\n    {'actorName': 'Chris Evans', 'height': 183},\n    [\n        Permission.read(Role.team(\"5c1f88b87435e\")),            // Only users of team 5c1f88b87435e can read the document\n        Permission.update(Role.team(\"5c1f88b87435e\", \"owner\")), // Only users of team 5c1f88b87435e with the role owner can update the document\n        Permission.delete(Role.team(\"5c1f88b87435e\", \"owner\")   // Only users of team 5c1f88b87435e with the role owner can delete the document\n    ]\n);\n\npromise.then(function (response) {\n    console.log(response);\n}, function (error) {\n    console.log(error);\n});</code></pre>\n</div>\n","metadata":{"source":"./appwrite-docs/permissions.phtml"}}],[{"pageContent":"<p>Appwrite's default setup is designed to help you start building with Appwrite quickly. To succeed with Appwrite in a production environment, you should follow a few basic concepts and best practices. This document assumes you have some basic understanding of Docker and Docker Compose command-line tools.</p>\n\n<h2><a href=\"/docs/production#encryption\" id=\"encryption\">Encryption</a></h2>\n\n<p>Appwrite does not generate a unique encryption key during a default setup. This key encrypts your files and sensitive data like webhook passwords or API keys to keep them secure. To take advantage of this feature, you must generate a unique key and set it as the value of the <code>_APP_OPENSSL_KEY_V1</code> environment variable.</p>\n\n<p>You <b>must</b> set <code>_APP_OPENSSL_KEY_V1</code> immediately after installation of a production Appwrite instance. Changing the <code>_APP_OPENSSL_KEY_V1</code> variable will cause the loss of existing passwords, OAuth secrets, and API keys.</p>\n\n<p>Make sure to keep this key in a safe place and never make it publicly accessible.</p>\n\n<div class=\"notice\">\n  <h2>Best Practice</h2>\n  <p>You should always prefer <b>HTTPS</b> over HTTP in production environments. This keeps your APIs secure and prevents any redirects from interfering with your requests. You can force the use of HTTPS with the <a href=\"/docs/environment-variables#general\">_APP_OPTIONS_FORCE_HTTPS</a> environment variable.</p>\n</div>\n\n<h2><a href=\"/docs/production#limitConsoleAccess\" id=\"limitConsoleAccess\">Limit Console Access</a></h2>\n\n<p>Appwrite provides three different methods to limit access to your Appwrite console.</p>\n\n<ol class=\"margin-top margin-bottom-large text-size-normal\">\n    <li>Whitelist a group of developers by IP using the <code>_APP_CONSOLE_WHITELIST_IPS</code> environment variable.</li>\n    <li>Whitelist a group of developers by email using the <code>_APP_CONSOLE_WHITELIST_EMAILS</code> environment variable.</li>\n    <li>Only the root user can signup. All other developers must be added through invitations. This is configured using the <code>_APP_CONSOLE_WHITELIST_ROOT</code> environment variable.</li>\n</ol>\n\n<p>By default, only the first user can sign up on the Appwrite instance's dashboard. All other users must be added to the dashboard through invitation.</p>\n\n<p>\n<a href=\"/docs/environment-variables\"><i class=\"icon-angle-circled-right\"></i>Learn more about environment variables</a>\n</p>\n\n<h2><a href=\"/docs/production#scaling\" id=\"scaling\">Scaling</a></h2>\n\n<p>Appwrite is built with scalability in mind. Appwrite can scale both horizontally and vertically.</p>\n\n<p>Each Appwrite instance is composed of many containers, each with its unique job. Appwrite's functions and worker containers are stateless. To scale them, all you need is to replicate them and set up a load balancer to distribute their load.</p>\n\n<p>If you decide to set up a load balancer to scale a container, make sure <b>all</b> communication are routed through the load balancer and not directly to the replicated containers. You can configure communicating between Appwrite containers using Docker environment variables.</p>\n\n<p>Three Appwrite containers are stateful. The MariaDB, Redis, and InfluxDB containers are used for storing data, cache and pub/sub messaging, and usage stats, respectively. To scale these containers, set up a standard cluster (same as you would with any other app using these technologies) according to your needs and performance.</p>\n\n<h2><a href=\"/docs/production#disable-limits\" id=\"disable-limits\">Enable Rate Limits</a></h2>\n<p>If you disabled rate limits during development, make sure you re-enable them when moving to production environments. Rate limiting can be enabled by setting the <code>_APP_OPTIONS_ABUSE</code> environment variable to <code>enabled</code>.</p>\n\n<p>Rate limits are an important mechanism to protect your app. Without rate limits, malicious actors can spam your APIs to perform <a href=\"https://en.wikipedia.org/wiki/Denial-of-service_attack\" target=\"_blank\" rel=\"noopener\">denial-of-service type attacks</a> or brute-force user passwords.</p>\n\n<p>\n<a href=\"/docs/environment-variables\"><i class=\"icon-angle-circled-right\"></i>Learn more about environment variables</a>\n</p>\n\n<h2><a href=\"/docs/production#emails\" id=\"emails\">Emails</a></h2>\n<p>Sending emails is hard. There are a lot of spam rules and configurations to master in order to set up a functional SMTP server. While it is okay to use a self-hosted SMTP server during development, you should use a third-party SMTP provider for production so your email doesn't get labeled as spam.</p>\n<p>You can <a href=\"/docs/email-delivery\">change Appwrite's SMTP settings</a> and credentials to any 3rd party provider you like that supports SMTP integration using our Docker environment variables. Most SMTP providers offer a decent free tier to get started with.</p>\n\n<h2><a href=\"/docs/production#backups\" id=\"backups\">Backups</a></h2>\n\n<p>Backups are highly recommended for any production environment. Currently, there is no built-in script we provide to do this automatically. You must do the following to back up your Appwrite server data, stats, and files.</p>\n\n<ol class=\"margin-top margin-bottom-large text-size-normal\">\n    <li>Create a script to back up and restore the databases holding your Appwrite schemas. Note that trying to back up the database containers using a docker volume backup can result in a corrupted copy of your data. We recommend using the databases' built-in tools for this.</li>\n    <li>Create a script to back up and restore your InfluxDB stats. If you don't care much about your server stats, you can skip this.</li>\n    <li>Create a script to back up Appwrite storage volume. There are many online resources explaining different ways to backup a docker volume. When running on multiple servers, it is very recommended to use an attachable storage point. Some cloud providers offer integrated backups to such attachable mount like GCP, AWS, DigitalOcean, and the list continues.</li>\n    <li>Create a script to back up <code>.env</code> and <code>docker-compose.yml</code>, which holds secrets and server configuration information.</li>\n</ol>\n\n<div class=\"notice\">\n  <h2>Docker Volume Backups</h2>\n  <p>Do not back up any stateful container using a docker volume backup, such as databases, Redis, or InfluxDB containers. This can result in corruption and <b>permanent data loss</b>.</p>\n</div>\n\n<h2><a href=\"/docs/production#errorReporting\" id=\"errorReporting\">Error Reporting</a></h2>\n\n<p>By default, your Appwrite installation comes with error reporting turned off. You can <a href=\"/docs/debugging#devMode\">enable dev mode</a> to get access to more verbose error logs and stack traces.</p>\n\n<p>In production, it is highly recommended to turn error reporting off. To do so, make sure the Appwrite container environment variable <code>_APP_ENV</code> value from is set to <code>production</code> and not <code>development</code>.</p>\n\n<p>To monitor errors in production, add a third party monitoring service by setting the <code>_APP_LOGGING_PROVIDER</code> and <code>_APP_LOGGING_CONFIG</code>.\n\n<p>In production, it is highly recommended to turn error reporting off. To do so, make sure the Appwrite container environment variable <code>_APP_ENV</code> is set to <code>production</code> and not <code>development</code>.</p>\n\n<p>\n<a href=\"/docs/environment-variables\"><i class=\"icon-angle-circled-right\"></i>Learn more about environment variables</a>\n</p>","metadata":{"source":"./appwrite-docs/production.phtml"}}],[{"pageContent":"<p>Many list endpoints in Appwrite allow you to filter, sort, and paginate results using queries. Appwrite provides a common set of syntax to build queries.</p>\n\n<h2><a href=\"/docs/queries#query-compatibility\" id=\"queryable-compatibility\">Query Compatibility</a></h2>\n<p>Each list endpoint supports different query operations. You can find the supported query methods and attributes in the <b>References</b> section of the Appwrite documentation.</p>\n\n<h2><a href=\"/docs/queries#query-class\" id=\"query-class\">Query Class</a></h2>\n<p>Appwrite SDKs provide a <code>Query</code> class to help you build queries. The <code>Query</code> class has a method for each type of supported query.</p>\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large\">\n    <thead>\n        <tr>\n            <th style=\"width: 100px\">Query Method</th>\n            <th>SDK Method Example</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Select</td>\n            <td><code>Query.select([\"name\", \"title\"])</code></td>\n            <td>Select which attributes should be returned from a document.</td>\n        </tr>\n        <tr>\n            <td>Equal</td>\n            <td><code>Query.equal(\"title\", [\"Iron Man\"])</code></td>\n            <td>Returns document if attribute is equal to any value in the provided array.</td>\n        </tr>\n        <tr>\n            <td>Not Equal</td>\n            <td><code>Query.notEqual(\"title\", [\"Iron Man\"])</code></td>\n            <td>Returns document if attribute is not equal to any value in the provided array.</td>\n        </tr>\n        <tr>\n            <td>Less Than</td>\n            <td><code>Query.lessThan(\"score\", 10)</code></td>\n            <td>Returns document if attribute is less than the provided value.</td>\n        </tr>\n        <tr>\n            <td>Less Than or Equal</td>\n            <td><code>Query.lessThanEqual(\"score\", 10)</code></td>\n            <td>Returns document if attribute is less than or equal to the provided value.</td>\n        </tr>\n        <tr>\n            <td>Greater Than</td>\n            <td><code>Query.greaterThan(\"score\", 10)</code></td>\n            <td>Returns document if attribute is greater than the provided value.</td>\n        </tr>\n        <tr>\n            <td>Greater Than or Equal</td>\n            <td><code>Query.greaterThanEqual(\"score\", 10)</code></td>\n            <td>Returns document if attribute is greater than or equal to the provided value.</td>\n        </tr>\n        <tr>\n            <td>Between</td>\n            <td><code>Query.between(\"price\", 5, 10)</code></td>\n            <td>Returns document if attribute value falls between the two values. The boundary values are inclusive and can be strings or numbers.</td>\n        </tr>\n        <tr>\n            <td>Is Null</td>\n            <td><code>Query.isNull(\"name\")</code></td>\n            <td>Returns documents where attribute value is null.</td>\n        </tr>\n        <tr>\n            <td>Is Not Null</td>\n            <td><code>Query.isNotNull(\"name\")</code></td>\n            <td>Returns documents where attribute value is <b>not</b> null.</td>\n        </tr>\n        <tr>\n            <td>Starts With</td>\n            <td><code>Query.startsWith(\"name\", \"Once upon a time\")</code></td>\n            <td>Returns documents if a string attributes starts with a substring.</td>\n        </tr>\n        <tr>\n            <td>Ends With</td>\n            <td><code>Query.endsWith(\"name\", \"happily ever after.\")</code></td>\n            <td>Returns documents if a string attributes ends with a substring.</td>\n        </tr>\n        <tr>\n            <td>Search</td>\n            <td><code>Query.search(\"text\", \"key words\")</code></td>\n            <td>Searches string attributes for provided keywords. Requires a <a href=\"/docs/databases#indexes\">Full-text index</a> on queried attributes.</td>\n        </tr>\n        <tr>\n            <td>Order Descending</td>\n            <td><code>Query.orderDesc(\"attribute\")</code></td>\n            <td>Orders results in descending order by attribute. Attribute must be indexed. Pass in an empty string to return in natural order.</td>\n        </tr>\n        <tr>\n            <td>Order Ascending</td>\n            <td><code>Query.orderAsc(\"attribute\")</code></td>\n            <td>Orders results in ascending order by attribute. Attribute must be indexed. Pass in an empty string to return in natural order.</td>\n        </tr>\n        <tr>\n            <td>Limit</td>\n            <td><code>Query.limit(25)</code></td>\n            <td>Limits the number of results returned by the query. Used for <a href=\"/docs/pagination#offset-pagination\" id=\"offset-pagination\">pagination</a>. If the limit query is not used, the limit defaults to 25 results.</td>\n        </tr>\n        <tr>\n            <td>Offset</td>\n            <td><code>Query.offset(0)</code></td>\n            <td>Offset the results returned by skipping some of the results. Used for <a href=\"/docs/pagination#offset-pagination\" id=\"offset-pagination\">pagination</a>.</td>\n        </tr>\n        <tr>\n            <td>Cursor After</td>\n            <td><code>Query.cursorAfter(\"62a7...f620\")</code></td>\n            <td>Places the cursor after the specified resource ID. Used for <a href=\"/docs/pagination#cursor-pagination\" id=\"cursor-pagination\">pagination</a>.</td>\n        </tr>\n        <tr>\n            <td>Cursor Before</td>\n            <td><code>Query.cursorBefore(\"62a7...a600\")</code></td>\n            <td>Places the cursor before the specified resource ID. Used for <a href=\"/docs/pagination#cursor-pagination\" id=\"cursor-pagination\">pagination</a>.</td>\n        </tr>\n    </tbody>\n</table>\n\n\n<h2><a href=\"/docs/queries#building-queries\" id=\"building-queries\">Building Queries</a></h2>\n<p>\n    Queries are passed to an endpoint through the <code>queries</code> parameter as an array of query strings, which can be generated using the <code>Query</code> class.\n</p>\n<p>Each query method is logically separated via <code>AND</code> operations. For <code>OR</code> operation, pass multiple values into the query method separated by commas. For example <code>Query.equal('title', ['Avatar', 'Lord of the Rings'])</code> will fetch the movies \"Avatar\" or \"Lord of the Rings\".</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Databases, Query } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')\n    .setProject('[PROJECT_ID]');\n\nconst databases = new Databases(client);\n\ndatabases.listDocuments(\n    '[DATABASE_ID]',\n    '[COLLECTION_ID]',\n    [\n        Query.equal('title', ['Avatar', 'Lord of the Rings']),\n        Query.greaterThan('year', 1999)\n    ]\n);</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nvoid main() async {\n    final client = Client()\n        .setEndpoint('https://cloud.appwrite.io/v1')\n        .setProject('[PROJECT_ID]');\n\n    final databases = Databases(client);\n\n    try {\n        final documents = await databases.listDocuments(\n            '[DATABASE_ID]',\n            '[COLLECTION_ID]',\n            [\n                Query.equal('title', ['Avatar', 'Lord of the Rings']),\n                Query.greaterThan('year', 1999)\n            ]\n        );\n    } on AppwriteException catch(e) {\n        print(e);\n    }\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.Query\nimport io.appwrite.services.Databases\n\nsuspend fun main() {\n    val client = Client(applicationContext)\n        .setEndpoint('https://cloud.appwrite.io/v1')\n        .setProject('[PROJECT_ID]');\n\n    val databases = Databases(client)\n\n    try {\n        val documents = databases.listDocuments(\n            databaseId = \"[DATABASE_ID]\",\n            collectionId = \"[COLLECTION_ID]\",\n            queries = listOf(\n                Query.equal(\"title\", listOf(\"Avatar\", \"Lord of the Rings\")),\n                Query.greaterThan(\"year\", 1999)\n            )\n        )\n    } catch (e: AppwriteException) {\n        Log.e(\"Appwrite\", e.message)\n    }\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\nimport AppwriteModels\n\nfunc main() async throws {\n    let client = Client()\n        .setEndpoint(\"https://cloud.appwrite.io/v1\")\n        .setProject(\"[PROJECT_ID]\")\n\n    let databases = Databases(client)\n\n    do {\n        let documents = try await databases.listDocuments(\n            databaseId: \"[DATABASE_ID]\",\n            collectionId: \"[COLLECTION_ID]\",\n            queries: [\n                Query.equal(\"title\", [\"Avatar\", \"Lord of the Rings\"]),\n                Query.greaterThan(\"year\", 1999)\n            ]\n        )\n    } catch {\n        print(error.localizedDescription)\n    }\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>GraphQL</h3>\n        <div class=\"ide\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n            <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>query {\n    databasesListDocuments(\n        databaseId: \"[DATABASE_ID]\",\n        collectionId: \"[COLLECTION_ID]\"\n        queries: [\"equal(\\\"title\\\", [\\\"Avatar\\\", \\\"Lord of the Rings\\\"])\", \"greaterThan(\\\"year\\\", 1999)\"]\n    ) {\n        total\n        documents {\n            _id\n            data\n        }\n    }\n}</code></pre>\n        </div>\n    </li>\n</ul>\n\n<h3><a href=\"/docs/databases#ordering\" id=\"ordering\">Ordering Results</a></h3>\n<p>When querying using the <a href=\"/docs/server/databases#databasesListDocuments\">listDocuments</a> endpoint, you can specify the order of the documents returned using the <code>Query.orderAsc()</code> and <code>Query.orderDesc()</code> query methods.</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Databases, Query } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')\n    .setProject('[PROJECT_ID]');\n\nconst databases = new Databases(client);\n\ndatabases.listDocuments(\n    '[DATABASE_ID]',\n    '[COLLECTION_ID]',\n    [\n        Query.orderAsc('title'),\n    ]\n);</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nvoid main() async {\n    final client = Client()\n        .setEndpoint('https://cloud.appwrite.io/v1')\n        .setProject('[PROJECT_ID]');\n\n    final databases = Databases(client);\n\n    try {\n        final documents = await databases.listDocuments(\n            databaseId: '[DATABASE_ID]',\n            collectionId: '[COLLECTION_ID]',\n            queries: [\n                Query.orderAsc('title')\n            ]\n        );\n    } on AppwriteException catch(e) {\n        print(e);\n    }\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.Query\nimport io.appwrite.services.Databases\n\nsuspend fun main() {\n    val client = Client(applicationContext)\n        .setEndpoint('https://cloud.appwrite.io/v1')\n        .setProject('[PROJECT_ID]');\n\n    val databases = Databases(client)\n\n    try {\n        val documents = databases.listDocuments(\n            databaseId = \"[DATABASE_ID]\",\n            collectionId = \"[COLLECTION_ID]\",\n            queries = [\n                Query.orderAsc(\"title\")\n            ]\n        )\n    } catch (e: AppwriteException) {\n        Log.e(\"Appwrite\", e.message)\n    }\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\nimport AppwriteModels\n\nfunc main() async throws {\n    let client = Client()\n        .setEndpoint('https://cloud.appwrite.io/v1')\n        .setProject('[PROJECT_ID]');\n\n    let databases = Databases(client)\n\n    do {\n        let documents = try await databases.listDocuments(\n            databaseId: \"[DATABASE_ID]\",\n            collectionId: \"[COLLECTION_ID]\",\n            queries: [\n                Query.orderAsc(\"title\")\n            ]\n        )\n    } catch {\n        print(error.localizedDescription)\n    }\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>GraphQL</h3>\n        <div class=\"ide\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n            <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>query {\n    databasesListDocuments(\n        databaseId: \"[DATABASE_ID]\",\n        collectionId: \"[COLLECTION_ID]\"\n        queries: [\"orderAsc(\\\"title\\\")\"]\n    ) {\n        total\n        documents {\n            _id\n            data\n        }\n    }\n}</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>To sort based on multiple attributes, simply provide multiple query methods.</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Databases, Query } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')\n    .setProject('[PROJECT_ID]');\n\nconst databases = new Databases(client);\n\ndatabases.listDocuments(\n    '[DATABASE_ID]',\n    '[COLLECTION_ID]',\n    [\n        Query.orderAsc('title'), // Order by title in ascending order\n        Query.orderDesc('year'), // Order by year in descending order\n    ]\n);</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nvoid main() async {\n    final client = Client()\n        .setEndpoint(\"https://cloud.appwrite.io/v1\")\n        .setProject(\"[PROJECT_ID]\");\n\n    final databases = Databases(client);\n    try {\n        final documents = await databases.listDocuments(\n            databaseId: '[DATABASE_ID]',\n            collectionId: '[COLLECTION_ID]',\n            queries: [\n                Query.orderAsc('title'), // Order by title in ascending order\n                Query.orderDesc('year')  // Order by year in descending order\n            ]\n        );\n    } on AppwriteException catch(e) {\n        print(e);\n    }\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.Query\nimport io.appwrite.services.Databases\n\nsuspend fun main() {\n    val client = Client(applicationContext)\n        .setEndpoint(\"https://cloud.appwrite.io/v1\")\n        .setProject(\"[PROJECT_ID]\")\n\n    val databases = Databases(client)\n\n    try {\n        val documents = databases.listDocuments(\n            databaseId = \"[DATABASE_ID]\",\n            collectionId = \"[COLLECTION_ID]\",\n            queries = [\n                Query.orderAsc(\"title\"), // Order by title in ascending order\n                Query.orderDesc(\"year\")  // Order by year in descending order\n            ]\n        )\n    } catch (e: AppwriteException) {\n        Log.e(\"Appwrite\", e.message)\n    }\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\nimport AppwriteModels\n\nfunc main() async throws {\n    let client = Client()\n      .setEndpoint(\"https://cloud.appwrite.io/v1\")\n      .setProject(\"[PROJECT_ID]\")\n\n    let databases = Databases(client)\n\n    do {\n        let documents = try await databases.listDocuments(\n            databaseId: \"[DATABASE_ID]\",\n            collectionId: \"[COLLECTION_ID]\",\n            queries: [\n                Query.orderAsc(\"title\"), // Order by title in ascending order\n                Query.orderDesc(\"year\")  // Order by year in descending order\n            ]\n        )\n    } catch {\n        print(error.localizedDescription)\n    }\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>GraphQL</h3>\n        <div class=\"ide\" data-lang=\"graphql\" data-lang-label=\"GraphQL\">\n            <pre class=\"line-numbers\"><code class=\"prism language-graphql\" data-prism>query {\n    databasesListDocuments(\n        databaseId: \"[DATABASE_ID]\",\n        collectionId: \"[COLLECTION_ID]\"\n        queries: [\"orderAsc(\\\"title\\\")\", \"orderDesc(\\\"year\\\")\"]\n    ) {\n        total\n        documents {\n            _id\n            data\n        }\n    }\n}</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>In the example above, the movies returned will be first sorted by <code>title</code> in ascending order, then sorted by <code>year</code> in descending order.</p>","metadata":{"source":"./appwrite-docs/queries.phtml"}}],[{"pageContent":"<p>Some of Appwrite's API endpoints have a rate limit to avoid abuse or brute-force attacks against Appwrite's REST API. Each Appwrite route documentation has information about any rate limits that might apply to them.</p>\n\n<p>Rate limits only apply to Client SDKs. Rate limits do not apply when accessing Appwrite with a Server SDK authenticated using an API key.</p>\n\n<p>You can check the returned HTTP headers of any API request to see your current rate limit status:</p>\n\n<div class=\"ide\">\n    <pre class=\"line-numbers\"><code class=\"prism language-http\" data-prism>HTTP/1.1 200\nDate: Mon, 01 Jul 2013 17:27:06 GMT\nStatus: 200\nX-RateLimit-Limit: 60\nX-RateLimit-Remaining: 56\nX-RateLimit-Reset: 1372700873\n</code></pre>\n</div>\n\n<p>The headers tell you everything you need to know about your current rate limit status:</p>\n\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full text-size-small\">\n    <thead>\n    <tr>\n        <th style=\"width: 180px\">Header</th>\n        <th>Description</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>X-RateLimit-Limit</td>\n        <td>The maximum number of requests that the consumer is permitted to make per hour.</td>\n    </tr>\n    <tr>\n        <td>X-RateLimit-Remaining</td>\n        <td>The number of requests remaining in the current rate limit window.</td>\n    </tr>\n    <tr>\n        <td>X-RateLimit-Reset</td>\n        <td>The time at which the current rate limit window resets in UTC epoch seconds.</td>\n    </tr>\n    </tbody>\n</table>\n\n<p>If you need the time in a different format, any modern programming language can get the job done. For example, if you open up the console on your web browser, you can easily get the reset time as a JavaScript Date object, You can also read more about <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Unix_time\">Unix Time</a>.</p>\n\n<div class=\"ide\">\n    <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>new Date(1372700873 * 1000) // => Mon Jul 01 2013 13:47:53 GMT-0400 (EDT)</code></pre>\n</div>\n\n<p>Once you go over the rate limit you will receive an error response:</p>\n\n<div class=\"ide\">\n    <pre class=\"line-numbers\"><code class=\"prism language-http\" data-prism>HTTP/1.1 429\nDate: Tue, 20 Aug 2013 14:50:41 GMT\nStatus: 429\nX-RateLimit-Limit: 60\nX-RateLimit-Remaining: 0\nX-RateLimit-Reset: 1377013266\n{\n    \"message\": \"Too many requests\",\n    \"code\": 429\n}\n</code></pre>\n</div>\n\n<h2><a href=\"/docs/rate-limits#abuse\" id=\"abuse\">Service Abuse</a></h2>\n\n<p>To protect the quality of service from Appwrite, additional rate limits may apply to some actions. For example, rapidly creating content, polling aggressively instead of using webhooks, making API calls with a high concurrency, or repeatedly requesting data that is computationally expensive may result in abuse rate limiting.</p>\n\n<p>It is not intended for this rate limit to interfere with any legitimate use of the API. Your normal rate limits should be the only limit you target.</p>\n\n<p>If you are exceeding your rate limit, you can likely fix the issue by caching API responses and using webhooks for data polling.</p>\n\n<p>If your application triggers this rate limit, you'll receive an informative response:</p>\n\n<div class=\"ide\">\n    <pre class=\"line-numbers\"><code class=\"prism language-http\" data-prism>HTTP/1.1 429\nContent-Type: application/json; charset=utf-8\nConnection: close\n{\n    \"message\": \"Too many login attempts\",\n    \"code\": 429\n}\n</code></pre>\n</div>","metadata":{"source":"./appwrite-docs/rate-limits.phtml"}}],[{"pageContent":"<?php\n$channels = [\n    'account' => 'All account related events (session create, name update...)',\n    'databases.[ID].collections.[ID].documents' => 'Any create/update/delete events to any document in a collection',\n    'documents' => 'Any create/update/delete events to any document',\n    'databases.[ID].collections.[ID].documents.[ID]' => 'Any update/delete events to a given document',\n    'files' => 'Any create/update/delete events to any file',\n    'buckets.[ID].files.[ID]' => 'Any update/delete events to a given file of the given bucket',\n    'buckets.[ID].files' => 'Any update/delete events to any file of the given bucket',\n    'teams' => 'Any create/update/delete events to a any team',\n    'teams.[ID]' => 'Any update/delete events to a given team',\n    'memberships' => 'Any create/update/delete events to a any membership',\n    'memberships.[ID]' => 'Any update/delete events to a given membership',\n    'executions' => 'Any update to executions',\n    'executions.[ID]' => 'Any update to a given execution',\n    'functions.[ID]' => 'Any execution event to a given function'\n];\n?>\n<p>Appwrite supports multiple protocols for accessing the server, including <a href=\"/docs/rest\">REST</a>, <a href=\"/docs/graphql\">GraphQL</a>, and <a href=\"/docs/realtime\">Realtime</a>.</p>\n\n<p>Realtime allows you to listen to any events on the server-side in realtime using the <b>subscribe</b> method.</p>\n\n<p>Instead of requesting new data via HTTP, the subscription will receive new data every time it changes, any connected client receives that update within milliseconds via a WebSocket connection.</p>\n\n<p>This lets you build an interactive and responsive user experience by providing information from all of Appwrite's services in realtime. The example below shows subscribing to realtime events for file uploads.</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')\n    .setProject('[PROJECT_ID]');\n\n// Subscribe to files channel\nclient.subscribe('files', response => {\n    if(response.events.includes('buckets.*.files.*.create')) {\n        // Log when a new file is uploaded\n        console.log(response.payload);\n    }\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n\n        <div class=\"ide margin-bottom\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')\n    .setProject('[PROJECT_ID]');\n\nfinal realtime = Realtime(client);\n\n// Subscribe to files channel\nfinal subscription = realtime.subscribe(['files']);\n\nsubscription.stream.listen((response) {\n    if(response.events.contains('buckets.*.files.*.create')) {\n    // Log when a new file is uploaded\n    print(response.payload);\n    }\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"android\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Realtime\n\nval client = Client(context)\n    .setEndpoint(\"https://cloud.appwrite.io/v1\")\n    .setProject(\"[PROJECT_ID]\")\n\nval realtime = Realtime(client)\n\n// Subscribe to files channel\nlet subscription = realtime.subscribe(\"files\") {\n    if(it.events.contains(\"buckets.*.files.*.create\")) {\n        // Log when a new file is uploaded\n        print(it.payload.toString());\n    }\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"apple\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\nimport AppwriteModels\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\")\n    .setProject(\"[PROJECT_ID]\")\n\nlet realtime = Realtime(client)\n\n// Subscribe to files channel\nlet subscription = realtime.subscribe(channels: [\"files\"]) { response in\n    if (message.events!.contains(\"buckets.*.files.*.create\")) {\n        // Log when a new file is uploaded\n        print(String(describing: response))\n    }\n}</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>To subscribe to updates from different resources, you need to specify one or more channels. The <a href=\"/docs/realtime#channels\">channels</a> offer a wide and powerful selection that will allow you to listen to all possible resources. This allows you to receive updates not only from the database, but from all the services that Appwrite offers.</p>\n\n<p>If you subscribe to a channel, you will receive callbacks for a variety of events related to the channel. The <b>events</b> attribute in the callback can be used to filter and respond to specific events in a channel.</p>\n\n<p>All possible events can be found <a href=\"/docs/events\">here</a>.</p>\n\n<div class=\"notice margin-top-large margin-bottom-large\">\n    <h3>Permissions</h3>\n    <p>All subscriptions are secured by the <a href=\"/docs/permissions\">permissions system</a> offered by Appwrite, meaning a user will only receive updates to resources they have permission to access.</p>\n    <p>Using <span class=\"tag\">Role.any()</span> on read permissions will allow any client to receive updates.</p>\n</div>\n\n<h2><a href=\"/docs/realtime#authentication\" id=\"authentication\">Authentication</a></h2>\n<p>Realtime authenticates using an existing user session. If you authenticate <b>after</b> creating a subscription, the subscription will not receive updates for the newly authenticated user. You will need to re-create the subscription to work with the new user.</p>\n\n<p>More information and examples of authenticating users can be found in the dedicated <a href=\"/docs/authentication\">authentication guide</a>.</p>\n\n<h2><a href=\"/docs/realtime#examples\" id=\"examples\">Examples</a></h2>\n<p>The examples below will show you how you can use Realtime in various ways.</p>\n\n<h3><a href=\"/docs/realtime#subscribe-to-a-channel\" id=\"subscribe-to-a-channel\">Subscribe to a Channel</a></h3>\n\n<p>In this example we are subscribing to all updates related to our account by using the <span class=\"tag\">account</span> channel. This will be triggered by any update related to the authenticated user, like updating the user's name or e-mail address.</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')\n    .setProject('[PROJECT_ID]');\n\nclient.subscribe('account', response => {\n    // Callback will be executed on all account events.\n    console.log(response);\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n\n        <div class=\"ide margin-bottom\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')\n    .setProject('[PROJECT_ID]');\n\nfinal realtime = Realtime(client);\n\nfinal subscription = realtime.subscribe(['account']);\n\nsubscription.stream.listen((response) {\n    // Callback will be executed on all account events.\n    print(response);\n})</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"android\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Realtime\n\nval client = Client(context)\n    .setEndpoint(\"https://cloud.appwrite.io/v1\")\n    .setProject(\"[PROJECT_ID]\")\n\nval realtime = Realtime(client)\n\nval subscription = realtime.subscribe(\"account\") {\n    // Callback will be executed on all account events.\n    print(it.payload.toString())\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"apple\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\nimport AppwriteModels\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\")\n    .setProject(\"[PROJECT_ID]\")\n\nlet realtime = Realtime(client)\n\nlet subscription = realtime.subscribe(channel: \"account\", callback: { response in\n    // Callback will be executed on all account events.\n    print(String(describing: response))\n})</code></pre>\n        </div>\n    </li>\n</ul>\n\n<h3><a href=\"/docs/realtime#subscribe-to-multiple-channels\" id=\"subscribe-to-multiple-channels\">Subscribe to Multiple Channels</a></h3>\n\n<p>You can also listen to multiple <a href=\"/docs/realtime#channels\">channels</a> at once by passing an array of channels. This will trigger the callback for any events for all channels passed.</p>\n<p>In this example we are listening to the document A and all files by subscribing to the <span class=\"tag\">databases.A.collections.A.documents.A</span> and <span class=\"tag\">files</span> channels.</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')\n    .setProject('[PROJECT_ID]');\n\nclient.subscribe(['collections.A.documents.A', 'files'], response => {\n    // Callback will be executed on changes for documents A and all files.\n    console.log(response);\n});</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n\n        <div class=\"ide margin-bottom\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')\n    .setProject('[PROJECT_ID]');\n\nfinal realtime = Realtime(client);\n\nfinal subscription = realtime.subscribe(['databases.A.collections.A.documents.A', 'files']);\n\nsubscription.stream.listen((response) {\n    // Callback will be executed on changes for documents A and all files.\n    print(response);\n})</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"android\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Realtime\n\nval client = Client(context)\n    .setEndpoint(\"https://cloud.appwrite.io/v1\")\n    .setProject(\"[PROJECT_ID]\")\nval realtime = Realtime(client)\n\nrealtime.subscribe(\"databases.A.collections.A.documents.A\", \"files\") {\n    // Callback will be executed on changes for documents A and all files.\n    print(it.toString())\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"apple\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\nimport AppwriteModels\n\nlet client = Client()\n    .setEndpoint(\"https://cloud.appwrite.io/v1\")\n    .setProject(\"[PROJECT_ID]\")\n\nlet realtime = Realtime(client)\n\nrealtime.subscribe(channels: [\"databases.A.collections.A.documents.A\", \"files\"]) { response in\n    // Callback will be executed on changes for documents A and all files.\n    print(String(describing: response))\n}</code></pre>\n        </div>\n    </li>\n</ul>\n\n<h3><a href=\"/docs/realtime#unsubscribe\" id=\"unsubscribe\">Unsubscribe</a></h3>\n\n<p>If you no longer want to receive updates from a subscription, you can unsubscribe so that your callbacks are no longer called. Leaving old subscriptions alive and resubscribing can result in duplicate subscriptions and cause race conditions.</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')\n    .setProject('[PROJECT_ID]');\n\nconst unsubscribe = client.subscribe('files', response => {\n    // Callback will be executed on changes for all files.\n    console.log(response);\n});\n\n// Closes the subscription.\nunsubscribe();</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n\n        <div class=\"ide margin-bottom\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nfinal client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')\n    .setProject('[PROJECT_ID]');\n\nfinal realtime = Realtime(client);\n\nfinal subscription = realtime.subscribe(['files']);\n\nsubscription.stream.listen((response) {\n    // Callback will be executed on changes for all files.\n    print(response);\n})\n\n// Closes the subscription.\nsubscription.close();</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"android\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Realtime\n\nval client = Client(context)\n    .setEndpoint(\"https://cloud.appwrite.io/v1\")\n    .setProject(\"[PROJECT_ID]\")\n\nval realtime = Realtime(client)\n\nval subscription = realtime.subscribe(\"files\") {\n    // Callback will be executed on changes for all files.\n    print(param.toString())\n}\n\n// Closes the subscription.\nsubscription.close()</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"apple\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>\nlet client = Client()\nlet realtime = Realtime(client)\n\nlet subscription = realtime.subscribe(channel: \"files\") { response in\n    // Callback will be executed on changes for all files.\n    print(response.toString())\n}\n\n// Closes the subscription.\nsubscription.close()</code></pre>\n        </div>\n    </li>\n</ul>\n\n<h2><a href=\"/docs/realtime#payload\" id=\"payload\">Payload</a></h2>\n\n<p>The payload from the subscription will contain following properties:</p>\n\n<table class=\"vertical full args\">\n    <thead>\n        <tr>\n            <td style=\"width: 140px\">Name</td>\n            <td style=\"width: 120px\">Type</td>\n            <td>Description</td>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td data-title=\"Name: \">\n                events\n            </td>\n            <td data-title=\"Type: \">\n                string[]\n            </td>\n            <td data-title=\"Description: \">\n                The <a href=\"/docs/events\">system events</a> that triggered this update.\n            </td>\n        </tr>\n        <tr>\n            <td data-title=\"Name: \">\n                channels\n            </td>\n            <td data-title=\"Type: \">\n                string[]\n            </td>\n            <td data-title=\"Description: \">\n                An array of <a href=\"/docs/realtime#channels\">channels</a> that can receive this message.\n            </td>\n        </tr>\n        <tr>\n            <td data-title=\"Name: \">\n                timestamp\n            </td>\n            <td data-title=\"Type: \">\n                string\n            </td>\n            <td data-title=\"Description: \">\n                The <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" rel=\"noopener\" target=\"_blank\">ISO 8601 timestamp</a> in UTC timezone from the server to ensure consistency across all client platforms and real-time technologies.\n            </td>\n        </tr>\n        <tr>\n            <td data-title=\"Name: \">\n                payload\n            </td>\n            <td data-title=\"Type: \">\n                object\n            </td>\n            <td data-title=\"Description: \">\n                Payload contains the data equal to the response model.\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n<p>If you subscribe to the <span class=\"tag\">documents</span> channel and a document the user is allowed to read is updated, you will receive an object containing information about the event and the updated document.</p>\n\n<p>The response will look like this:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"json\" data-lang-label=\"JSON\">\n    <pre class=\"line-numbers\"><code class=\"prism language-json\" data-prism>{\n  \"events\": [\n    \"databases.default.collections.sample.documents.63c98b9baea0938e1206.update\",\n    \"databases.*.collections.*.documents.*.update\",\n    \"databases.default.collections.*.documents.63c98b9baea0938e1206.update\",\n    \"databases.*.collections.*.documents.63c98b9baea0938e1206.update\",\n    \"databases.*.collections.sample.documents.63c98b9baea0938e1206.update\",\n    \"databases.default.collections.sample.documents.*.update\",\n    \"databases.*.collections.sample.documents.*.update\",\n    \"databases.default.collections.*.documents.*.update\",\n    \"databases.default.collections.sample.documents.63c98b9baea0938e1206\",\n    \"databases.*.collections.*.documents.*\",\n    \"databases.default.collections.*.documents.63c98b9baea0938e1206\",\n    \"databases.*.collections.*.documents.63c98b9baea0938e1206\",\n    \"databases.*.collections.sample.documents.63c98b9baea0938e1206\",\n    \"databases.default.collections.sample.documents.*\",\n    \"databases.*.collections.sample.documents.*\",\n    \"databases.default.collections.*.documents.*\",\n    \"databases.default.collections.sample\",\n    \"databases.*.collections.*\",\n    \"databases.default.collections.*\",\n    \"databases.*.collections.sample\",\n    \"databases.default\",\n    \"databases.*\"\n  ],\n  \"channels\": [\n    \"documents\",\n    \"databases.default.collections.sample.documents\",\n    \"databases.default.collections.sample.documents.63c98b9baea0938e1206\"\n  ],\n  \"timestamp\": \"2023-01-19 18:30:04.051\",\n  \"payload\": {\n    \"ip\": \"127.0.0.1\",\n    \"stringArray\": [\n      \"sss\"\n    ],\n    \"email\": \"joe@example.com\",\n    \"stringRequired\": \"req\",\n    \"float\": 3.3,\n    \"boolean\": false,\n    \"integer\": 3,\n    \"enum\": \"apple\",\n    \"stringDefault\": \"default\",\n    \"datetime\": \"2023-01-19T10:27:09.428+00:00\",\n    \"url\": \"https://appwrite.io\",\n    \"$id\": \"63c98b9baea0938e1206\",\n    \"$createdAt\": \"2023-01-19T18:27:39.715+00:00\",\n    \"$updatedAt\": \"2023-01-19T18:30:04.040+00:00\",\n    \"$permissions\": [],\n    \"$collectionId\": \"sample\",\n    \"$databaseId\": \"default\"\n  }\n}</code></pre>\n</div>\n\n<h2><a href=\"/docs/realtime#channels\" id=\"channels\">Channels</a></h2>\n\n<p>A list of all channels available you can subscribe to. IDs cannot be wildcards.</p>\n\n<table class=\"full text-size-small\">\n    <thead>\n        <tr>\n            <td style=\"width: 200px\">Channel</td>\n            <td>Description</td>\n        </tr>\n    </thead>\n    <tbody>\n        <?php foreach ($channels as $channel => $description) : ?>\n            <tr>\n                <td><?php echo $this->escape($channel); ?></td>\n                <td><?php echo $this->escape($description); ?></td>\n            </tr>\n        <?php endforeach; ?>\n    </tbody>\n</table>\n\n<h2><a href=\"/docs/realtime#custom-endpoint\" id=\"custom-endpoint\">Custom Endpoint</a></h2>\n\n<p>The SDK will guess the endpoint of the Realtime API when setting the endpoint of your Appwrite instance. If you are running Appwrite with a custom proxy and changed the route of the Realtime API, you can call the <code>setEndpointRealtime</code> method on the Client SDK and set your new endpoint value.</p>\n\n<p>By default the endpoint is <code>wss://cloud.appwrite.io/v1/realtime</code>.</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client } from \"appwrite\";\nconst client = new Client();\n\nclient.setEndpointRealtime('cloud.appwrite.io');</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n\n        <div class=\"ide margin-bottom\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>final client = Client();\nclient.setEndpointRealtime('cloud.appwrite.io');</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"android\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>val client = Client(context)\nclient.setEndpointRealtime(\"cloud.appwrite.io\")</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"apple\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>let client = Client()\nclient.setEndpointRealtime(\"cloud.appwrite.io\")</code></pre>\n        </div>\n    </li>\n</ul>\n\n<h2><a href=\"/docs/realtime#known-limitations\" id=\"known-limitations\">Known Limitations</a></h2>\n\n<h3>Rapid Subscriptions Changes</h3>\n<p>The SDK creates a single WebSocket connection for all subscribed channels. Each time a channel is added or unsubscribed - the SDK currently creates a completely new connection and terminates the old one. Therefore, subscriptions to channels should always be done in conjunction with state management so as not to be unnecessarily built up several times by multiple components' life cycles.</p>\n\n<h3>Server-Side?</h3>\n<p>We currently are not offering access to realtime with Server SDKs and an API key.</p>\n","metadata":{"source":"./appwrite-docs/realtime.phtml"}}],[{"pageContent":"<?php\n$errorTypes = $this->getParam('errors', []);\n?>\n\n<p>Appwrite uses conventional HTTP response codes to indicate the success or failure of an API request. In general: Codes in the 2xx range indicate success. Codes in the 4xx range indicate an error that failed given the information provided (e.g., a required parameter was omitted, invalid input, etc.). Codes in the 5xx range indicate an error with the Appwrite server, but these are rare.</p>\n\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full vertical text-size-small\">\n    <thead>\n        <tr>\n            <th style=\"width: 100px\">Code</th>\n            <th style=\"width: 180px\">Text</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td data-title=\"Code: \">200</td>\n            <td data-title=\"Text: \">OK</td>\n            <td data-title=\"Description: \">Success!</td>\n        </tr>\n\n        <tr>\n            <td data-title=\"Code: \">201</td>\n            <td data-title=\"Text: \">Created</td>\n            <td data-title=\"Description: \">The requested resource has been created successfully.</td>\n        </tr>\n\n        <tr>\n            <td data-title=\"Code: \">202</td>\n            <td data-title=\"Text: \">Accepted</td>\n            <td data-title=\"Description: \">The requested change has been accepted for processing but has not been completed.</td>\n        </tr>\n\n        <tr>\n            <td data-title=\"Code: \">204</td>\n            <td data-title=\"Text: \">No Content</td>\n            <td data-title=\"Description: \">The server has successfully fulfilled the request and that there is no additional content to send in the response payload body. This status will usually return on successful delete operations.</td>\n        </tr>\n\n        <tr>\n            <td data-title=\"Code: \">301</td>\n            <td data-title=\"Text: \">Moved Permanently</td>\n            <td data-title=\"Description: \">The URL of the requested resource has been changed permanently. The new URL is given in the response.</td>\n        </tr>\n\n        <tr>\n            <td data-title=\"Code: \">304</td>\n            <td data-title=\"Text: \">Not Modified</td>\n            <td data-title=\"Description: \">There was no new data to return.</td>\n        </tr>\n\n        <tr>\n            <td data-title=\"Code: \">400</td>\n            <td data-title=\"Text: \">Bad Request</td>\n            <td data-title=\"Description: \">The request was invalid or cannot be otherwise served. An accompanying error message will explain further. Requests with wrong or invalid input will yield this response.</td>\n        </tr>\n\n        <tr>\n            <td data-title=\"Code: \">401</td>\n            <td data-title=\"Text: \">Unauthorized</td>\n            <td data-title=\"Description: \">Missing or incorrect authentication credentials can happen when the API key or user permission is not sufficient.</td>\n        </tr>\n\n        <tr>\n            <td data-title=\"Code: \">403</td>\n            <td data-title=\"Text: \">Forbidden</td>\n            <td data-title=\"Description: \">The request is understood, but it has been refused, or access is not allowed. An accompanying error message will explain why. Make sure to register your app in your project's dashboard platform list.</td>\n        </tr>\n\n        <tr>\n            <td data-title=\"Code: \">404</td>\n            <td data-title=\"Text: \">Not Found</td>\n            <td data-title=\"Description: \">The URI requested is invalid or the resource requested, such as a user, does not exist.</td>\n        </tr>\n\n        <tr>\n            <td data-title=\"Code: \">409</td>\n            <td data-title=\"Text: \">Conflict</td>\n            <td data-title=\"Description: \">This response is sent when a request conflicts with the current state of the server. This status code will usually appear when you're trying to create an already existing resource.</td>\n        </tr>\n\n        <tr>\n            <td data-title=\"Code: \">413</td>\n            <td data-title=\"Text: \">Payload Too Large</td>\n            <td data-title=\"Description: \">This indicates that the request entity is larger than limits defined by server. This status code will usually appear happen when uploading a file or function that is too large</td>\n        </tr>\n\n        <tr>\n            <td data-title=\"Code: \">416</td>\n            <td data-title=\"Text: \">Invalid Range</td>\n            <td data-title=\"Description: \">Invalid value in the range or content-range headers. Usually returned while uploading or downloading files using range header but the provided range value is not valid.</td>\n        </tr>\n\n        <tr>\n            <td data-title=\"Code: \">429</td>\n            <td data-title=\"Text: \">Too Many Requests</td>\n            <td data-title=\"Description: \">Returned in when a request cannot be served due to the application's rate limit having been exhausted for the resource. <a href=\"/docs/rate-limits\">See Rate Limits</a></td>\n        </tr>\n\n        <tr>\n            <td data-title=\"Code: \">500</td>\n            <td data-title=\"Text: \">Internal Server Error</td>\n            <td data-title=\"Description: \">Something is broken. Contact our <a href=\"/support\">team</a>, or raise a <a href=\"https://github.com/appwrite/appwrite/issues/new\" target=\"_blank\" rel=\"noopener\">GitHub issue</a>.</td>\n        </tr>\n\n        <tr>\n            <td data-title=\"Code: \">501</td>\n            <td data-title=\"Text: \">Not Implemented</td>\n            <td data-title=\"Description: \">The feature is not implemented. Usually returned when the project owner has disabled an auth method or an entire service.</td>\n        </tr>\n\n        <tr>\n            <td data-title=\"Code: \">503</td>\n            <td data-title=\"Text: \">Service Unavailable</td>\n            <td data-title=\"Description: \">The Appwrite servers are up but overloaded with requests. Try again later.</td>\n        </tr>\n\n        <tr>\n            <td data-title=\"Code: \">504</td>\n            <td data-title=\"Text: \">Gateway timeout</td>\n            <td data-title=\"Description: \">The Appwrite servers are up, but the request couldn't be serviced due to some failure within the stack. Try again later.</td>\n        </tr>\n\n    </tbody>\n</table>\n\n<h2><a href=\"/docs/response-codes#errorMessages\" id=\"errorMessages\">Error Messages</a></h2>\n\n<p>When the Appwrite APIs return error messages, it does so in JSON format. For example, an error might look like this:</p>\n\n<div class=\"ide\">\n    <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>{\n    \"message\": \"Invalid id: Parameter must be a valid number\",\n    \"type\": \"argument_invalid\",\n    \"code\": 400\n}\n</code></pre>\n</div>\n\n<h2><a href=\"/docs/response-codes#errorTypes\" id=\"errorTypes\">Error Types</a></h2>\n\n<p> Appwrite also passes convenient error types in addition to the HTTP response codes to help you get more fine grained control over what went wrong and allowing you to display relevant error messages in your applications. Error types are convenient to identify the type of error that occurred. </p>\n\n<p> For eg: A <span class=\"tag\">400</span> HTTP response code could indicate a Bad Request due to a variety of reasons and error types can help you pinpoint the exact <span class=\"tag\">400</span> error. Appwrite currently supports the following error types:</p>\n\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large\">\n    <thead>\n        <tr>\n            <th style=\"width: 40px\">Code</th>\n            <th style=\"width: 245px\">Type</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n<?php foreach($errorTypes as $type): ?>\n        <tr>\n            <td><?php echo $type['code']; ?></td>\n            <td><?php echo $type['name']; ?></td>\n            <td><?php echo $type['description']?></td>\n        </tr>\n<?php endforeach; ?>\n    </tbody>\n</table>\n","metadata":{"source":"./appwrite-docs/response-codes.phtml"}}],[{"pageContent":"<p>Appwrite supports multiple protocols for accessing the server, including <a href=\"/docs/rest\">REST</a>, <a href=\"/docs/graphql\">GraphQL</a>, and <a href=\"/docs/realtime\">Realtime</a>.</p>\n\n<p>The REST API allows you to access your Appwrite server through HTTP requests without the needing an SDK. Each endpoint in the API represents a specific operation on a specific resource.</p>\n\n<h2><a href=\"#headers\" id=\"headers\">Headers</a></h2>\n<p>Appwrite's REST APIs expect certain headers to be included with each request:</p>\n\n<table class=\"full text-size-small\">\n    <thead>\n    <tr>\n        <td style=\"width: 300px\">Header</td>\n        <td style=\"width: 80px\"></td>\n        <td>Description</td>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td><code>X-Appwrite-Project: [PROJECT-ID]</code></td>\n        <td><span class=\"tag red\">required</span></td>\n        <td>The ID of your Appwrite project</td>\n    </tr>\n    <tr>\n        <td><code>Content-Type: application/json</code></td>\n        <td><span class=\"tag red\">required</span></td>\n        <td>Content type of the HTTP request.</td>\n    </tr>\n    <tr>\n        <td><code>X-Appwrite-Key: [API-KEY]</code></td>\n        <td><span class=\"tag\">optional</span></td>\n        <td>API key used for server authentication. <b>Do not use API keys in client applications.</b></td>\n    </tr>\n    <tr>\n        <td><code>X-Appwrite-JWT: [TOKEN]</code></td>\n        <td><span class=\"tag\">optional</span></td>\n        <td>Token used for JWT authentication, tokens can be generated using the <a href=\"/docs/client/account#accountCreateJWT\">Create JWT</a> endpoint.</b></td>\n    </tr>\n    <tr>\n        <td><code>X-Appwrite-Response-Format: [VERSION-NUMBER]</code></td>\n        <td><span class=\"tag\">optional</span></td>\n        <td>Version number used for backward compatibility. The response will be formatted to be compatible with the provided version number.</td>\n    </tr>\n    <tr>\n        <td><code>X-Fallback-Cookies: [FALLBACK-COOKIES]</code></td>\n        <td><span class=\"tag\">optional</span></td>\n        <td>Fallback cookies used in scenarios where browsers do not allow third-party cookies. Often used when there is no <a href=\"/docs/custom-domains\">Custom Domain</a>.</td>\n    </tr>\n    </tbody>\n</table>\n\n<h2><a href=\"#no-headers\" id=\"no-headers\">Using Appwrite Without Headers</a></h2>\n<p>Some use cases do not allow custom headers, such as embedding images from Appwrite in HTML. In these cases, you can provide the Appwrite project ID using the query parameter <code>project</code>.</p>\n<div class=\"ide margin-bottom\" data-lang=\"html\" data-lang-label=\"HTML\">\n    <pre class=\"line-numbers\"><code class=\"prism language-html\" data-prism><?php echo htmlentities('<img src=\"https://cloud.appwrite.io/v1/storage/buckets/[BUCKET_ID]/files/[FILE_ID]/preview?project=[PROJECT_ID]\">'); ?></code></pre>\n</div>\n\n<h2><a href=\"#client-auth\" id=\"client-auth\">Client Authentication</a></h2>\n<p>You can create account sessions with POST requests to the <a href=\"/docs/client/account\">Account API</a>. Sessions are persisted using secured cookies. You can learn more about session persistence in the <a href=\"/docs/authentication#persistence\">Authentication Guide</a>.</p>\n<p>The example below shows creating an account session with the <a href=\"/docs/client/account#accountCreateEmailSession\">Create Account Session with Email</a> endpoint.</p>\n<div class=\"ide margin-bottom\" data-lang=\"http\" data-lang-label=\"HTTP\">\n    <pre class=\"line-numbers\"><code class=\"prism language-http\" data-prism>POST /v1/account/sessions/email HTTP/1.1\nContent-Type: application/json\nX-Appwrite-Project: [PROJECT_ID]\n\n{\n  \"email\": \"example@email.com\",\n  \"password\": \"password\"\n}</code></pre>\n</div>\n\n<p> You can find the cookies used to persist the new session in the response headers.</p>\n<div class=\"ide margin-bottom\" data-lang=\"http\" data-lang-label=\"HTTP\">\n    <pre class=\"line-numbers\"><code class=\"prism language-http\" data-prism>Set-Cookie: a_session_61e71ec784ab035f7259_legacy=eyJ0...aSJ9; expires=Tue, 19-Dec-2023 21:26:51 GMT; path=/; domain=.cloud.appwrite.io; secure; httponly\nSet-Cookie: a_session_61e71ec784ab035f7259=eyJ0...aSJ9; expires=Tue, 19-Dec-2023 21:26:51 GMT; path=/; domain=.cloud.appwrite.io; secure; httponly; samesite=None</code></pre>\n</div>\n\n<p>These cookies are used in subsequent requests to authenticate the user.</p>\n<div class=\"ide margin-bottom\" data-lang=\"http\" data-lang-label=\"HTTP\">\n    <pre class=\"line-numbers\"><code class=\"prism language-http\" data-prism>GET /v1/account HTTP/1.1\nCookie: a_session_61e71ec784ab035f7259_legacy=eyJ0...aSJ9; a_session_61e71ec784ab035f7259=eyJ0...aSJ9\nContent-Type: application/json\nX-Appwrite-Project: [PROJECT_ID]</code></pre>\n</div>\n\n<h2><a href=\"#server-auth\" id=\"server-auth\">Server Authentication</a></h2>\n<p>Server integrations use API keys to authenticate and are typically used for backend applications.</p>\n<p>Server APIs are authenticated with API keys instead of account sessions. Simply pass an <a href=\"/docs/keys\">API key</a> in the <code>X-Appwrite-key: [API-KEY]</code> header with the appropriate scopes.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"http\" data-lang-label=\"HTTP\">\n    <pre class=\"line-numbers\"><code class=\"prism language-http\" data-prism>GET /v1/databases/{databaseId}/collections/{collectionId}/documents HTTP/1.1\nContent-Type: application/json\nX-Appwrite-Project: [PROJECT_ID]\nX-Appwrite-Key: [API_KEY]</code></pre>\n</div>\n\n<h2><a href=\"#server-auth\" id=\"server-auth\">JWT Authentication</a></h2>\n<p>JWT authentication is frequently used by server applications to act on behalf of a user. Users generate tokens using the <a href=\"/docs/client/account#accountCreateJWT\">Create JWT</a> endpoint. When issuing requests authenticated with a JWT, Appwrite will treat the request like it is from the authenticated user.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"http\" data-lang-label=\"HTTP\">\n    <pre class=\"line-numbers\"><code class=\"prism language-http\" data-prism>GET /v1/account HTTP/1.1\nContent-Type: application/json\nX-Appwrite-Project: [PROJECT_ID]\nX-Appwrite-JWT: [TOKEN]</code></pre>\n</div>\n\n<h2><a href=\"#file-handling\" id=\"file-handling\">File Handling</a></h2>\n<p>Appwrite implements resumable, chunked uploads for files larger than 5MB. Chunked uploads send files in chunks of 5MB to reduce memory footprint and increase resilience when handling large files. Appwrite SDKs will automatically handle chunked uploads, but it is possible to implement this with the REST API directly.</p>\n\n<p>Upload endpoints in Appwrite, such as <a href=\"/docs/client/storage#storageCreateFile\">Create File</a> and <a href=\"/docs/server/functions#functionsCreateDeployment\">Create Deployment</a>, are different from other endpoints. These endpoints take multipart form data instead of JSON data. To implement chunked uploads, you will need to implement the following headers:</p>\n\n<table class=\"full text-size-small\">\n    <thead>\n    <tr>\n        <td style=\"width: 280px\">Header</td>\n        <td style=\"width: 80px\"></td>\n        <td>Description</td>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td><code>X-Appwrite-Project: [PROJECT-ID]</code></td>\n        <td><span class=\"tag red\">required</span></td>\n        <td>Contains the ID of your Appwrite Project to the REST API.</td>\n    </tr>\n    <tr>\n        <td><code>Content-Type: multipart/form-data; boundary=[FORM-BOUNDARY]</code></td>\n        <td><span class=\"tag red\">required</span></td>\n        <td>Contains the content type of the HTTP request and provides a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST\">boundary</a> that is used to parse the form data.</td>\n    </tr>\n    <tr>\n        <td><code>Content-Range: bytes [BYTE-RANGE]</code></td>\n        <td><span class=\"tag red\">required</span></td>\n        <td>Contains information about which bytes are being transmitted in this chunk, with the format <code>[FIRST-BYTE]-[LAST-BYTE]/[TOTAL-BYTES]</code>.</td>\n    </tr>\n    <tr>\n        <td><code>X-Appwrite-ID: [FILE-ID]</code></td>\n        <td><span class=\"tag red\">required</span></td>\n        <td>Contains ID of the file this chunk belongs to.</td>\n    </tr>\n    <tr>\n        <td><code>X-Appwrite-Key: [API-KEY]</code></td>\n        <td><span class=\"tag\">optional</span></td>\n        <td>Used for authentication in server integrations. <b>Do not use API keys in client applications.</b></td>\n    </tr>\n    </tbody>\n</table>\n\n<p>The multipart form data is structured as follows:</p>\n\n<table class=\"full text-size-small\">\n    <thead>\n    <tr>\n        <td style=\"width: 100px\">Key</td>\n        <td style=\"width: 80px\"></td>\n        <td style=\"width: 150px\">Value</td>\n        <td style=\"width: 100px\">File Name</td>\n        <td>Description</td>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>fileId</td>\n        <td><span class=\"tag\">optional</span></td>\n        <td><code>[FILE-ID]</code></td>\n        <td>n/a</td>\n        <td>Contains the file ID of the new file. Only used by file chunks following the first chunk uploaded.</td>\n    </tr>\n    <tr>\n        <td>file</td>\n        <td><span class=\"tag red\">required</span></td>\n        <td><code>[CHUNK-DATA]</code></td>\n        <td><code>[FILE-NAME]</code></td>\n        <td>Contains file chunk data.</td>\n    </tr>\n    <tr>\n        <td>permissions</td>\n        <td><span class=\"tag red\">required</span></td>\n        <td><code>[PERMISSION ARRAY]</code></td>\n        <td>n/a</td>\n        <td>Contains an array of permission strings about who can access the new file.</td>\n    </tr>\n    </tbody>\n</table>\n\n<p>While cURL and fetch are great tools to explore other REST endpoints, it's impractical to use for chunked file uploads because you need to split files into chunks.</p>\n\n<p>The multipart form data posted to file upload endpoints have the following format:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"http\" data-lang-label=\"HTTP\">\n    <pre class=\"line-numbers\"><code class=\"prism language-http\" data-prism>POST /v1/storage/buckets/default/files HTTP/1.1\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundarye0m6iNBQNHlzTpVM\nX-Appwrite-Project: demo-project\nContent-Range: bytes 10485760-12582912/12582912\nX-Appwrite-ID: 6369b0bc1dcf4ff59051\n\n------WebKitFormBoundarye0m6iNBQNHlzTpVM\nContent-Disposition: form-data; name=\"fileId\"\n\nunique()\n------WebKitFormBoundarye0m6iNBQNHlzTpVM\nContent-Disposition: form-data; name=\"file\"; filename=\"file.txt\"\nContent-Type: application/octet-stream\n\n[CHUNKED-DATA]\n------WebKitFormBoundarye0m6iNBQNHlzTpVM\nContent-Disposition: form-data; name=\"permissions[]\"\n\nread(\"user:627a958ded6424a98a9f\")\n------WebKitFormBoundarye0m6iNBQNHlzTpVM--</code></pre>\n</div>\n\n<h2><a href=\"#permissions\" id=\"permissions\">Permissions</a></h2>\n\n<p>Appwrite SDKs have helpers to generate permission strings, but when using Appwrite without SDKs, you'd need to create the strings yourself.</p>\n\n<h3>Permission Types</h3>\n\n<table class=\"full text-size-small\">\n    <thead>\n    <tr>\n        <td style=\"width: 250px\">SDK</td>\n        <td>Permission String</td>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td><code>Permission.read()</code></td>\n        <td><code>read(\"[PERMISSION_ROLE]\")</code></td>\n    </tr>\n    <tr>\n        <td><code>Permission.create()</code></td>\n        <td><code>create(\"[PERMISSION_ROLE]\")</code></td>\n    </tr>\n    <tr>\n        <td><code>Permission.update()</code></td>\n        <td><code>update(\"[PERMISSION_ROLE]\")</code></td>\n    </tr>\n    <tr>\n        <td><code>Permission.delete()</td>\n        <td><code>delete(\"[PERMISSION_ROLE]\")</code></td>\n    </tr>\n    <tr>\n        <td><code>Permission.write()</td>\n        <td><code>write(\"[PERMISSION_ROLE]\")</code></td>\n    </tr>\n    </tbody>\n</table>\n\n<h3>Permission Roles</h3>\n\n<table class=\"full text-size-small\">\n    <thead>\n    <tr>\n        <td style=\"width: 250px\">SDK</td>\n        <td>Role String</td>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td><code>Role.any()</code></td>\n        <td><code>any</code></td>\n    </tr>\n    <tr>\n        <td><code>Role.guests()</code></td>\n        <td><code>guests</code></td>\n    </tr>\n    <tr>\n        <td><code>Role.users()</code></td>\n        <td><code>users</code></td>\n    </tr>\n    <tr>\n        <td><code>Role.users([STATUS])</code></td>\n        <td><code>users/[STATUS]</code></td>\n    </tr>\n    <tr>\n        <td><code>Role.user([USER_ID])</td>\n        <td><code>user:[USER_ID]</code></td>\n    </tr>\n    <tr>\n        <td><code>Role.user([USER_ID], [STATUS])</td>\n        <td><code>user:[USER_ID]/[STATUS]</code></td>\n    </tr>\n    <tr>\n        <td><code>Role.team([TEAM_ID])</td>\n        <td><code>team:[TEAM_ID]</code></td>\n    </tr>\n    <tr>\n        <td><code>Role.team([TEAM_ID], [ROLE])</td>\n        <td><code>team:[TEAM_ID]/[ROLE]</code></td>\n    </tr>\n    <tr>\n        <td><code>Role.member([MEMBERSHIP_ID])</td>\n        <td><code>member:[MEMBERSHIP_ID]</code></td>\n    </tr>\n    </tbody>\n</table>\n\n<p>\n    <li class=\"margin-bottom\"><a href=\"/docs/permissions\" rel=\"noopener\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> Learn more about permissions</a></li>\n</p>\n\n<h2><a href=\"#unique-id\" id=\"unique-id\">Unique ID</a></h2>\n\n<p>\nAppwrite's SDKs have a helper <code>ID.unique()</code> to generate unique IDs. When using Appwrite without an SDK, pass the string <code>\"unique()\"</code> into the ID parameter.\n</p>\n\n<h2><a href=\"#query\" id=\"query\">Query Methods</a></h2>\n\n<p>\nAppwrite's SDKs provide a <code>Query</code> class to generate query strings. When using Appwrite without an SDK, you can template your own strings with the format below.\n</p>\n\n<p>Query strings are passed to Appwrite using the <code>queries</code> parameter. You can attach multiple query strings by including the array parameter multiple times in the query string: <code>queries[]=\"...\"&queries[]=\"...\"</code></p>\n\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large\">\n    <thead>\n        <tr>\n            <th style=\"width: 150px\">Query Method</th>\n            <th>Query String</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>select</td>\n            <td><code>select([attribute])</code></td>\n        </tr>\n        <tr>\n            <td>equal</td>\n            <td><code>equal(\"attribute\", [value])</code></td>\n        </tr>\n        <tr>\n            <td>notEqual</td>\n            <td><code>notEqual(\"attribute\", [value])</code></td>\n        </tr>\n        <tr>\n            <td>lessThan</td>\n            <td><code>lessThan(\"attribute\", [value])</code></td>\n        </tr>\n        <tr>\n            <td>lessThanEqual</td>\n            <td><code>lessThanEqual(\"attribute\", [value])</code></td>\n        </tr>\n        <tr>\n            <td>greaterThan</td>\n            <td><code>greaterThan(\"attribute\", [value])</code></td>\n        </tr>\n        <tr>\n            <td>greaterThanEqual</td>\n            <td><code>greaterThanEqual(\"attribute\", [value])</code></td>\n        </tr>\n        <tr>\n            <td>between</td>\n            <td><code>between(\"attribute\", lowerBound, upperBound)</code></td>\n        </tr>\n        <tr>\n            <td>isNull</td>\n            <td><code>isNull(\"attribute\")</code></td>\n        </tr>\n        <tr>\n            <td>isNotNull</td>\n            <td><code>isNotNull(\"attribute\")</code></td>\n        </tr>\n        <tr>\n            <td>startsWith</td>\n            <td><code>startsWith(\"attribute\", [value])</code></td>\n        </tr>\n        <tr>\n            <td>endsWith</td>\n            <td><code>endsWith(\"attribute\", [value])</code></td>\n        </tr>\n        <tr>\n            <td>search</td>\n            <td><code>search(\"attribute\", [value])</code></td>\n        </tr>\n        <tr>\n            <td>orderDesc</td>\n            <td><code>orderDesc(\"attribute\")</code></td>\n        </tr>\n        <tr>\n            <td>orderAsc</td>\n            <td><code>orderAsc(\"attribute\")</code></td>\n        </tr>\n        <tr>\n            <td>cursorAfter</td>\n            <td><code>cursorAfter(\"documentId\")</code></td>\n        </tr>\n        <tr>\n            <td>cursorBefore</td>\n            <td><code>cursorBefore(\"documentId\")</code></td>\n        </tr>\n        <tr>\n            <td>limit</td>\n            <td><code>limit(0)</code></td>\n        </tr>\n        <tr>\n        <td>offset</td>\n            <td><code>offset(0)</code></td>\n        </tr>\n    </tbody>\n</table>\n\n<div class=\"notice margin-bottom\">\n    <h3>Best Practice</h3>\n    <p>When using greater than, greater than or equal to, less than, or less than or equal to, it is not recommended to pass in multiple values. While the API will accept multiple values and return results with <b>or logic</b>, it's best practice to pass in only one value for performance reasons.</p>\n</div>\n<h2><a href=\"#rate-limits\" id=\"rate-limits\">Rate Limits</a></h2>\n<p>Appwrite's REST APIs are protected by the same rate limit policies, just like when using SDKs. Each API has a different rate limit, which is documented in the <b>References</b> section of each service in the Appwrite documentation.</p>\n\n<p>\n    <li class=\"margin-bottom\"><a href=\"https://appwrite.io/docs/rate-limits\" target=\"_blank\" rel=\"noopener\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> Learn more about Rate Limits</a></li>\n</p>\n\n<h2><a href=\"#stateless\" id=\"stateless\">Stateless</a></h2>\n<p>Appwrite's REST APIs are stateless. Each time you make a request, Appwrite receives all the information it needs to perform the action, regardless of what requests you make before and after that request.</p>\n\n<p>Since each requests is stateless, they can be handled in any given order when sent concurrently, as long as they don't make conflicting changes to the same resource.</p>\n\n<h2><a href=\"#specs\" id=\"specs\">OpenAPI and Swagger Specs</a></h2>\n\n<p>\nAppwrite provides a full REST API specification in the OpenAPI 3 and Swagger 2 formats every release. These can be accessed through Appwrite's GitHub repository and rendered using a variety of parsers and tools.\n</p>\n<p>\n    <li class=\"margin-bottom\"><a href=\"https://github.com/appwrite/appwrite/tree/master/app/config/specs\" target=\"_blank\" rel=\"noopener\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> Find the REST API specification for your Appwrite version</a></li>\n</p>\n","metadata":{"source":"./appwrite-docs/rest.phtml"}}],[{"pageContent":"<?php\n\n$platforms = $this->getParam('platforms', []);\n$markdown = new \\Parsedown();\n$markdown->setSafeMode(true);\n\n?>\n\n<p>We provide libraries for major programming languages and platforms so you don't have to write code for interacting with our HTTP APIs from scratch.</p>\n\n<p>Our team is always working on improving and extending the current stack of available platforms and SDKs, listed below is a list of official libraries our team is currently maintaining.</p>\n\n<ul class=\"margin-top margin-bottom-large\">\n    <?php foreach ($platforms as $platform): ?>\n        <?php if(!$platform['enabled']) { continue; } ?>\n        <li class=\"margin-bottom-small\">\n            <a href=\"/docs/sdks#<?php echo strtolower($platform['name']); ?>\"><i class=\"icon-angle-circled-right\"></i><?php echo $this->escape($platform['name']); ?> SDKs<?php if($platform['beta']): ?> (beta)<?php endif; ?></a>\n        </li>\n    <?php endforeach; ?>\n</ul>\n\n<?php foreach($platforms as $platform): ?>\n    <?php if(!$platform['enabled']) { continue; } ?>\n    <h2 href=\"/docs/sdks#<?php echo strtolower($platform['name']); ?>\" id=\"<?php echo strtolower($platform['name']); ?>\"><?php echo $platform['name']; ?> SDKs<?php if($platform['beta']): ?> (beta)<?php endif; ?></h2>\n\n    <p><?php echo $markdown->text($platform['description']); ?></p>\n\n    <table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large text-size-small vertical\">\n        <thead>\n        <tr>\n            <th style=\"width: 100px\"></th>\n            <th style=\"width: 160px\">Platform</th>\n            <th>GitHub Repository</th>\n            <th style=\"width: 140px\"></th>\n        </tr>\n        </thead>\n        <tbody>\n        <?php foreach($platform['sdks'] as $language): ?>\n            <?php if(!$language['enabled']) { continue; } ?>\n            <?php if($language['dev']) { continue; } ?>\n            <?php if($language['hidden']) { continue; } ?>\n        <tr>\n            <td>\n                <img src=\"/images-ee/platforms/<?php echo $language['key']; ?>.svg\" alt=\"Logo\" height=\"30\" class=\"force-light sdk-logo margin-start margin-end\" />\n                <img src=\"/images-ee/platforms/dark/<?php echo $language['key']; ?>.svg\" alt=\"Logo\" height=\"30\" class=\"force-dark sdk-logo margin-start margin-end\" />\n            </td>\n            <td>\n                <?php if($language['package']): ?>\n                    <a href=\"<?php echo $this->escape($language['package']); ?>\" target=\"_blank\"><?php echo $language['name']; ?> SDK <i class=\"icon-link-ext\"></i></a>\n                <?php else: ?>\n                    <?php echo $language['name']; ?> SDK\n                <?php endif; ?>\n                \n                &nbsp;<span class=\"text-fade text-size-xs\"><?php echo $language['version']; ?></span></td>\n            <td>\n                <?php if(!$language['enabled']): ?>\n                    <span>Work in progress</span>\n                <?php else: ?>\n                    <a href=\"<?php echo $language['url']; ?>\" target=\"_blank\"><?php echo $language['gitUserName']; ?>/<?php echo $language['gitRepoName']; ?> <i class=\"icon-link-ext\"></i></a>\n                <?php endif; ?>\n            </td>\n            <td>\n                <?php if($language['enabled']): ?>\n                    <span class=\"tag\">official</span>\n                    <?php if($language['beta']): ?>\n                        <span class=\"tag red margin-start-small\">beta</span>\n                    <?php endif; ?>\n                <?php endif; ?>\n            </td>\n        </tr>\n        <?php endforeach; ?>\n        </tbody>\n    </table>\n<?php endforeach; ?>\n\n<!-- All icons from http://konpa.github.io/devicon/ -->\n\n<p>If you would like to help us extend our platforms and SDKs stack, you are more than welcome to <a href=\"/contact\">contact us</a> or check out our Appwrite <a href=\"https://github.com/appwrite/sdk-generator\" target=\"_blank\" rel=\"noopener\">SDK Generator</a> project GitHub repository and read our <a href=\"https://github.com/appwrite/sdk-generator/blob/master/CONTRIBUTING.md\" target=\"_blank\" rel=\"noopener\">contribution guide</a>.</p>\n\n<h2><a href=\"/docs/sdks#noSDK\" id=\"noSDK\">Integrate without an SDK</a></h2>\n\n<p>We are always looking to add new SDKs to our platform, but if the SDK you are looking for is still missing or in a beta channel, you can always integrate with Appwrite directly using any standard HTTP client and the Appwrite REST API. You can learn more about <a href=\"https://dev.to/eldadfux/learn-how-you-can-take-advantage-of-the-appwrite-api-without-using-any-sdk-a41\" rel=\"noopener\" target=\"_blank\">how you can integrate directly with Appwrite HTTP API</a> from our dedicated blog post on the topic.</p>\n\n<h2><a href=\"/docs/sdks#community\" id=\"community\">Community</a></h2>\n\n<p>If you have created your own framework or any other technology specific integration and would like us to list it here please <a href=\"/contact\">contact us</a>.</p>","metadata":{"source":"./appwrite-docs/sdks.phtml"}}],[{"pageContent":"<p>Appwrite was designed for security and privacy. We built the server, services, and APIs with lots of built-in security features to provide protection by default to both developers building apps on Appwrite and users consuming those apps.</p>\n\n<p>Below is a list of some security features enabled by default when you set up your new Appwrite project.</p>\n\n<h2>SSL Certificates</h2>\n\n<p>Appwrite uses <a href=\"https://github.com/traefik/traefik\" target=\"_blank\" rel=\"noopener\">Traefik</a> and <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">Let's Encrypt</a> to serve, create, and renew SSL certificates for your Appwrite server and any custom domains set for your projects.</p>\n\n<p>Once a new SSL certificate has been created, Appwrite will renew it 60 days before its 90 days of default expiration. Auto-generation of SSL certificates is only possible for public-facing domains. When used with localhost, Appwrite will generate a <a href=\"https://en.wikipedia.org/wiki/Self-signed_certificate\" target=\"_blank\" rel=\"noopener\">self-signed SSL certificate</a>.</p>\n\n<h2>Data Encryption</h2>\n\n<p>By default, Appwrite stores all your server sensitive information encrypted. This information includes Webhooks HTTP passwords, Cloud Functions custom environment vars and secrets, API keys secret key (from v0.7), and OAuth secret tokens. All the data is encrypted using your server private encryption key, configurable from your server <a href=\"/docs/environment-variables\">environment variables</a>.</p>\n\n<h2>Storage Encryption</h2>\n\n<h2>Password Hashing</h2>\n\n<h2>Resource Level Security</h2>\n\n<h2>Abuse Protection & Rate-Limiting</h2>\n\n<h2>Custom Domains</h2>\n\n<h2>Secure Cookies</h2>\n\n<h2>Enforcing HTTPS</h2>\n\n<h2>Anonymity</h2>\n\n<h2>Data Retention</h2>","metadata":{"source":"./appwrite-docs/security.phtml"}}],[{"pageContent":"<p>Appwrite was designed from the ground up with self-hosting in mind. You can install and run Appwrite on any operating system that can run a <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener\">Docker CLI</a>. Self-hosted Appwrite instances can be configured flexibly with access to the same features found on Appwrite Cloud.</p>\n\n<h2><a href=\"#systemRequirements\" id=\"systemRequirements\">System Requirements</a></h2>\n\n<p>Appwrite is designed to run well on both small and large deployments. The minimum requirements to run Appwrite are as little as <b>1 CPU core</b> and <b>2GB of RAM</b>, and an operating system that supports Docker.</p>\n\n<p>Appwrite requires <a href=\"https://docs.docker.com/compose/install/\" target=\"_blank\" rel=\"noopener\">Docker Compose Version 2</a>. To install Appwrite, make sure your Docker installation is updated to support Composer V2.</p>\n\n<div class=\"notice margin-bottom\">\n    <h3>Upgrading From Older Versions</h3>\n    <p>If you are migrating from an older version of Appwrite, you need to follow the <a href=\"/docs/upgrade\">migration instructions</a>.</p>\n</div>\n\n<h2><a href=\"#installWithDocker\" id=\"installWithDocker\">Install with Docker</a></h2>\n\n<p>The easiest way to start running your Appwrite server is by running our Docker installer tool from your terminal. Before running the installation command, make sure you have <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener\">Docker CLI</a> installed on your host machine.</p>\n\n<p>You will be prompted to configure the following during the setup command:</p>\n<ol class=\"margin-top margin-bottom-large text-size-normal\">\n    <li>Your Appwrite instance's HTTP and HTTPS ports.</li>\n    <li>Your Appwrite instance's secret key which used to encrypt sensitive data.</li>\n    <li>Your Appwrite instance's main hostname. Appwrite will generate a certificate using this hostname.</li>\n    <li>Your Appwrite instance's DNS A record hostname. Typically set to the same value as your Appwrite instance's hostname.</li>\n</ol>\n\n<h3><a href=\"#unix\" id=\"unix\">Unix</a></h3>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker run -it --rm \\\n    --volume /var/run/docker.sock:/var/run/docker.sock \\\n    --volume \"$(pwd)\"/appwrite:/usr/src/code/appwrite:rw \\\n    --entrypoint=\"install\" \\\n    appwrite/appwrite:<?php echo APP_VERSION_STABLE; ?></code></pre>\n</div>\n\n<h3><a href=\"#windows\" id=\"windows\">Windows</a></h3>\n\n<p>Hyper-V and Containers Windows features must be enabled to run Appwrite on Windows with Docker. If you don't have these features available, you can install <a href=\"https://docs.docker.com/desktop/windows/install/\" target=\"_blank\" rel=\"noopener\">Docker Desktop</a> which uses Virtualbox to run Appwrite on a Virtual Machine.</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h4>CMD</h4>\n\n        <div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CMD\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker run -it --rm ^\n    --volume //var/run/docker.sock:/var/run/docker.sock ^\n    --volume \"%cd%\"/appwrite:/usr/src/code/appwrite:rw ^\n    --entrypoint=\"install\" ^\n    appwrite/appwrite:<?php echo APP_VERSION_STABLE; ?></code></pre>\n        </div>\n\n    </li>\n    <li>\n        <h4>PowerShell</h4>\n\n        <div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"PowerShell\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker run -it --rm `\n    --volume /var/run/docker.sock:/var/run/docker.sock `\n    --volume ${pwd}/appwrite:/usr/src/code/appwrite:rw `\n    --entrypoint=\"install\" `\n    appwrite/appwrite:<?php echo APP_VERSION_STABLE; ?></code></pre>\n        </div>\n    </li>\n</ul>\n\n<h2><a href=\"#one-click-setups\" id=\"one-click-setups\">One-Click Setups</a></h2>\n\n<p>\n    In addition to running Appwrite locally, you can also launch Appwrite using a pre-configured setup.\n    This allows you to get up and running with Appwrite quickly without installing Docker on your local machine.\n</p>\n\n<p>Choose from one of the providers below:</p>\n\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large text-size-small vertical\">\n    <thead>\n        <tr>\n            <th style=\"width: 80px\"></th>\n            <th style=\"width: 180px\">Provider</th>\n            <th style=\"width: 120px\"></th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>\n                <img src=\"/images-ee/one-click/digitalocean.svg\" alt=\"Logo\" height=\"30\" class=\"force-light sdk-logo margin-start margin-end\" />\n                <img src=\"/images-ee/one-click/dark/digitalocean.svg\" alt=\"Logo\" height=\"30\" class=\"force-dark sdk-logo margin-start margin-end\" />\n            </td>\n            <td>\n                DigitalOcean\n            </td>\n            <td>\n                <a href=\"https://marketplace.digitalocean.com/apps/appwrite\" target=\"_blank\" rel=\"noopener\">Click to Install</a>\n            </td>\n        </tr>        \n        <tr>\n            <td>\n                <img src=\"/images-ee/one-click/gitpod.svg\" alt=\"Logo\" height=\"30\" class=\"force-light sdk-logo margin-start margin-end\" />\n                <img src=\"/images-ee/one-click/dark/gitpod.svg\" alt=\"Logo\" height=\"30\" class=\"force-dark sdk-logo margin-start margin-end\" />\n            </td>\n            <td>\n                Gitpod\n            </td>\n            <td>\n                <a href=\"https://gitpod.io/#https://github.com/appwrite/integration-for-gitpod\" target=\"_blank\" rel=\"noopener\">Click to Install</a>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <img src=\"/images-ee/one-click/akamai.svg\" alt=\"Logo\" height=\"30\" class=\"force-light sdk-logo margin-start margin-end\" />\n                <img src=\"/images-ee/one-click/dark/akamai.svg\" alt=\"Logo\" height=\"30\" class=\"force-dark sdk-logo margin-start margin-end\" />\n            </td>\n            <td>\n                Akamai Compute\n            </td>\n            <td>\n                <a href=\"https://www.linode.com/marketplace/apps/appwrite/appwrite/\" target=\"_blank\" rel=\"noopener\">Click to Install</a>\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n<h2><a href=\"#next-steps\" id=\"next-steps\">Next Steps</a></h2>\n<p>Self-hosting Appwrite gives you more configurable options. You can customize Appwrite with your choice of S3 compatible storage adaptors, email and SMS providers, functions runtimes, and more.</p>\n\n<p><a href=\"/docs/configuration\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> Learn about configuring Appwrite</a></p>\n\n<p>Self-hosted Appwrite instances can be made production ready. To run Appwrite successfully in a production environment, you should follow a few basic concepts and best practices.</p>\n<p><a href=\"/docs/production\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> Learn about Appwrite in production</a></p>\n\n<h2><a href=\"#manual\" id=\"manual\">Manual (using docker-compose.yml)</a></h2>\n\n<p>For advanced Docker users, the manual installation might seem more familiar. To set up Appwrite manually, download the Appwrite base <a href=\"/install/compose\" target=\"_blank\">docker-compose.yml</a> and <a href=\"/install/env\" target=\"_blank\">.env</a> files, then move them inside a directory named <code>appwrite</code>. After the download completes, update the different environment variables as you wish in the <code>.env</code> file and start the Appwrite stack using the following Docker command:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker compose up -d --remove-orphans</code></pre>\n</div>\n\n<p>Once the Docker installation completes, go to your machine's hostname or IP address on your browser to access the Appwrite console. Please note that on hosts that are not Linux-native, the server might take a few minutes to start after installation completes.</p>\n\n<h2><a href=\"#stop\" id=\"stop\">Stop</a></h2>\n\n<p>You can stop your Appwrite containers by using the following command executed from the same directory as your <code>docker-compose.yml</code> file.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker compose stop</code></pre>\n</div>\n\n<h2><a href=\"#uninstall\" id=\"uninstall\">Uninstall</a></h2>\n\n<p>To stop and remove your Appwrite containers, you can use the following command executed from the same directory as your <code>docker-compose.yml</code> file.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker compose down -v</code></pre>\n</div>","metadata":{"source":"./appwrite-docs/self-hosting.phtml"}}],[{"pageContent":"<p>Appwrite supports phone authentication, which allows users to create accounts and log in using SMS messages. Appwrite requires an SMS provider to be setup before using Phone authentication.</p>\n\n<h2><a href=\"/docs/sms-delivery#providers\" id=\"providers\">SMS Providers</a></h2>\n<p>Appwrite supports a growing list of SMS providers that you can choose from. Choose one from the list below and set up an account.</p>\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large text-size-small vertical\">\n    <thead>\n        <tr>\n            <th style=\"width: 80px\"></th>\n            <th>SMS Provider</th>\n            <th>Create Account</th>\n            <th>Get Credentials</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>\n                <img src=\"/images-ee/sms-providers/twilio.svg\" alt=\"Logo\" height=\"30\" class=\"force-light sdk-logo margin-start margin-end\" />\n                <img src=\"/images-ee/sms-providers/dark/twilio.svg\" alt=\"Logo\" height=\"30\" class=\"force-dark sdk-logo margin-start margin-end\" />\n            </td>\n            <td>\n                Twilio\n            </td>\n            <td>\n                <a href=\"https://www.twilio.com\" target=\"_blank\" rel=\"noopener\">Website</a>\n            </td>\n            <td>\n                <a href=\"https://www.twilio.com/docs/iam/access-tokens#step-2-api-key\" target=\"_blank\" rel=\"noopener\">Documentation</a>\n            </td>\n        </tr>        \n        <tr>\n            <td>\n                <img src=\"/images-ee/sms-providers/textmagic.svg\" alt=\"Logo\" height=\"30\" class=\"force-light sdk-logo margin-start margin-end\" />\n                <img src=\"/images-ee/sms-providers/dark/textmagic.svg\" alt=\"Logo\" height=\"30\" class=\"force-dark sdk-logo margin-start margin-end\" />\n            </td>\n            <td>\n                TextMagic\n            </td>\n            <td>\n                <a href=\"https://www.textmagic.com\" target=\"_blank\" rel=\"noopener\">Website</a>\n            </td>\n            <td>\n                <a href=\"https://www.textmagic.com/docs/api/start/#How-to-obtain-the-API-credentials\" target=\"_blank\" rel=\"noopener\">Documentation</a>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <img src=\"/images-ee/sms-providers/telesign.svg\" alt=\"Logo\" height=\"30\" class=\"force-light sdk-logo margin-start margin-end\" />\n                <img src=\"/images-ee/sms-providers/dark/telesign.svg\" alt=\"Logo\" height=\"30\" class=\"force-dark sdk-logo margin-start margin-end\" />\n            </td>\n            <td>\n                Telesign\n            </td>\n            <td>\n                <a href=\"https://www.telesign.com\" target=\"_blank\" rel=\"noopener\">Website</a>\n            </td>\n            <td>\n                <a href=\"https://support.telesign.com/s/article/Find-Customer-ID-and-API-Key\" target=\"_blank\" rel=\"noopener\">Documentation</a>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <img src=\"/images-ee/sms-providers/msg91.svg\" alt=\"Logo\" height=\"30\" class=\"force-light sdk-logo margin-start margin-end\" />\n                <img src=\"/images-ee/sms-providers/dark/msg91.svg\" alt=\"Logo\" height=\"30\" class=\"force-dark sdk-logo margin-start margin-end\" />\n            </td>\n            <td>\n                MSG91\n            </td>\n            <td>\n                <a href=\"https://msg91.com\" target=\"_blank\" rel=\"noopener\">Website</a>\n            </td>\n            <td>\n                <a href=\"https://msg91.com/help/where-can-i-find-my-authentication-key\" target=\"_blank\" rel=\"noopener\">Documentation</a>\n            </td>\n        </tr>\n        <tr>\n            <td>\n                <img src=\"/images-ee/sms-providers/vonage.svg\" alt=\"Logo\" height=\"30\" class=\"force-light sdk-logo margin-start margin-end\" />\n                <img src=\"/images-ee/sms-providers/dark/vonage.svg\" alt=\"Logo\" height=\"30\" class=\"force-dark sdk-logo margin-start margin-end\" />\n            </td>\n            <td>\n                Vonage\n            </td>\n            <td>\n                <a href=\"https://www.vonage.ca/\" target=\"_blank\" rel=\"noopener\">Website</a>\n            </td>\n            <td>\n                <a href=\"https://developer.vonage.com/en/account/secret-management\" target=\"_blank\" rel=\"noopener\">Documentation</a>\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n<h2><a href=\"/docs/sms-delivery#updateEnvFile\" id=\"updateEnvFile\">Update Your .env File</a></h2>\n<p>You will need to configure these <a href=\"/docs/environment-variables#phone\">environment variables</a> and restart your Appwrite containers before you can use phone authentication.</p>\n\n<table class=\"full\">\n    <thead>\n    <tr>\n        <td style=\"width: 80px\">Provider</td>\n        <td>_APP_SMS_PROVIDER</td>\n        <td style=\"width: 250px\">_APP_SMS_FROM</td>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>Twilio</td>\n        <td><code>sms://[ACCOUNT SID]:[AUTH TOKEN]@twilio</code></td>\n        <td><code>[TWILIO PHONE NUMBER]</code></td>\n    </tr>\n    <tr>\n        <td>TextMagic</td>\n        <td><code>sms://[USERNAME]:[API KEY]@text-magic</code></td>\n        <td><code>[PHONE NUMBER OR SENDER ID]</code></td>\n    </tr>\n    <tr>\n        <td>TeleSign</td>\n        <td><code>sms://[CUSTOMER ID]:[API KEY]@telesign</code></td>\n        <td><code>[TELESIGN PHONE NUMBER]</code></td>\n    </tr>\n    <tr>\n        <td>MSG91</td>\n        <td><code>sms://[SENDER ID]:[AUTH KEY]@MSG91</code></td>\n        <td><code>[FLOW ID]</code></td>\n    </tr>\n    <tr>\n        <td>Vonage</td>\n        <td><code>sms://[API KEY]:[API SECRET]@vonage</code></td>\n        <td><code>[PHONE NUMBER OR BRAND NAME]</code></td>\n    </tr>\n    </tbody>\n</table>\n\n<h2><a href=\"/docs/sms-delivery#restartServer\" id=\"restartServer\">Restart Your Appwrite Server</a></h2>\n\n<p>Once you've updated your <code>.env</code> file, you need to restart your Appwrite instance. Navigate to the directory containing the <code>docker-compose.yml</code> file of your Appwrite instance and run the following command from your terminal:</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker compose up -d</code></pre>\n</div>\n\n<p>\n    You can verify if the environment variables have changed by running this command:\n</p>\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker compose exec appwrite-worker-messaging vars</code></pre>\n</div>","metadata":{"source":"./appwrite-docs/sms-delivery.phtml"}}],[{"pageContent":"<p>Appwrite Storage allows you to manage files in your project. You can use it to store images, videos, documents, and other files for your projects. It provides APIs to upload, download, delete, and list files. Not only that Appwrite storage service provides APIs to manipulate images. Using the preview endpoint, you can crop, resize, rotate, add borders and border-radius and select the desired output format for your image. The preview API also allows you to change your image's quality, format, or compression, including WebP support for maximum optimization of your network bandwidth.\n</p>\n\n<h2><a href=\"/docs/storage#bucket\" id=\"bucket\">Buckets</a></h2>\n\n<p>Storage buckets are similar to collections in the <a href=\"/docs/databases\">Databases</a> service. The difference is buckets also provide more power to decide what kinds of files, what sizes you want to allow in that bucket, whether or not to encrypt the files, scan with antivirus, and more. Let's look at how we can create a bucket and configure it to your needs.</p>\n\n<h3><a href=\"/docs/storage#createBucket\" id=\"createBucket\">Create Bucket</a></h3>\n\n<p>You can create your bucket from your Appwrite project's dashboard, using any of our server-side SDKs, or directly using our REST API authenticated using an API Key. To create a bucket from the Appwrite Console, access your Storage dashboard from your project's left navigation panel. Click <b>Add Bucket</b> button and choose your bucket's name. You can also set a custom ID for your bucket instead of an auto-generated ID for convenience. This will create a new bucket and take you to its settings page, where you can configure various options for your bucket.</p>\n\n<p>You can manage your buckets programmatically using one of Appwrite's Server <a href=\"/docs/sdks#server\">SDKs</a> or REST API paired with an API Key. You can manage files with both Server and Client side.</p>\n\n<h4><a href=\"/docs/storage#permission\" id=\"permission\">Permissions</a></h4>\n\n<p>The Storage Service allows you to configure permissions at both the bucket level and the file level. When a user has the appropriate type of <a href=\"/docs/permissions/\">access permissions</a> granted at <b>either</b> the bucket or the file level, they will be able to access the file. If the permission field is left empty, no one can access the file.</p>\n\n<h5>File Level Permissions</h5>\n<p>File level permissions grant access to individual files. File level permissions are only enabled if File Security is enabled in the settings of your bucket.\n</p>\n\n<h5>Bucket Level Permissions</h5>\n<p>Bucket level permissions apply to every file in the bucket.</p>\n\n<h4><a href=\"/docs/storage#bucketConfig\" id=\"bucketConfig\">More Bucket Configurations</a></h4>\n\n<p>Storage buckets have many configuration options, including the type and maximum size of files in the bucket, whether encryption or anti-virus is enabled,  and the compression algorithm to use. If you look at the bucket settings or the REST API example above, you can find these configurations. Let's look at what those are:</p>\n\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large\">\n    <thead>\n        <tr>\n            <th style=\"width: 250px\">Parameter</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>allowedFileExtensions</td>\n            <td>This parameter allows you to provide a list of file extensions that will be accepted into the bucket.</td>\n        </tr>\n        <tr>\n            <td>maximumFileSize</td>\n            <td>This parameter allows you to set the maximum size of a file that a bucket accepts. The buckets will accept any file less than or equal to the size provided here.</td>\n        </tr>\n        <tr>\n            <td>encryption</td>\n            <td>This parameter allows you to configure whether or not the files inside the bucket will be encrypted. We don't encrypt files bigger than 20MB.</td>\n        </tr>\n        <tr>\n            <td>antivirus</td>\n            <td>This parameter allows you to configure whether or not the files being added inside the bucket be scanned by antivirus. We don't scan files bigger than 20MB.</td>\n        </tr>\n    </tbody>\n</table>\n\n<p>You can learn more about storage buckets and APIs you can use to manage storage buckets from our <a href=\"/docs/server/storage\">Storage documentation</a>. Now that we know how to create and configure buckets for our applications, let's look at how to manage files using the storage service.</p>\n\n<h2><a href=\"/docs/storage#createFile\" id=\"createFile\">Create File</a></h2>\n\n<p>After you create a bucket or have navigated to bucket details, you can access the <b>Files</b> tab so you can upload, view, delete and update files in the bucket using the Appwrite project's dashboard. You can also perform all those operations from Appwrite's client SDK, server SDKs, and REST APIs as long as you have the proper permission.</p>\n\n<p>When you are in the <b>Files</b> tab, you can click <b>Add File</b> and select a file to upload. If the bucket is configured to accept the file type and size you are uploading, your file will be uploaded, and you will see the file in the list of files.\n</p>\n\n<p>You can also upload files programmatically using our SDKs:</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>Web</h3>\n        <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>import { Client, Storage } from \"appwrite\";\n\nconst client = new Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')\n    .setProject('[PROJECT_ID]');\n\nconst storage = new Storage(client);\n\nconst promise = storage.createFile(\n    '[BUCKET_ID]',\n    ID.unique(),\n    document.getElementById('uploader').files[0]\n);\n\npromise.then(function (response) {\n    console.log(response); // Success\n}, function (error) {\n    console.log(error); // Failure\n});\n            </code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Flutter</h3>\n        <div class=\"ide\" data-lang=\"dart\" data-lang-label=\"Flutter SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>import 'package:appwrite/appwrite.dart';\n\nvoid main() { // Init SDK\n  final client = Client()\n    .setEndpoint('https://cloud.appwrite.io/v1')\n    .setProject('[PROJECT_ID]');\n\n  final storage = Storage(client);\n\n  final file = await storage.createFile(\n    bucketId: '[BUCKET_ID]',\n    fileId: ID.unique(),\n    file: InputFile.fromPath(path: './path-to-files/image.jpg', filename: 'image.jpg'),\n  );\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide\" data-lang=\"kotlin\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>import io.appwrite.Client\nimport io.appwrite.services.Storage\n\nsuspend fun main() {\n    val client = Client(applicationContext)\n        .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n        .setProject(\"[PROJECT_ID]\") // Your project ID\n\n    val storage = Storage(client)\n\n    val file = storage.createFile(\n        bucketId = \"[BUCKET_ID]\",\n        fileId = ID.unique(),\n        file = File(\"./path-to-files/image.jpg\"),\n    )\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide\" data-lang=\"swift\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>import Appwrite\n\nfunc main() async throws {\n    let client = Client()\n      .setEndpoint(\"https://cloud.appwrite.io/v1\")\n      .setProject(\"[PROJECT_ID]\")\n\n    let storage = Storage(client)\n\n    let file = try await storage.createFile(\n        bucketId: \"[BUCKET_ID]\",\n        fileId: ID.unique(),\n        file: InputFile.fromBuffer(yourByteBuffer,\n            filename: \"image.jpg\",\n            mimeType: \"image/jpeg\"\n        )\n    )\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>GraphQL</h3>\n        <div class=\"ide\" data-lang=\"http\" data-lang-label=\"HTTP\">\n            <pre class=\"line-numbers\"><code class=\"prism language-http\" data-prism>POST /v1/storage/buckets/{bucketId}/files HTTP/1.1\nContent-Type: multipart/form-data; boundary=\"cec8e8123c05ba25\"\nContent-Length: *Length of your entity body in bytes*\nX-Appwrite-Project: [PROJECT_ID]\n\n--cec8e8123c05ba25\nContent-Disposition: form-data; name=\"operations\"\n\n{ \"query\": \"mutation CreateFile($bucketId: String!, $fileId: String!, $file: InputFile!) { storageCreateFile(bucketId: $bucketId, fileId: $fileId, file: $file) { id } }\", \"variables\": { \"bucketId\": \"[BUCKET_ID]\", \"fileId\": \"[FILE_ID]\", \"file\": null } }\n--cec8e8123c05ba25\nContent-Disposition: form-data; name=\"map\"\n\n{ \"0\": [\"variables.file\"] }\n--cec8e8123c05ba25\nContent-Disposition: form-data; name=\"0\"; filename=\"file.txt\"\nContent-Type: text/plain\n\nFile content.\n\n--cec8e8123c05ba25--</code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>\n    When you are trying to upload any files above 5MB, you will need to upload them in chunks for better reliability and performance. If you're using an Appwrite SDK, this is handled automatically. If you're not using an SDK, you can learn more about file handling in the <a href=\"/docs/rest#file-handling\">REST API</a> docs.\n</p>\n\n<h2><a href=\"/docs/storage#file-input\" id=\"file-input\">File Input</a></h2>\n\n<p>\n    Every language and platform handles file inputs differently. This section documents the expected input type of each SDK. Where applicable, Appwrite provides a <code>InputFile</code> class to accept multiple file sources, like paths, buffers, streams, or plain text.\n</p>\n\n<h3><a href=\"/docs/storage#file-input-client\" id=\"file-input-client\">Client SDK</a></h3>\n<ul class=\"phases clear\" data-ui-phases>\n<li>\n    <h3>Web</h3>\n    <p>\n        The Appwrite Web SDK expects a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File\" target=\"_blank\" rel=\"noopener\">File</a> object for file creation. This is most commonly associated with DOM file inputs.\n    </p>\n\n    <p>\n        For example, for the input tag <code><?php echo htmlentities('<input type=\"file\" id=\"uploader\" />'); ?></code>, you would call create file like this:\n    </p>\n    <div class=\"ide\" data-lang=\"javascript\" data-lang-label=\"Web SDK\">\n        <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>const promise = storage.createFile(\n    '[BUCKET_ID]',\n    ID.unique(),\n    document.getElementById('uploader').files[0]\n);</code></pre>\n    </div>\n\n</li>\n<li>\n    <h3>Flutter</h3>\n    <p>\n        The Appwrite Flutter SDK expects an <code>InputFile</code> class for file inputs.\n    </p>\n    <table class=\"full text-size-small\">\n        <thead>\n        <tr>\n            <td style=\"width: 200px\">Method</td>\n            <td>Description</td>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>InputFile.fromPath(path: [PATH], filename: [NAME], contentType: [MIME TYPE])</code></td>\n            <td>Used to upload files from a provided path, <code>filename</code> and <code>contentType</code> are optional. Used for Flutter apps on mobile and desktop.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.fromBytes(bytes: [BYTE LIST], filename: [NAME], contentType: [MIME TYPE])</code></td>\n            <td>Used to upload files from a byte list, <code>contentType</code> is optional. Used for Flutter apps on web</td>\n        </tr>\n        </tbody>\n    </table>\n</li>\n<li>\n    <h3>Android</h3>\n    <p>\n        The Appwrite Android SDK expects an <code>InputFile</code> class for file inputs.\n    </p>\n    <table class=\"full text-size-small\">\n        <thead>\n        <tr>\n            <td style=\"width: 200px\">Method</td>\n            <td>Description</td>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>InputFile.fromPath(path: String)</code></td>\n            <td>Used to upload files from a provided path.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.fromFile(file: File)</code></td>\n            <td>Used to upload files from a <a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/File.html\" target=\"_blank\" rel=\"noopener\">File</a> object.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.fromBytes(bytes: ByteArray, filename: String, mimeType: String)</code></td>\n            <td>Used to upload files from a <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte-array/\" target=\"_blank\" rel=\"noopener\">ByteArray</a> object. Specify the file <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\" target=\"_blank\" rel=\"noopener\">MIME type</a> using the <code>mimeType</code> param.</td>\n        </tr>\n        </tbody>\n    </table>\n</li>\n<li>\n    <h3>Apple</h3>\n    <p>\n        The Appwrite Apple SDK expects an <code>InputFile</code> class for file inputs.\n    </p>\n    <table class=\"full text-size-small\">\n        <thead>\n        <tr>\n            <td style=\"width: 200px\">Method</td>\n            <td>Description</td>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>InputFile.fromPath(_ path: String)</code></td>\n            <td>Used to upload files from a provided path.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.fromData(_ data: Data, filename: String, mimeType: String)</code></td>\n            <td>Used to upload files from a <a href=\"https://developer.apple.com/documentation/foundation/data\" target=\"_blank\" rel=\"noopener\">Data</a> object. Specify the file <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\" target=\"_blank\" rel=\"noopener\">MIME type</a> using the <code>mimeType</code> param.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.fromBuffer(_ buffer: ByteBuffer, filename: String, mimeType: String)</code></td>\n            <td>Used to upload files from a <a href=\"https://swiftinit.org/reference/swift-nio/niocore/bytebuffer\" target=\"_blank\" rel=\"noopener\">NIO Buffer</a> object. Specify the file <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\" target=\"_blank\" rel=\"noopener\">MIME type</a> using the <code>mimeType</code> param.</td>\n        </tr>\n        </tbody>\n    </table>\n</li>\n</ul>\n\n<h3><a href=\"/docs/storage#file-input-server\" id=\"file-input-server\">Server SDK</a></h3>\n<ul class=\"phases clear\" data-ui-phases>\n<li>\n    <h3>Node.js</h3>\n\n    <p>\n        The Appwrite NodeJS SDK expects an <code>InputFile</code> class for file inputs.\n    </p>\n    <table class=\"full text-size-small\">\n        <thead>\n        <tr>\n            <td style=\"width: 200px\">Method</td>\n            <td>Description</td>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>InputFile.fromPath(filePath, filename)</code></td>\n            <td>Used to upload files from a provided path.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.fromBuffer(buffer, filename)</code></td>\n            <td>Used to upload files from a <a href=\"https://nodejs.org/api/buffer.html#buffer\" target=\"_blank\" rel=\"noopener\">Buffer</a> object.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.fromBlob(blob, filename)</code></td>\n            <td>Used to upload files from a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Blob\" target=\"_blank\" rel=\"noopener\">Blob</a> object.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.fromStream(stream, filename, size)</code></td>\n            <td>Used to upload files from a <a href=\"https://nodejs.org/api/stream.html#readable-streams\" target=\"_blank\" rel=\"noopener\">Readable Stream</a> object.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.fromPlainText(content, filename)</code></td>\n            <td>Used to upload files in plain text. Expects a string encoded in UTF-8.</td>\n        </tr>\n        </tbody>\n    </table>\n</li>\n<li>\n    <h3>PHP</h3>\n    <p>\n        The Appwrite PHP SDK expects an <code>InputFile</code> class for file inputs.\n    </p>\n    <table class=\"full text-size-small\">\n        <thead>\n        <tr>\n            <td style=\"width: 200px\">Method</td>\n            <td>Description</td>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>InputFile.withPath(string $path, ?string $mimeType = null, ?string $filename = null)</code></td>\n            <td>Used to upload files from a provided path.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.withData(string $data, ?string $mimeType = null, ?string $filename = null)</code></td>\n            <td>Used to upload files from a string.</td>\n        </tr>\n        </tbody>\n    </table>\n</li>\n<li>\n    <h3>Python</h3>\n    <p>\n        The Appwrite Python SDK expects an <code>InputFile</code> class for file inputs.\n    </p>\n    <table class=\"full text-size-small\">\n        <thead>\n        <tr>\n            <td style=\"width: 200px\">Method</td>\n            <td>Description</td>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>InputFile.from_path(path)</code></td>\n            <td>Used to upload files from a provided path.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.from_bytes(bytes)</code></td>\n            <td>Used to upload files from an array of bytes.</td>\n        </tr>\n        </tbody>\n    </table>\n</li>\n<li>\n    <h3>Ruby</h3>\n    <p>\n        The Appwrite Ruby SDK expects an <code>InputFile</code> class for file inputs.\n    </p>\n    <table class=\"full text-size-small\">\n        <thead>\n        <tr>\n            <td style=\"width: 200px\">Method</td>\n            <td>Description</td>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>InputFile.from_path(path)</code></td>\n            <td>Used to upload files from a provided path.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.from_string(string)</code></td>\n            <td>Used to upload files from a String.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.from_bytes(bytes)</code></td>\n            <td>Used to upload files from an array of bytes.</td>\n        </tr>\n        </tbody>\n    </table>\n</li>\n<li>\n    <h3>Deno</h3>    \n    <p>\n        The Appwrite Deno SDK expects an <code>InputFile</code> class for file inputs.\n    </p>\n    <table class=\"full text-size-small\">\n        <thead>\n        <tr>\n            <td style=\"width: 200px\">Method</td>\n            <td>Description</td>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>InputFile.fromPath(filePath, filename)</code></td>\n            <td>Used to upload files from a provided path.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.fromBuffer(buffer, filename)</code></td>\n            <td>Used to upload files from a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\" target=\"_blank\" rel=\"noopener\">Uint8Array</a> object.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.fromPlainText(content, filename)</code></td>\n            <td>Used to upload files in plain text. Expects a string encoded in UTF-8.</td>\n        </tr>\n        </tbody>\n    </table>\n</li>\n<li>\n    <h3>Dart</h3>\n    <p>\n        The Appwrite Dart SDK expects an <code>InputFile</code> class for file inputs.\n    </p>\n    <table class=\"full text-size-small\">\n        <thead>\n        <tr>\n            <td style=\"width: 200px\">Method</td>\n            <td>Description</td>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>InputFile.fromPath(path: [PATH], filename: [NAME], contentType: [MIME TYPE])</code></td>\n            <td>Used to upload files from a provided path, <code>filename</code> and <code>contentType</code> are optional.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.fromBytes(bytes: [BYTE LIST], filename: [NAME], contentType: [MIME TYPE])</code></td>\n            <td>Used to upload files from a byte list, <code>contentType</code> is optional.</td>\n        </tr>\n        </tbody>\n    </table>\n</li>\n<li>\n    <h3>Kotlin</h3>\n    <p>\n        The Appwrite Kotlin SDK expects an <code>InputFile</code> class for file inputs.\n    </p>\n    <table class=\"full text-size-small\">\n        <thead>\n        <tr>\n            <td style=\"width: 200px\">Method</td>\n            <td>Description</td>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>InputFile.fromPath(path: String)</code></td>\n            <td>Used to upload files from a provided path.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.fromFile(file: File)</code></td>\n            <td>Used to upload files from a <a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/File.html\" target=\"_blank\" rel=\"noopener\">File</a> object.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.fromBytes(bytes: ByteArray, filename: String, mimeType: String)</code></td>\n            <td>Used to upload files from a <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte-array/\" target=\"_blank\" rel=\"noopener\">ByteArray</a> object. Specify the file <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\" target=\"_blank\" rel=\"noopener\">MIME type</a> using the <code>mimeType</code> param.</td>\n        </tr>\n        </tbody>\n    </table>\n    \n</li>\n<li>\n    <h3>Swift</h3>\n    <p>\n        The Appwrite Swift SDK expects an <code>InputFile</code> class for file inputs.\n    </p>\n    <table class=\"full text-size-small\">\n        <thead>\n        <tr>\n            <td style=\"width: 200px\">Method</td>\n            <td>Description</td>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>InputFile.fromPath(_ path: String)</code></td>\n            <td>Used to upload files from a provided path.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.fromData(_ data: Data, filename: String, mimeType: String)</code></td>\n            <td>Used to upload files from a <a href=\"https://developer.apple.com/documentation/foundation/data\" target=\"_blank\" rel=\"noopener\">Data</a> object. Specify the file <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\" target=\"_blank\" rel=\"noopener\">MIME type</a> using the <code>mimeType</code> param.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.fromBuffer(_ buffer: ByteBuffer, filename: String, mimeType: String)</code></td>\n            <td>Used to upload files from a <a href=\"https://swiftinit.org/reference/swift-nio/niocore/bytebuffer\" target=\"_blank\" rel=\"noopener\">NIO Buffer</a> object. Specify the file <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\" target=\"_blank\" rel=\"noopener\">MIME type</a> using the <code>mimeType</code> param.</td>\n        </tr>\n        </tbody>\n    </table>\n</li><li>\n    <h3>.NET</h3>\n    <p>\n        The Appwrite .NET SDK expects an <code>InputFile</code> class for file inputs.\n    </p>\n    <table class=\"full text-size-small\">\n        <thead>\n        <tr>\n            <td style=\"width: 200px\">Method</td>\n            <td>Description</td>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>InputFile.FromPath(string path)</code></td>\n            <td>Used to upload files from a provided path.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.FromStream(Stream stream, string filename, string mimeType)</code></td>\n            <td>Used to upload files from a <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.io.stream?view=net-7.0\" target=\"_blank\" rel=\"noopener\">Stream</a> object. Specify the file <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\" target=\"_blank\" rel=\"noopener\">MIME type</a> using the <code>mimeType</code> param.</td>\n        </tr>\n        <tr>\n            <td><code>InputFile.FromBytes(byte[] bytes, string filename, string mimeType)</code></td>\n            <td>Used to upload files from an array of bytes. Specify the file <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\" target=\"_blank\" rel=\"noopener\">MIME type</a> using the <code>mimeType</code> param.</td>\n        </tr>\n        </tbody>\n    </table>\n</li>\n</ul>\n\n\n<h2><a href=\"/docs/storage#imagePreview\" id=\"imagePreview\">Image Manipulation</a></h2>\n\n<p>Another great built-in feature of Appwrite is the image manipulation feature. With Appwrite Storage's <a href=\"/docs/client/storage#storageGetFilePreview\">preview endpoint</a> you can manipulate resolution, add borders and the border-radius, add background-color, set the opacity for the image, and get the image in the appropriate output format.\n</p>\n\n<p>This enables a wide range of possibilities! You can manipulate images resolution to display appropriately on responsive websites. You can also adjust the image border, background color, and border-radius to match the theming of your application. The Appwrite Storage also allows you to change the format and compression of your images for network transfer optimization and to help you speed your application. You can do all that without caring about how the image was originally uploaded.</p>\n\n<p>Below you can find all the different parameters offered by the preview endpoint to manipulate the image.</p>\n\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full margin-bottom-large\">\n    <thead>\n        <tr>\n            <th style=\"width: 250px\">Parameter</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>height</td>\n            <td>Set the height of the output image in pixels, the image will be resized keeping the aspect ratio intact. Accepts integer between 0-4000</td>\n        </tr>\n        <tr>\n            <td>width</td>\n            <td>Set the width of the output image in pixels, the image will be resized keeping the aspect ratio intact. Accepts integer between 0-4000</td>\n        </tr>\n        <tr>\n            <td>gravity</td>\n            <td>The gravity while cropping the image providing either width, height or both. Accepts any of: center, top-left, top, top-right, left, right, bottom-left, bottom, bottom-right</td>\n        </tr>\n        <tr>\n            <td>quality</td>\n            <td>Set the quality of the output image. Accepts integer between 0-100, where 100 is the highest quality.</td>\n        </tr>\n        <tr>\n            <td>borderWidth</td>\n            <td>Set a border with given width in pixels to the output image. Accepts integer between 0-100</td>\n        </tr>\n        <tr>\n            <td>borderColor</td>\n            <td>Set a border-color for the output image. Accepts any valid Hex color value without the leading #.</td>\n        </tr>\n        <tr>\n            <td>borderRadius</td>\n            <td>Set a border-radius in pixels. Accepts an integer between 0-4000.</td>\n        </tr>\n        <tr>\n            <td>opacity</td>\n            <td>Set opacity for the output image. Accepts a float value between 0-1, where 0 makes it transparent. Only works with output format supporting alpha channel like png.</td>\n        </tr>\n        <tr>\n            <td>rotation</td>\n            <td>Rotate the output image by a degree. Accepts an integer between -360 to 360.</td>\n        </tr>\n        <tr>\n            <td>background</td>\n            <td>Set a background-color. Accepts any valid Hex color value without the leading #. Only works with output format supporting alpha channel like png.</td>\n        </tr>\n        <tr>\n            <td>output</td>\n            <td>Set the output image format. If not provided, will use the original image's format. Supported formats are: jpg, jpeg, png, gif and webp</td>\n        </tr>\n    </tbody>\n</table>\n\n\n<h2><a href=\"/docs/storage#streaming\" id=\"streaming\">Downloading and Streaming with Range</a></h2>\n\n<p>Appwrite supports streamed downloads using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range\" target=\"_blank\">HTTP range header</a> to gracefully handle large files. If you are using our SDKs or console, nothing is different. Even if you want to download the whole file at once, even if you use the REST endpoint directly, there isn't any difference. However, if you want to get only a part of a file from storage, you can supply the range header and the server will respond with an appropriate chunk of the file.</p>","metadata":{"source":"./appwrite-docs/storage.phtml"}}],[{"pageContent":"<p>To upgrade your Appwrite server from an older version, you should use the Appwrite migration tool <b>after you have installed the new version</b>. The migration tool will adjust your Appwrite data to the new version's structure to make sure your Appwrite data is compatible with any internal changes. </p>\n\n<p>As of version 0.14, Appwrite requires <a href=\"https://docs.docker.com/compose/install/\" target=\"_blank\" rel=\"noopener\">Docker Compose Version 2</a>. To upgrade Appwrite, make sure your Docker installation is updated to support Composer V2.</p>\n\n<div class=\"notice margin-bottom\">\n    <h3>A Note About Migration</h3>\n\n    <p>At present, we support migrations only to the <b>immediately higher versions</b>, i.e from 0.6 to 0.7 and 0.7 to 0.8 and so on. So if you're trying to migrate from 0.6 to 0.8, you will first need to migrate to 0.7 and then to 0.8</p>\n\n    <p>It is highly recommended to <a href=\"https://gist.github.com/Meldiron/47b5851663668102a676aff43c6341f7\" target=\"_blank\" rel=\"noopener\">backup your server</a> data before running the migration. It is recommended to run the migration process on a dev instance and make sure your application is working well and that you have checked for any breaking changes in the new version <a href=\"https://github.com/appwrite/appwrite/tags\" target=\"_blank\" rel=\"noopener\">changelog.</a></p>\n</div>\n\n<p>The first step is to install the latest version of Appwrite. Head to the directory where you ran your previous Appwrite install command. </p>\n\n<div class=\"ide margin-bottom\">\n    <pre class=\"line-numbers\"><code class=\"prism\" data-prism>parent_directory <= you run the command in this directory\n    └── appwrite\n        └── docker-compose.yml</code></pre>\n</div>\n\n<p>This is the parent directory where you will find the <b>appwrite</b> directory, inside which there are <b>docker-compose.yml</b> and <b>.env</b> files.</p>\n\n<h3><a href=\"/docs/upgrade#install-new-version\" id=\"install-new-version\">Installing the Next Version</a></h3>\n\n<ul class=\"phases clear\" data-ui-phases>\n    \n    <li>\n    <h4>Unix</h4>\n    <div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n        <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker run -it --rm \\\n    --volume /var/run/docker.sock:/var/run/docker.sock \\\n    --volume \"$(pwd)\"/appwrite:/usr/src/code/appwrite:rw \\\n    --entrypoint=\"install\" \\\n    appwrite/appwrite:<?php echo APP_VERSION_STABLE; ?></code></pre>\n    </div>\n    </li>\n    <li>\n        <h4>CMD</h4>\n\n        <div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"CMD\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker run -it --rm ^\n    --volume //var/run/docker.sock:/var/run/docker.sock ^\n    --volume \"%cd%\"/appwrite:/usr/src/code/appwrite:rw ^\n    --entrypoint=\"install\" ^\n    appwrite/appwrite:<?php echo APP_VERSION_STABLE; ?></code></pre>\n        </div>\n    </li>\n    <li>\n        <h4>PowerShell</h4>\n\n        <div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"PowerShell\">\n            <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker run -it --rm `\n    --volume /var/run/docker.sock:/var/run/docker.sock `\n    --volume ${pwd}/appwrite:/usr/src/code/appwrite:rw `\n    --entrypoint=\"install\" `\n    appwrite/appwrite:<?php echo APP_VERSION_STABLE; ?></code></pre>\n        </div>\n    </li>\n</ul>\n\n<p>This will pull the <b>docker-compose.yml</b> file for the new version and perform the installation. Once the setup completes, verify that you have the latest version of Appwrite.</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>docker ps | grep appwrite/appwrite</code></pre>\n</div>\n\n<p>Verify that the <b>STATUS</b> doesn't have any errors and all the <b>appwrite/appwrite</b> containers have version : <?php echo APP_VERSION_STABLE; ?></p>\n\n<h3><a href=\"/docs/upgrade#migration\" id=\"migration\">Running the Migration</a></h3>\n<div class=\"notice margin-bottom\">\n    <h3>Upgrading to a minor version</h3>\n    <p>You do not need to run migration when upgrading to a minor version. For example, going from 0.13.0 to 0.13.2 would not require running migration.</p>\n</div>    \n<p>We can now start the migration. Navigate to the <b>appwrite</b> directory where your <b>docker-compose.yml</b> is present and run the following command</p>\n\n<div class=\"ide margin-bottom\" data-lang=\"bash\" data-lang-label=\"Bash\">\n    <pre class=\"line-numbers\"><code class=\"prism language-bash\" data-prism>cd appwrite/\ndocker compose exec appwrite migrate</code></pre>\n</div>\n\n<p>The data migration can take longer depending on the amount of data your Appwrite instance contains. The Appwrite migration command uses multi-threading to speed up the process, meaning that adding more CPU cores can help speed up the process.</p>\n\n<p>Once the migration process has been completed successfully, you're all set to use the latest version of Appwrite!</p>\n","metadata":{"source":"./appwrite-docs/upgrade.phtml"}}],[{"pageContent":"<?php\n$serviceName    = $this->getParam('name', '');\n$service        = $this->getParam('service', []);\n$blacklist      = $this->getParam('blacklist', []);\n$description    = $this->getParam('description', '');\n$spec           = $this->getParam('spec', []);\n$host           = (isset($spec['host'])) ? $spec['host'] : '';\n$base           = (isset($spec['basePath'])) ? $spec['basePath'] : '';\n$endpoint       = $this->getParam('protocol', 'https') . '://' . $host . $base;\n$operations     = [];\n$roles          = $this->getParam('roles', []);\n$family         = $this->getParam('family', '');\n$sdk            = $this->getParam('sdk', '');\n$platforms      = $this->getParam('platforms', []);\n$version        = $this->getParam('version', '');\n$versionDocs    = $this->getParam('versionDocs', '');\n$versions       = $this->getParam('versions', []);\n$classes        = [];\n$paths          = $spec['paths'] ?? [];\n$codes          = [\n    '200' => [\n        'text' => 'OK',\n        'class' => 'text-success'\n    ],\n    '201' => [\n        'text' => 'Created',\n        'class' => 'text-success'\n    ],\n    '204' => [\n        'text' => 'No Content',\n        'class' => 'text-success'\n    ],\n];\n\n$markdown = new \\Parsedown();\n$markdown->setSafeMode(true);\n\n$paramSDK = (!empty($sdk)) ? '?sdk='.$sdk : '';\n\nif (!\\function_exists('skipLanguage')) {\n    function skipLanguage($language, $family): bool\n    {\n        if (!$language['enabled']) {\n            return true;\n        }\n        if (!isset($language['family']) || $language['family'] !== $family) {\n            return true;\n        }\n        if ($language['dev']) {\n            return true;\n        }\n        return false;\n    }\n}\n?>\n\n<div data-ls-attrs=\"class=language-<?php echo $this->escape($sdk); ?> platform-<?php echo $this->escape($family); ?> examples-in-<?php echo $this->escape($sdk); ?>\">\n    <?php\n    foreach ($paths as $url => $path) {\n        foreach ($path as $method => $operation) {\n            if(!in_array($service, $operation['tags'])) {\n                continue;\n            }\n\n            $weight         = (isset($operation['x-appwrite']) && isset($operation['x-appwrite']['weight'])) ? $operation['x-appwrite']['weight'] : 0;\n            $snippet        = (isset($operation['x-appwrite']) && isset($operation['x-appwrite']['demo'])) ? $operation['x-appwrite']['demo'] : '';\n            $edit           = (isset($operation['x-appwrite']) && isset($operation['x-appwrite']['edit'])) ? $operation['x-appwrite']['edit'] : '';\n            $rateLimit      = (isset($operation['x-appwrite']) && isset($operation['x-appwrite']['rate-limit'])) ? $operation['x-appwrite']['rate-limit'] : '';\n            $rateTime       = (isset($operation['x-appwrite']) && isset($operation['x-appwrite']['rate-time'])) ? $operation['x-appwrite']['rate-time'] : '';\n            $rateKey        = (isset($operation['x-appwrite']) && isset($operation['x-appwrite']['rate-key'])) ? $operation['x-appwrite']['rate-key'] : '';\n            $scope          = (isset($operation['x-appwrite']) && isset($operation['x-appwrite']['scope'])) ? $operation['x-appwrite']['scope'] : '';\n            $platformsList  = (isset($operation['x-appwrite']) && isset($operation['x-appwrite']['platforms'])) ? $operation['x-appwrite']['platforms'] : [];\n\n            $operation['url'] = $url;\n            $operation['method'] = $method;\n            $operation['weight'] = $weight;\n            $operation['edit'] = $edit;\n            $operation['rateLimit'] = $rateLimit;\n            $operation['rateTime'] = $rateTime;\n            $operation['rateKey'] = $rateKey;\n            $operation['scope'] = $scope;\n            $operation['snippet'] = $snippet;\n            $operation['platforms'] = $platformsList;\n\n            $operations[$weight] = $operation;\n        }\n    }\n\n    usort($operations, function ($a, $b) {\n        return $a['weight'] - $b['weight'];\n    });\n\n    $path = realpath(APP_VENDOR_CE . $description);\n    ?>\n\n    <style>\n        <?php foreach ($platforms as $key => $platform):\n            if(!in_array($key, $blacklist) && $platform['enabled']) {\n                $classes[] = 'example-for-'.$key;\n            }\n            ?>\n\n        <?php foreach ($platform['sdks'] as $language):\n            if(!$language['enabled']) {\n               continue;\n            }\n\n            if(!isset($language['family']) || $language['family'] !== $family) {\n                continue;\n            }\n\n            $docDirectories = (isset($language['docDirectories']))\n                ? $language['docDirectories']\n                : ['Default' => 'examples'];\n            ?>\n\n        <?php foreach($docDirectories as $docDirectoryKey => $docDirectory): ?>\n        .language-<?php echo strtolower($language['key']); ?>-<?php echo strtolower($docDirectoryKey); ?> .example-in-<?php echo strtolower($language['key']); ?>-<?php echo strtolower($docDirectoryKey); ?> {\n            display: block;\n        }\n\n        .example-in-<?php echo strtolower($language['key']); ?>-<?php echo strtolower($docDirectoryKey); ?> {\n            display: none;\n        }\n        <?php endforeach; ?>\n        <?php endforeach; ?>\n        <?php endforeach; ?>\n    </style>\n\n    <ul class=\"families\">\n        <?php if(!in_array(APP_PLATFORM_CLIENT, $blacklist)): ?>\n            <li class=\"<?php if($family === APP_PLATFORM_CLIENT) { echo 'selected'; } ?>\">\n                <a href=\"/docs/client/<?php echo $serviceName; ?>\">Client</a>\n            </li>\n        <?php endif; ?>\n        <?php if(!in_array(APP_PLATFORM_SERVER, $blacklist)): ?>\n            <li class=\"<?php if($family === APP_PLATFORM_SERVER) { echo 'selected'; } ?>\">\n                <a href=\"/docs/server/<?php echo $serviceName; ?>\">Server</a>\n            </li>\n        <?php endif; ?>\n    </ul>\n\n    <div class=\"actions-bar\">\n        <hr class=\"margin-top-no margin-bottom\" />\n\n        <div class=\"row responsive margin-top-negative-small text-size-small text-fade\">\n            <div class=\"col span-8\">\n                <form\n                        data-analytics\n                        data-analytics-event=\"change\"\n                        data-analytics-category=\"console\"\n                        data-analytics-label=\"Switched SDK Examples\"\n                        data-service=\"router.change\"\n                        data-event=\"change\"\n                        data-scope=\"window.ls\"\n                        data-success=\"reset\">\n\n                    <?php echo $this->escape(ucfirst($family)); ?> integration with &nbsp;\n                    <select class=\"choose-platform\" name=\"URL\">\n                        <?php foreach ($platforms as $key => $platform): ?>\n                            <?php\n                                $sdkLanguages = \\array_filter($platform['sdks'], function ($language) use ($family) {\n                                    return $language['isSDK'] ?? true;\n                                });\n                                $exampleLanguages = \\array_filter($platform['sdks'], function ($language) use ($family) {\n                                    return !($language['isSDK'] ?? true);\n                                });\n                            ?>\n                            <?php foreach ($sdkLanguages as $language):\n                                if (skipLanguage($language, $family)) {\n                                    continue;\n                                }\n\n                                $key = (isset($language['key'])) ? $language['key'] : '';\n                                $name = (isset($language['name'])) ? $language['name'] : '';\n                                $beta = (isset($language['beta'])) ? $language['beta'] : false;\n                                $docDirectories = (isset($language['docDirectories']))\n                                    ? $language['docDirectories']\n                                    : ['Default' => 'examples'];\n                                ?>\n                                <?php foreach ($docDirectories as $docDirectoryKey => $docDirectory): ?>\n                                    <option data-ls-attrs=\"value=/docs/<?php echo $this->escape($family); ?>/<?php echo $serviceName; ?>?sdk=<?php echo $this->escape($key); ?>-<?php echo $this->escape(strtolower($docDirectoryKey)); ?>{{router.hash}}\" <?php echo (($key . '-' . strtolower($docDirectoryKey)) === $sdk) ? ' selected' : ''; ?>>\n                                        <?php echo $this->escape($name); ?> SDK <?php if(count($docDirectories) > 1): ?>(<?php echo $docDirectoryKey; ?> examples)<?php endif; ?>\n                                    </option>\n                                <?php endforeach; ?>\n                            <?php endforeach; ?>\n                            \n                            <?php \n                                // if version is lower than 1.2.x, don't show GraphQL and REST as selectable SDKs\n                                if (strcmp($versions[$version]['docs'], \"1.2.x\") < 0) {\n                                    continue;\n                                }   \n                            ?>\n\n                            <?php if (!skipLanguage($language, $family)): ?>\n                                <option disabled>──────────</option>\n                            <?php endif; ?>\n\n                            <?php foreach ($exampleLanguages as $language):\n                                if (skipLanguage($language, $family)) {\n                                    continue;\n                                }\n\n                                $key = (isset($language['key'])) ? $language['key'] : '';\n                                $name = (isset($language['name'])) ? $language['name'] : '';\n                                $beta = (isset($language['beta'])) ? $language['beta'] : false;\n                                $docDirectories = (isset($language['docDirectories']))\n                                    ? $language['docDirectories']\n                                    : ['Default' => 'examples'];\n                                ?>\n                                <?php foreach ($docDirectories as $docDirectoryKey => $docDirectory): ?>\n                                <option data-ls-attrs=\"value=/docs/<?php echo $this->escape($family); ?>/<?php echo $serviceName; ?>?sdk=<?php echo $this->escape($key); ?>-<?php echo $this->escape(strtolower($docDirectoryKey)); ?>{{router.hash}}\" <?php echo (($key . '-' . strtolower($docDirectoryKey)) === $sdk) ? ' selected' : ''; ?>>\n                                    <?php echo $this->escape($name); ?> <?php if(count($docDirectories) > 1): ?>(<?php echo $docDirectoryKey; ?> examples)<?php endif; ?>\n                                </option>\n                            <?php endforeach; ?>\n                            <?php endforeach; ?>\n                        <?php endforeach; ?>\n                    </select>\n                </form>\n            </div>\n            <div class=\"col span-4 clear\">\n                <form class=\"pull-end desktops-only\" onchange=\"this.submit()\"\n                      method=\"get\" data-ls-attrs=\"action=/docs/<?php echo $this->escape($family); ?>/<?php echo $serviceName; ?>{{router.hash}}\">\n\n                    <input type=\"hidden\" name=\"sdk\" value=\"<?php echo $this->escape($sdk); ?>\" />\n\n                    <select class=\"choose-platform\" name=\"v\">\n                        <?php foreach ($versions as $key => $value):\n                            $name = (isset($value['name'])) ? $value['name'] : '';\n                            $selected = ($key === $version) ? ' selected' : '';\n                            ?>\n                            <?php if(!in_array($sdk, ['rest-default', 'graphql-default']) || strcmp($versions[$key]['docs'], \"1.2.x\") >= 0): ?>\n                                <option value=\"<?php echo $this->escape($key); ?>\"<?php echo ($key === $sdk) ? ' selected' : ''; ?><?php echo $selected; ?>><?php echo $this->escape($name); ?></option>\n                            <?php endif; ?>\n                        <?php endforeach; ?>\n                    </select>\n                </form>\n            </div>\n        </div>\n\n        <hr class=\"margin-top-small margin-bottom\" />\n    </div>\n\n    <?php if(!empty($path) && file_exists($path)): ?>\n        <div class=\"row responsive <?php echo implode(' ', $classes); ?>\">\n            <div class=\"col span-8 margin-bottom\">\n\n                <div class=\"content margin-end-xl\">\n                    <?php echo $markdown->text(file_get_contents($path)); ?>\n\n                    <div class=\"clear\">\n                        <a href=\"https://github.com/appwrite/appwrite/edit/master<?php echo $description; ?>\" class=\"pull-end text-size-small\" target=\"_blank\">Edit on GitHub <i class=\"icon-github-circled\"></i></a>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col span-4 margin-bottom index\">\n\n                <div class=\"margin-bottom-small text-fade\">In this page</div>\n\n                <ul>\n                    <?php\n                    $endpoints = 0;\n                    foreach ($operations as $operation):\n                        if(!in_array($family, $operation['platforms'])) {\n                            continue;\n                        }\n\n                        $platformsList = (isset($operation['platforms'])) ? array_map(function($node) {return 'example-for-'.$node;}, $operation['platforms']) : [];\n\n                        $endpoints++;\n                        ?>\n                        <li class=\"margin-bottom-small <?php echo implode(' ', $platformsList); ?>\">\n                            <a href=\"/docs/<?php echo $this->escape($family); ?>/<?php echo $serviceName; ?><?php echo $this->escape($paramSDK); ?>#<?php echo $operation['operationId']; ?>\"><i class=\"icon-angle-circled-right\"></i> <?php echo $this->escape($operation['summary']); ?></a>\n                        </li>\n                    <?php endforeach; ?>\n                </ul>\n\n                <?php if(!$endpoints): ?>\n                    <p>No endpoint found for this version and platform. Switch to a newer version.</p>\n                <?php endif; ?>\n\n            </div>\n        </div>\n    <?php endif; ?>\n\n    <?php foreach ($operations as $operation):\n\n        if(!in_array($family, $operation['platforms'])) {\n            continue;\n        }\n\n        $title = $operation['summary'] ?? '';\n        $url = $operation['url'] ?? '';\n        $method = $operation['method'] ?? '';\n        $description = $operation['description'] ?? '';\n        $parameters = $operation['parameters'] ?? [];\n        $responses = $operation['responses'] ?? [];\n        $produces = $operation['produces'][0] ?? '-';\n        $edit = $operation['edit'] ?? '';\n        $rateLimit = $operation['rateLimit'] ?? '';\n        $rateTime = $operation['rateTime'] ?? '';\n        $rateKey = $operation['rateKey'] ?? '';\n        $scope = $operation['scope'] ?? '';\n        $snippet = $operation['snippet'] ?? '';\n        $security = $operation['security'][0] ?? '';\n        $platformsList = (isset($operation['platforms'])) ? array_map(function($node) {return 'example-for-'.$node;}, $operation['platforms']) : [];\n\n        $rateKey = (is_array($rateKey)) ? implode(',', $rateKey) : $rateKey;\n\n        $rateKey = array_map(function($element)\n        {\n            $element = mb_substr($element, 0, mb_strpos($element, ':'));\n\n            return $element;\n        }, explode(',', $rateKey));\n\n        foreach ($parameters as $key => $parameter) {\n            if($parameter['in'] === 'body') {\n\n                if(isset($parameter['schema']) && isset($parameter['schema']['properties'])) {\n                    foreach ($parameter['schema']['properties'] as $childKey => $childParameter) {\n                        $childParameter['name'] = $childKey;\n                        $childParameter['required'] = (isset($parameter['schema']['required']) && in_array($childKey, $parameter['schema']['required']));\n                        $parameters[$childKey] = $childParameter;\n                    }\n\n                    unset($parameters[$key]);\n                }\n            }\n        }\n\n        usort($parameters, function ($a, $b) {\n            $x = (isset($a['required'])) ? $a['required'] : false;\n            $y = (isset($b['required'])) ? $b['required'] : false;\n\n            return $y - $x;\n        });\n\n        ?>\n        <div class=\"margin-bottom-large x-function\" data-ls-attrs=\"class=margin-bottom-large x-function <?php echo implode(' ', $platformsList); ?>\">\n            <div class=\"row responsive\">\n                <div class=\"col span-7\">\n                    <h2 class=\"margin-bottom\">\n                        <a href=\"/docs/<?php echo $this->escape($family); ?>/<?php echo $serviceName; ?>?sdk=<?php echo $this->escape($sdk); ?>#<?php echo $operation['operationId']; ?>\" id=\"<?php echo $operation['operationId']; ?>\" class=\"references\"><?php echo $this->escape($title); ?></a>\n                    </h2>\n\n                    <div>\n                        <div class=\"route margin-bottom\">\n                            <?php if($sdk === \"graphql-default\"): ?>\n                                <span class=\"method post\">POST</span><span class=\"endpoint\"></span><span class=\"path\">/v1/graphql</span>\n                            <?php else: ?>\n                                <span class=\"method <?php echo $this->escape($method); ?>\"><?php echo strtoupper($this->escape($method)); ?></span><span class=\"endpoint\"></span><span class=\"path\">/v1<?php echo $this->escape($url); ?></span>\n                            <?php endif; ?>\n                        </div>\n\n                        <?php if(!empty($description)): ?>\n                            <?php echo $markdown->text($description); ?>\n                        <?php endif; ?>\n\n                        <div class=\"clear\">\n                            <a href=\"<?php echo $edit; ?>\" class=\"pull-end text-size-small\" target=\"_blank\">Edit on GitHub <i class=\"icon-github-circled\"></i></a>\n                        </div>\n                    </div>\n\n\n                    <?php if($family === APP_PLATFORM_SERVER): ?>\n                        <div class=\"margin-bottom-large\">\n                            <h3 class=\"margin-bottom margin-top-small\">Authentication</h3>\n\n                            <?php if(array_key_exists('Key', $security) && array_key_exists('JWT', $security)): ?>\n                                <p>To access this route, init your SDK with your project unique ID and an <a href=\"/docs/keys\">API Key</a>. Make sure your API Key is created with the <u>\"<?php echo $scope; ?>\"</u> scope. You can also authenticate using a valid <a href=\"/docs/client/account#accountCreateJWT\">JWT</a> and perform actions on behalf of your user.</p>\n                            <?php elseif(array_key_exists('Key', $security)): ?>\n                                <p>To access this route, init your SDK with your project unique ID and an <a href=\"/docs/keys\">API Key</a>. Make sure your API Key is create with the <u>\"<?php echo $scope; ?>\"</u> scope.</p>\n                            <?php elseif(array_key_exists('JWT', $security)): ?>\n                                <p>To access this route, init your SDK with your project unique ID and a valid JWT. Using the <a href=\"/docs/client/account#accountCreateJWT\" target=\"_blank\">JWT</a> authentication you will be able to perform API actions on behalf of your user.</p>\n                            <?php endif; ?>\n                        </div>\n                    <?php endif; ?>\n\n                    <?php if(!empty($rateLimit)): ?>\n                        <div class=\"margin-bottom-large\">\n                            <h3 class=\"margin-bottom margin-top-small\">Rate Limits</h3>\n\n                            <p>This endpoint is limited to <b><?php echo $rateLimit; ?> requests</b> in every <b><?php echo ($rateTime / 60);?> minutes</b>\n                                <?php\n                                $rateKey = array_values(array_filter($rateKey, function($element) {\n                                    return ($element !== 'url');\n                                }));\n\n                                $count = count($rateKey);\n\n                                if(!empty($rateKey)) {\n                                    echo ' per ';\n                                }\n\n                                foreach($rateKey as $i => $factor) {\n\n                                    switch ($factor) {\n                                        case 'ip':\n                                            $factor = 'IP address';\n                                            break;\n\n                                        case 'url':\n                                            $factor = 'URL';\n                                            break;\n\n                                        case 'userId':\n                                            $factor = 'user account';\n                                            break;\n\n                                        case 'email':\n                                            $factor = 'email address';\n                                            break;\n\n                                        default:\n                                            break;\n                                    }\n\n                                    if(empty($factor)) {\n                                        continue;\n                                    }\n\n                                    echo '<b>'.$factor.'</b>';\n\n                                    if($i + 1 !== $count) {\n                                        echo ($i+1 === $count-1) ? ' and ' : ', ';\n                                    }\n                                }\n                                ?>. We use rate limits to avoid service abuse by users and as a security practice. <a href=\"/docs/rate-limits\">Learn more about <?php APP_NAME; ?> rate limiting</a>.</p>\n                        </div>\n                    <?php endif; ?>\n\n                    <?php if(!empty($parameters)): ?>\n                        <h3 class=\"margin-bottom margin-top-small margin-start-small\">HTTP Request</h3>\n                        <table class=\"vertical full args\">\n                            <thead>\n                            <tr>\n                                <td style=\"width: 120px\">Name</td>\n                                <td style=\"width: 70px\"></td>\n                                <td style=\"width: 70px\">Type</td>\n                                <td>Description</td>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            <?php foreach ($parameters as $key => $parameter):\n                                $name = (isset($parameter['name'])) ? $parameter['name'] : '';\n                                $type = (isset($parameter['type'])) ? $parameter['type'] : '';\n                                $description = (isset($parameter['description'])) ? $parameter['description'] : '';\n                                $required = (isset($parameter['required'])) ? $parameter['required'] : false;\n                                ?>\n                                <tr>\n                                    <td data-title=\"Name: \">\n                                        <?php echo $this->escape($name); ?>\n                                    </td>\n                                    <td data-title=\"\">\n                                        <?php if($required): ?>\n                                            <span class=\"tag red\">required</span>\n                                        <?php else: ?>\n                                            <span class=\"tag\">optional</span>\n                                        <?php endif; ?>\n                                    </td>\n                                    <td data-title=\"Type: \"><?php echo $this->escape($type); ?></td>\n                                    <td data-title=\"<?php echo (!empty($description)) ? 'Description: ' : ''; ?>\"><?php echo $markdown->text($description); ?></td>\n                                </tr>\n                            <?php endforeach; ?>\n                            </tbody>\n                        </table>\n                    <?php endif; ?>\n\n                    <?php if (!empty($responses)): ?>\n                        <h3 class=\"margin-bottom margin-top-large margin-start-small\">HTTP Response</h3>\n\n                        <table class=\"vertical full args\">\n                            <thead>\n                            <tr>\n                                <td style=\"width: 120px\">Status Code</td>\n                                <td style=\"width: 170px\">Content Type</td>\n                                <td>Payload</td>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            <?php foreach ($responses as $code => $response):\n                                $text = $codes[$code]['text'] ?? '';\n                                $class = $codes[$code]['class'] ?? '';\n                                $description = (!empty($response['description']) && isset($response['schema']['$ref'])) ? $response['description'].' Object' : '-';\n                                $model = $response['schema']['$ref'] ?? '';\n\n                                $isOneOf = isset($response['schema']['x-oneOf']);\n                                ?>\n                                <tr>\n                                    <td data-title=\"Status Code: \"><span class=\"<?php echo $this->escape($class); ?>\"><?php echo $this->escape($code); ?></span>&nbsp;&nbsp;<span class=\"text-fade\"><?php echo $this->escape($text); ?></span></td>\n                                    <td data-title=\"Content Type: \"><?php echo $this->escape($produces); ?></td>\n                                    <td data-title=\"Payload: \">\n                                        <?php if(!empty($model)): ?>\n                                            <?php if($model !== '#/definitions/any'): ?>\n                                                <a href=\"/docs/models/<?php echo $this->escape(str_replace('#/definitions/', '', $model)); ?>\"><?php echo $this->escape($description); ?></a>\n                                            <?php else: ?>\n                                                JSON Object\n                                            <?php endif; ?>\n                                        <?php elseif($isOneOf): ?>\n                                            <?php\n                                            echo \\implode('<br />', \\array_map(function($oneOfRule) {\n                                                $oneOfRule = (isset($oneOfRule['$ref'])) ? str_replace('#/definitions/', '', $oneOfRule['$ref']) : '';\n                                                return '<a href=\"/docs/models/' . $this->escape($oneOfRule) . '\">' . $this->escape($oneOfRule) . '</a>';\n                                            }, $response['schema']['x-oneOf']));\n                                            ?>\n                                        <?php else: ?>\n                                            -\n                                        <?php endif; ?>\n                                    </td>\n                                </tr>\n                            <?php endforeach; ?>\n                            </tbody>\n                        </table>\n                    <?php endif; ?>\n\n                </div>\n                <div class=\"col span-5 sticky-top\">\n                    <div class=\"margin-bottom-small margin-top-large clear\">\n                        <div class=\"request-title\">Example Request</div>\n                    </div>\n                    <ul class=\"example\">\n                        <?php foreach ($platforms as $platform):\n                            if(!$platform['enabled']) {\n                                continue;\n                            }\n\n                            foreach ($platform['sdks'] as $language):\n                                if(!$language['enabled']) {\n                                    continue;\n                                }\n\n                                if(!isset($language['family']) || $language['family'] !== $family) {\n                                    continue;\n                                }\n\n                                $docDirectories = (isset($language['docDirectories']))\n                                    ? $language['docDirectories']\n                                    : ['Default' => 'examples'];\n\n                                ?>\n                                <?php foreach($docDirectories as $docDirectoryKey => $docDirectory):\n                                $example = APP_VENDOR_CE.'/docs/examples/'.$versionDocs.'/'.$language['family'].'-'.$language['key'].'/'.$docDirectory.'/'.$snippet;\n\n                                if(!is_readable($example)) {\n                                    // echo \"<p class=\\\"text-danger\\\"><b>Failed to read code example for {$language['name']}</b>: ({$example})</p>\";\n                                    continue;\n                                }\n                                ?>\n                                <li class=\"example-in-<?php echo $language['key']; ?>-<?php echo strtolower($docDirectoryKey); ?>\">\n                                    <div class=\"ide\" data-lang=\"<?php echo $language['key']; ?>\" data-lang-label=\"<?php echo $language['name']; ?><?php if ($language['isSDK'] ?? true): ?> SDK<?php endif ?>\">\n                                        <pre class=\"line-numbers\"><code class=\"prism language-<?php echo $language['prism']; ?>\" data-prism><?php echo $this->escape(file_get_contents($example)); ?></code></pre>\n                                    </div>\n                                </li>\n                            <?php endforeach; ?>\n                            <?php endforeach; ?>\n                        <?php endforeach; ?>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    <?php endforeach; ?>\n</div>","metadata":{"source":"./appwrite-docs/service.phtml"}}],[{"pageContent":"<?php\n\n$events = $this->getParam('events', []);\n\n?>\n<p>Webhooks allow you to build or set up integrations which subscribe to certain events on Appwrite. When one of those events is triggered, we'll send an HTTP POST payload to the webhook's configured URL. Webhooks can be used to purge cache from CDN, calculate data or send a Slack notification. You're only limited by your imagination.</p>\n\n<h2><a href=\"/docs/webhooks#addWebhook\" id=\"addWebhook\">Add Your Webhook</a></h2>\n\n<p>You can set your webhook by adding it from your Appwrite project dashboard. You can access your webhooks settings from your project dashboard or on the left navigation panel. Click the 'Add Webhook' button and choose your webhook name and the events that should trigger it. You can also set an optional basic HTTP authentication username and password to protect your endpoint from unauthorized access. </p>\n\n<h2><a href=\"/docs/webhooks#payload\" id=\"payload\">Payload</a></h2>\n\n<p>Each event type has a specific payload format with the relevant event information. All event payloads mirror the payloads for the API payload which parallel to the <a href=\"/docs/events\">event types</a>.</p>\n\n<h2><a href=\"/docs/webhooks#headers\" id=\"headers\">Headers</a></h2>\n\n<p>HTTP requests made to your webhook's configured URL endpoint will contain several special headers:</p>\n\n<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" class=\"full text-size-small\">\n    <thead>\n    <tr>\n        <th style=\"width: 220px\">Header</th>\n        <th>Description</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>\n            X-Appwrite-Webhook-Id\n            <p class=\"margin-top-small text-fade\">version >= 0.7</p>\n        </td>\n        <td>The ID of the Webhook who triggered the event.</td>\n    </tr>\n    <tr>\n        <td>X-Appwrite-Webhook-Events</td>\n        <td>Names of the events that triggered this delivery.</td>\n    </tr>\n    <tr>\n        <td>X-Appwrite-Webhook-Name</td>\n        <td>Name of the webhook as specified in your app settings and <a href=\"/docs/events\">events list</a>.</td>\n    </tr>\n    <tr>\n        <td>\n            X-Appwrite-Webhook-User-Id\n            <p class=\"margin-top-small text-fade\">version >= 0.7</p>\n        </td>\n        <td>The user ID of the user who triggered the event. Returns an empty string if an API key triggered the event.<br /><br />Note that events like `account.create` or `account.sessions.create` are performed by guest users and will not return any user ID. If you still need the user ID for these events, you can find it in the event payload.</td>\n    </tr>\n    <tr>\n        <td>\n            X-Appwrite-Webhook-Project-Id\n            <p class=\"margin-top-small text-fade\">version >= 0.7</p>\n        </td>\n        <td>The ID of the project who owns the Webhook and API call.</td>\n    </tr>\n    <tr>\n        <td>\n            X-Appwrite-Webhook-Signature\n            <p class=\"margin-top-small text-fade\">version >= 0.15.0</p>\n        </td>\n        <td>The HMAC-SHA1 signature of the payload. This is used to verify the authenticity of the payload.</td>\n    </tr>\n    <tr>\n        <td>User-Agent</td>\n        <td>Each request made by Appwrite will be 'Appwrite-Server'.</td>\n    </tr>\n    </tbody>\n</table>\n\n<h2 id=\"verification\"><a href=\"/docs/webhooks#verification\">Verification</a></h2>\n\n<p>Webhooks can be verified by using the <a href=\"/docs/webhooks#headers\">X-Appwrite-Webhook-Signature</a> header. This is the HMAC-SHA1 \nsignature of the payload. You can find the signature key in your webhooks properties in the dashboard. To generate this hash you append\nthe payload to the end of webhook URL (make sure there are no spaces in between) and then use the HMAC-SHA1 algorithm to generate the signature.\n\nAfter you've generated the signature, compare it to the \"X-Appwrite-Webhook-Signature\" header value. If they match, the payload is valid and you can trust it came from\nyour Appwrite instance. </p>\n\n<!-- CODE EXAMPLES FOR THIS SECTION, Uncomment and finish when we have time -->\n\n<!-- \nAn example of how to generate the signature is shown below:</p>\n\n<ul class=\"phases clear\" data-ui-phases>\n    <li>\n        <h3>NodeJS</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"javascript\" data-lang-label=\"NodeJS\">\n            <pre class=\"line-numbers\"><code class=\"prism language-javascript\" data-prism>const crypto = require('crypto');\nlet token = crypto.createHmac(\"sha1\", process.env.WEBHOOK_SIG_KEY)\n    .update(`https://yourwebhookurl/test${payload.body}`) // Make sure there isn't a space between the URL and body.\n    .digest().toString('base64');\n\nif (token !== payload.headers['x-appwrite-webhook-signature']) {\n    throw new Error('Failed authentication check.')\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>PHP</h3>\n\n        <div class=\"ide margin-bottom\" data-lang=\"php\" data-lang-label=\"PHP\">\n            <pre class=\"line-numbers\"><code class=\"prism language-dart\" data-prism>$token = base64_encode(hash_hmac('sha1', 'https://yourwebhookurl/test' . $payload.body, getenv('WEBHOOK_SIG_KEY'), true));\n\nif ($token != $payload.headers['x-appwrite-webhook-signature']) {\n    throw new Error('Failed authentication check.');\n}</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Android</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"android\" data-lang-label=\"Android SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-kotlin\" data-prism>val client = Client(context)\n\nclient\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\") // Your project ID\n\nval realtime = Realtime(client)\n\n// Subscribe to files channel\nrealtime.subscribe(\"files\", callback = { response ->\n    if(response.events.contains(\"buckets.*.files.*.create\")) {\n        // Log when a new file is uploaded\n        print(response.payload.toString());\n    }\n})</code></pre>\n        </div>\n    </li>\n    <li>\n        <h3>Apple</h3>\n        <div class=\"ide margin-bottom\" data-lang=\"apple\" data-lang-label=\"Apple SDK\">\n            <pre class=\"line-numbers\"><code class=\"prism language-swift\" data-prism>let client = Client()\n\nclient\n    .setEndpoint(\"https://cloud.appwrite.io/v1\") // Your API Endpoint\n    .setProject(\"[PROJECT_ID]\") // Your project ID\n\nlet realtime = Realtime(client)\n\n// Subscribe to files channel\nlet subscription = realtime.subscribe(channels: [\"files\"]) { message in\n    if(message.events!.contains(\"buckets.*.files.*.create\")) {\n        // Log when a new file is uploaded\n        print(String(describing: message.payload))\n    }\n}</code></pre>\n        </div>\n    </li>\n</ul> -->\n\n<h2 id=\"events\"><a href=\"/docs/events\">Events</a></h2>\n<p>Appwrite has events that fire when a resource changes. These events cover all Appwrite resources and can reflect create, update, and delete actions. You can specify one or many events to subscribe to with webhooks.</p>\n<ul>\n    <li class=\"margin-bottom\"><a href=\"/docs/keys\" rel=\"noopener\"><i class=\"icon-angle-circled-right margin-start-negative-tiny margin-end-tiny\"></i> Learn more about events</a></li>\n</ul>","metadata":{"source":"./appwrite-docs/webhooks.phtml"}}]]